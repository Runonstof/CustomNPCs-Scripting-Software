var UNI = [
	'0',
	'1',
	'2',
	'3',
	'4',
	'5',
	'6',
	'7',
	'8',
	'9',
	'a',
	'b',
	'c',
	'd',
	'e',
	'f',
];
var CHAT_EMOTES = {
	"check": "\u9366",
	"hp": "\u9390",
	"hphalf": "\u9391",
	"hpempty": "\u938E",
	"cross": "\u9367",
	"sun": "\u2739",
	"star": "\u2729",
	"recycle": "\u267B",
	"seagull": "\u932A",
	//emoji
	"cool": "\u9914",
	"shocked": "\u9915",
	"smile": "\u9916",
	"joy": "\u9917",
	"wink": "\u9918",
	"happy": "\u9919",
	"crazy": "\u991A",
	//Misc
	"wifi5": "\u936A",
	"wifi4": "\u936B",
	"wifi3": "\u936C",
	"wifi2": "\u936D",
	"wifi1": "\u936E",
	"wifi0": "\u936F",
	"lang": "\u935C",
	"money": "\u932B",
	"trin": "\u932D",
	"unu": "\u932E",
	"folder": "\u932F",
	"thumbsup": "\u93F3",
	"thumbsdown": "\u93F4",
	"bomb": "\u93F5",
	"hazard": "\u93F6",
	"ying": "\u93F7",
	"danger": "\u93F8",
	"noperm": "\u93F9",
	"gear": "\u93FA",
	"stats": "\u93FB",
	"medal_bronze": "\u99F0",
	"medal_silver": "\u99F1",
	"medal_gold": "\u99F2",
	"medal_diamond": "\u99F3",
	"medal_emerald": "\u99F4",
	"unlock": "\u937E",
	"lock": "\u937F",
	//Arrows
	"arrow_u": "\u9920",
	"arrow_ur": "\u9921",
	"arrow_r": "\u9922",
	"arrow_dr": "\u9923",
	"arrow_d": "\u9924",
	"arrow_dl": "\u9925",
	"arrow_l": "\u9926",
	"arrow_ul": "\u9927",
	//Mobs
	"creeper": "\u92C0",
	"ccreeper": "\u92C1",
	"skeleton": "\u92C2",
	"wskeleton": "\u92C3",
	"spider": "\u92C4",
	"zombie": "\u92C5",
	"vzombie": "\u92C6",
	"slime": "\u92C7",
	"ghast": "\u92C8",
	"oghast": "\u92C9",
	"pigzombie": "\u92CA",
	"enderman": "\u92CB",
	"blaze": "\u92CE",
	"mslime": "\u92CF",
	"illager": "\u92D1",
	"pig": "\u92D3",
	"sheep": "\u92D4",
	"cow": "\u92D5",
	"chicken": "\u92D6",
	"villager": "\u92E5",

	//items
	"iron_ingot": "\u90B0",
	"gold_ingot": "\u90B1",
	"brick": "\u90B2",
	"nether_brick": "\u90B3",
	"coal": "\u90B4",
	"ccoal": "\u90B5",
	"diamond": "\u90B6",
	"ruby": "\u90B7",
	"emerald": "\u90B8",
	"nether_star": "\u90BD",

	//blocks items
	"coal_ore": "\u9220",
	"iron_ore": "\u9221",
	"gold_ore": "\u9222",
	"redstone_ore": "\u9223",
	"diamond_ore": "\u9224",
	"lapis_ore": "\u9225",
	"emerald_ore": "\u9226",
	"cobble": "\u9227",
	"mosscobble": "\u9228",
	"stone": "\u9229",
	"chest": "\u92F9",
	"enderchest": "\u92FB",
	"giftchest": "\u92FC",
	"pumpkin": "\u9270",
	"jacklantern": "\u9271",
	"melon": "\u9274",
	"cactus": "\u9276",
	"sponge": "\u927C",
	"tnt": "\u927E",
	"lit": "\u9200",
	"water": "\u920B",
	"lava": "\u920E",
	"portal": "\u920F",


	//Foods
	"creamcookie": "\u932C",
	"cookie": "\u90EB",
	"cake": "\u90EC",
	"ppie": "\u90ED",

	//Weapons and tools
	"wooden_sword": "\u9000",
	"wooden_pickaxe": "\u9001",
	"wooden_shovel": "\u9002",
	"wooden_axe": "\u9003",
	"wooden_hoe": "\u9004",

	"stone_sword": "\u9005",
	"stone_pickaxe": "\u9006",
	"stone_shovel": "\u9007",
	"stone_axe": "\u9008",
	"stone_hoe": "\u9009",

	"golden_sword": "\u900A",
	"golden_pickaxe": "\u900B",
	"golden_shovel": "\u900C",
	"golden_axe": "\u900D",
	"golden_hoe": "\u900E",

	"iron_sword": "\u9010",
	"iron_pickaxe": "\u9011",
	"iron_shovel": "\u9012",
	"iron_axe": "\u9013",
	"iron_hoe": "\u9014",

	"diamond_sword": "\u9015",
	"diamond_pickaxe": "\u9016",
	"diamond_shovel": "\u9017",
	"diamond_axe": "\u9018",
	"diamond_hoe": "\u9019",


	//Emotes that *should not be* public
	"box": "\u2B1B",

};

//config for gramados

//Configure your own currency units
//Units of currency, with own names, with lowest unit being 1
var _COINTABLE = {//MUST BE FROM LOW TO HIGH
	'c': 1,
	'g': 100,
	'k': 100000,
	'm': 100000000,
	'b': 100000000000,
}; //With this setup, the syntax for 223503 would be 2k235g3c (case-INSensitive)

//Extra currencies that have no items themselves
var VIRTUAL_CURRENCIES = [
	{
		"name": "amoney",
		"displayName": "Arcade Tokens",
		"default": 0,
		"prefix": "&b:money:A",
		"suffix": "",
	},
	{
		"name": "vmoney",
		"displayName": "Vote Tokens",
		"default": 0,
		"prefix": "&d:money:V",
		"suffix": "",
	},
];


//Currency settings
var _COINITEMNAME = '&2&lMoney&r';//Custom name of currency
var _COINITEM_PREFIX = '&e'; //Prefix showing before money value lore (used for color coding)

//Your money items, and their values in money syntax
//"value": "item_id",
var LOWVALUE_ID = "minecraft:iron_nugget";
var MIDVALUE_ID = "minecraft:gold_nugget";
var HIGHVALUE_ID = "minecraft:gold_nugget";


//Coin Items for the physical currency
var _COINITEMS = { //MUST BE FROM LOW TO HIGH
	'1c': LOWVALUE_ID,
	'5c': LOWVALUE_ID,
	'10c': LOWVALUE_ID,
	'20c': LOWVALUE_ID,
	'50c': LOWVALUE_ID,
	'1g': LOWVALUE_ID,
	'2g': LOWVALUE_ID,
	'5g': MIDVALUE_ID,
	'10g': MIDVALUE_ID,
	'20g': MIDVALUE_ID,
	'50g': MIDVALUE_ID,
	'100g': MIDVALUE_ID,
	'200g': MIDVALUE_ID,
	'500g': MIDVALUE_ID,
	'1k': HIGHVALUE_ID,
	'10k': HIGHVALUE_ID,
	'100k': HIGHVALUE_ID,
	'1m': HIGHVALUE_ID,
	'10m': HIGHVALUE_ID,
	'100m': HIGHVALUE_ID,
	'1b': HIGHVALUE_ID,
};
//LANGUAGE settings
var _MSG = {
    //Error Strings
	"cmdNotFound": "&cCould not find this command!",
	"cmdNoPerm": "&cYou don't have permission to this command!",
	"argNotValid": "&c'{argName}' is not a valid id/name! It can only contain: &o{allowed}",
	"argToShort": "&c'{argName}' is too short! (Min. {allowed} characters)",
	"argNoColor": "&c'{argName}' cannot contain colorcoding!",
	"argEnum": "&c'{argName}' must be one of the following: &o{allowed}!",
	"argNaN": "&c'{argName}' is not a number!",
	"argMax": "&c'{argName}' cannot be bigger than {allowed}!",
	"argMin": "&c'{argName}' cannot be smaller than {allowed}!",
	"argNotExists": "&c{type} '{argVal}' does not exists!",
	"argExists": "&c{type} '{argVal}' already exists!",
	"argColor": "&cColors must be one of the following: {allowed}!",
	"argColorEffect": "&cChat effects must be one of the following: {allowed}!",
	"argItemAttr": "&cItem attributes must be one of these {allowed}!",
	"argBool": "&c{dataType} must be true or false!",
	//button texts
    "undoBtnText": "Undo",
    "refreshBtnText": "Refresh"
};
//===== CONFIG
var CONFIG_SERVER = {
	"NAME": "YourServerName",
	"TITLE": "&a&lYourServerName",
	"PREFIX": "&a&l",
	"BAR_OPEN": "&r&l[=======] &r",
	"BAR_CLOSE": "&r&l [=======]&r",
	"DEFAULT_PERM_TEAMS": [
		"Owner",
		"Developer"
	],
	"DEFAULT_PERM_PLAYERS": [],
	"DEFAULT_TEAM_JOIN": "Player",
	"DEVELOPMENT_MODE": false,
	"USE_DISK": "DEFAULT",
	"LICENSE_KEY": "",
	"FILE_DISKS": {
		"DEFAULT": {
			"path": "{worldname}/customnpcs/scripts/world_data.json",
		},
		"CST_DATA": {
			"path": "CustomServerTools/data/data.json",
		}
	}
	///"ENABLE_BOT_MEE6": true,
	//"DEFAULT_PAY": 0,
	//"DEFAULT_MONEY": 0,
	//"MONEY_POUCH_LOSE_PERC": 50,
	//"COINTABLE": {},
};

var DEFAULT_MONEY = 0;

//Configure your own time units for in arguments etc!
var msTable = {
	//Reallife time
	'y': 31556926000, //365.25 days for taking leap years into account
	'mon': 2629743830, //
	'w': 604800000,
	'd': 86400000,
	'h': 3600000,
	'min': 60000,
	's': 1000,
	'ms': 1,
};

function array_shuffle(a) {
    var j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}

function array_filter(a, fn) {
	var aa = [];
	for(var i in a) {
		if(fn(a[i])) { aa.push(a[i]); }
	}

	return aa;
}

function array_dist(a) {
	var b = [];
	for(var c in a) {
		if(b.indexOf(a[c]) == -1) {
			b.push(a[c]);
		}
	}

	return b;
}

function array_remove(array, element) {
  var index = array.indexOf(element);
  if (index !== -1) {
    array.splice(index, 1);
  }
}

function removeFromArray(arr, vals) {
	if(typeof(vals) == 'string') { vals = [vals]; }
	var a = arr;
	for(var v in vals) {
var val = vals[v];
		array_remove(a, val);
	}
	return a;
}
function removeFromArrayByKey(arr, keys) {
	var narr = [];
	for(var k in keys) {
var key = keys[k];
		keys[k] = parseInt(key);
	}
	for(var i in arr) {
var ari = arr[i];
		if(keys.indexOf(i) > -1) {
			narr.push(ari);
		}
	}
	return narr;
}


function array_merge(a1, a2) {
	var bb = [];
	for(var k in a1) {
		bb[k] = a1[k];
	}
	for(var k in a2) {
		bb[k] = a2[k];
	}
	return bb;
}

function arrayTransform(arr, elfn) {
	var newa = [];
	for(var a in arr) {
var arri = arr[a];
		newa.push(elfn(arri, a, arr));
	}
	return newa;
}

function arrayTakeRange(arr, start, end) {
	if(typeof(end) == typeof(undefined) || end === null) { end = null; }
	if(end == null) { end = arr.length; }
	var a = [];
	var _end = Math.min(end, arr.length);
	var _start = Math.min(start, _end);
	for(var i = _start; i < Math.min(end, arr.length); i++) {
		if(typeof(arr[i]) != typeof(undefined)) {
			a.push(arr[i]);
		}
	}
	return a;
}

function arrayOccurs(string, subArray, allowOverlapping, caseSensitive) {
	if(typeof(allowOverlapping) == typeof(undefined) || allowOverlapping === null) { allowOverlapping = false; }
	if(typeof(caseSensitive) == typeof(undefined) || caseSensitive === null) { caseSensitive = true; }
	var occ = 0;
	for(var i in subArray) {
var sel = subArray[i];
		occ += occurrences(string, sel, allowOverlapping, caseSensitive);
	}

	return occ;
}

function arrayFormat(array, format, sep) {
	var joined = "";
  	for(var i = 0; i < array.length; i++) {
    	joined += format.fill({
        	"VALUE": array[i]
        })+(i == array.length-1 ? "" : sep||" ");
    }
  	return joined;
}


var _RAWCOLORS = {
	'0': 'black',
	'1': 'dark_blue',
	'2': 'dark_green',
	'3': 'dark_aqua',
	'4': 'dark_red',
	'5': 'dark_purple',
	'6': 'gold',
	'7': 'gray',
	'8': 'dark_gray',
	'9': 'blue',
	'a': 'green',
	'b': 'aqua',
	'c': 'red',
	'd': 'light_purple',
	'e': 'yellow',
	'f': 'white',
};

var _RAWEFFECTS = {
	'o': 'italic',
	'l': 'bold',
	'k': 'magic',
	'm': 'strike',
	'n': 'underline',
	'r': 'reset'
}

var _RAWCODES = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS));
function getColorId(name) {
	for(var i in _RAWCOLORS) {
		if(name == _RAWCOLORS[i]) {
			return i;
		}
	}
	for(var i in _RAWEFFECTS) {
var re = _RAWEFFECTS[i];
		if(name == re) {
			return i;
		}
	}
	return 'r';
}
function getColorName(id) {
	for(var i in _RAWCOLORS) {
var rc = _RAWCOLORS[i];
		if(id == i) {
			return rc;
		}
	}
	for(var i in _RAWEFFECTS) {
var re = _RAWEFFECTS[i];
		if(id == i) {
			return re;
		}
	}
	return 'white';
}

function ccs(str, af) {
	if(typeof(af) == typeof(undefined) || af === null) { af = null; }
	return colorCodeString(str, af);
}

function colorCodeString(str, allowed_formats) {
	if(typeof(allowed_formats) == typeof(undefined) || allowed_formats === null) { allowed_formats = null; }
	if(allowed_formats == null) {
		allowed_formats = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS));
	}
	allowed_formats = removeFromArray(allowed_formats, ['x', 'y']);
	return str.replace(new RegExp("&(["+allowed_formats.join("")+"])", 'g'), '\u00A7$1').replace(/&\\/g, '&');
}

function escCcs(str, esc_formats) {
	if(typeof(esc_formats) == typeof(undefined) || esc_formats === null) { esc_formats = null; }
	if(esc_formats == null) {
		esc_formats = _RAWCODES;
	}

	return str.replace(new RegExp('&(['+esc_formats.join("")+'])', 'g'), '');
}

function parseEmotes(str, allwd, replaceOld) {
	if(typeof(allwd) == typeof(undefined) || allwd === null) { allwd = []; }
	if(typeof(replaceOld) == typeof(undefined) || replaceOld === null) { replaceOld = true; }
	if(replaceOld) {
		str = str.replaceAll(Object.values(CHAT_EMOTES), '');
	}
	for(var ce in CHAT_EMOTES) {
		var chatemote = CHAT_EMOTES[ce];
    	if(allwd.length == 0  || allwd.indexOf(ce) > -1) {
		    str = str.replaceAll(':'+ce+':', chatemote);
		    str = str.replaceAll(':/'+ce+'/:', ':'+ce+':');
    	}
	}
	return str;
}


function strf(str, toRaw, allowed) {
	if(typeof(toRaw) == typeof(undefined) || toRaw === null) { toRaw = true; }
	if(typeof(allowed) == typeof(undefined) || allowed === null) { allowed = null; }
	return strrawformat(str, toRaw, allowed);
}
var CHAT_CMD_RGX = /{[\s]*(?:([\w]+)[\s]*\:[\s]*([\w\W\/]+?)|\*)(?:[\s]*\|[\s]*([\w]+)[\s]*\:[\s]*([\w\W\/]+?[\s]*))?}/;
var CHAT_CMD_RGX_G = /{[\s]*(?:([\w]+)[\s]*\:[\s]*([\w\W\/]+?)|\*)(?:[\s]*\|[\s]*([\w]+)[\s]*\:[\s]*([\w\W\/]+?[\s]*))?}/g;


function strrawformat(str, toRaw, allowed) {
	if(typeof(toRaw) == typeof(undefined) || toRaw === null) { toRaw = false; }
	var rf = [];
	var txt = '';
	var ri = -1;
	var isCode = false;
	var txtColor = 'white';
	var isItalic = false;
	var isBold = false;
	var isStrike = false;
	var isUnderlined = false;
	var isObf = false;
	str = str+'&r ';

	for(var i = 0; i < str.length; i++) {
		var c = str.substr(i, 1);
		if(c == '&' || i == str.length-1) {
			//Check if new section has to be made
			if(txt.length > 0) {
				ri++;
				var cmds = [];

				rf.push([txt, txtColor, isItalic, isBold, isUnderlined, isStrike, isObf]);
				isItalic = false;
				isBold = false;
				isUnderlined = false;
				isStrike = false;
				isObf = false;
				txtColor = 'white';
				txt = '';
			}
			isCode = true;
			continue;
		} else {
			if(!isCode) {
				txt += c.toString();
			} else {
				//Check Colors
				if(typeof(_RAWCOLORS[c]) != typeof(undefined)) {
					txtColor = _RAWCOLORS[c];
				}
				//Check Markup
				switch(c.toString()) {
					case 'o': {
						isItalic = true;
						break;
					}
					case 'l': {
						isBold = true;
						break;
					}
					case 'n': {
						isUnderlined = true;
						break;
					}
					case 'm': {
						isStrike = true;
						break;
					}
					case 'k': {
						isObf = true;
						break;
					}
					case 'r': {
						isItalic = false;
						isBold = false;
						isUnderlined = false;
						isStrike = false;
						isObf = false;
						txtColor = 'white';
						break;
					}
				}
				isCode = false;
			}
		}
	}

	return (!toRaw ? rf : rawformat(rf, true));
}

function rawformat(str_pieces, fullraw, allowed) {
	if(typeof(fullraw) == typeof(undefined) || fullraw === null) { fullraw = true; }
	if(typeof(allowed) == typeof(undefined) || allowed === null) { allowed = null; }
	if(allowed == null) {
		allowed = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS)).concat(['x', 'y']);

	}
	var txt = '';
	if(fullraw) { txt+='[""'; }

	for(var i in str_pieces) {
		var p = str_pieces[i];
		var ntext = p[0].replace(/\"/g, '\\"');
		var nm =  ntext.match(CHAT_CMD_RGX) || [];
		if(nm.length > 0) {
			p[7] = nm[1];
			p[8] = nm[2];
			p[9] = nm[3];
			p[10] = nm[4];
			ntext = ntext.replace(nm[0], '');
		}
		var pc = '{"text":"'+ntext+'"';
		if(p[1]) {
			if(allowed.indexOf(getColorId(p[1])) == -1) {
				p[1] = 'white';
			}

			pc+=',"color":"'+p[1].toString()+'"';

		}
		if(p[2]) {
			if(allowed.indexOf('o') > -1) {
				pc+=',"italic":true';
			}
		}
		if(p[3]) {
			if(allowed.indexOf('l') > -1) {
				pc+=',"bold":true';
			}
		}
		if(p[4]) {
			if(allowed.indexOf('n') > -1) {
				pc+=',"underlined":true';
			}
		}
		if(p[5]) {
			if(allowed.indexOf('m') > -1) {
				pc+=',"strikethrough":true';
			}
		}
		if(p[6]) {
			if(allowed.indexOf('k') > -1) {
				pc+=',"obfuscated":true';
			}
		}

		if(p[7] && p[8]) { pc+=',"clickEvent":{"action":"'+p[7]+'","value":"'+p[8]+'"}'; }
		if(p[9] && p[10]) { pc+=',"hoverEvent":{"action":"'+p[9]+'","value":"'+ccs((p[10]||"").replace(/\$/g, '\u00A7'),allowed)+'"}'; }
		pc += '}';


		txt+=( fullraw ? ',' : '' )+pc.toString();
	}

	if(fullraw) {
		txt += ']';
	}

	return txt;
}

/**
 * 
 * @param {Number} value Current value
 * @param {Number} max Maximum value
 * @param {Number} length Character length
 * @param {String||'|'} progChar Progressbar character
 * @param {String} fillColor Filled color code '&a'
 * @param {String} leftColor Filles color code '&c'
 */
function progressBar(value, max, length, progChar, fillColor, leftColor, opener, closer){
	if(typeof(progChar) == typeof(undefined) || progChar === null) { progChar = null; }
	if(typeof(fillColor) == typeof(undefined) || fillColor === null) { fillColor = '&a'; }
	if(typeof(leftColor) == typeof(undefined) || leftColor === null) { leftColor = '&c'; }
	if(typeof(opener) == typeof(undefined) || opener === null) { opener = '&l['; }
	if(typeof(closer) == typeof(undefined) || closer === null) { closer = '&l]'; }
	var skillBar = '&r'+opener+'&r';
	var progress = Math.floor((value/max)*length);
	var proc = Math.round(value/max*100);
	for(var i = 0; i < length; i++) {
		if(i < progress) skillBar += fillColor+(progChar||'|');
		if(i >= progress) skillBar += leftColor+(progChar||'|');
	}
	return skillBar += '&r'+closer+'&r';
}


function handleError(error, logsToConsole, target) {
	if(typeof(logsToConsole) == typeof(undefined) || logsToConsole === null) { logsToConsole = true; }
	if(typeof(target) == typeof(undefined) || target === null) { target = null; }
    var world = API.getIWorld(0);

    var errinfo = "";
    if(error.fileName) {
        errinfo += "$6Error in "+error.fileName+(error.lineNumber?':'+error.lineNumber:"")+"\n";
    }
    if(error.message) {
        errinfo += "$e"+error.message.replaceAll("&", "")+"\n";
    }
    if(error.stack) {
        errinfo += "$r\n"+error.stack+"\n";
    }
    var errorTxt = "&cScript error in "+error.fileName+(error.lineNumber? ":"+error.lineNumber : '')+"! &n&c[Error Info]{*|show_text:"+errinfo.replaceAll("&", "")+"}&r";
    if(logsToConsole) {
        print("Error in "+error.fileName+":"+error.lineNumber+"\n"+error.message+"\n\n"+error.stack);
    }
    executeCommandGlobal("/tellraw "+(target||"@a")+" "+strf(errorTxt));
}

var File = Java.type("java.io.File");
var Files = Java.type("java.nio.file.Files");
var Paths = Java.type("java.nio.file.Paths");
var CHARSET_UTF_8 = Java.type("java.nio.charset.StandardCharsets").UTF_8;


function mkPath(path) {
	var expath = path.split("/");
	var curpath = "";
	for(var ex in expath) {
		var expt = expath[ex];
		curpath += (curpath == "" ? "" : "/")+expt;
		var pfile = new File(curpath);
		if(!pfile.exists()) {
			if(expt.match(/[\w]+\.[\w]+/) === null) { //is dir?
				pfile.mkdir();
			} else {
				pfile.createNewFile();
			}
		}
	}
}

function readDir(dirPath){
	var res = [];
	var files = new File(dirPath).listFiles();
	for(var id in files) {
var file = files[id];
		if(file.isDirectory())
			res = res.concat( readDir(file.toString()) );
		else
			res.push( Java.from( readFile(file.toString()) ).join("\n").replace(/\t/g, "  ") );
	}
	return res;
}

function readFileAsString(filePath) {
	try {
		return Java.from( readFile(filePath) ).join("\n").replace(/\t/g, "  ");
		
	} catch(exc) {
		return readFile(filePath).join("\n").replace(/\t/g, "  ");
	}
}


function readFile(filePath){
	var path = Paths.get(filePath);
	try{
		var lines = Files.readAllLines(path, CHARSET_UTF_8);
		return lines;
	} catch (e){
		return [];
	}
}

function writeToFile(filePath, text, offset, length) {
	if(typeof(offset) == typeof(undefined) || offset === null) { offset = null; }
	if(typeof(length) == typeof(undefined) || length === null) { length = null; }
	var path = Paths.get(filePath);
	try {
		var writer = Files.newBufferedWriter(path, CHARSET_UTF_8);
		writer.write(text, offset||0, length||text.length);
		writer.close();
		return true;
	} catch (exc) {
		return false
	}
}

//==Reallife date handler for hiring regions etc

Date.prototype.addTime = function(addTime) {
	this.setTime(this.getTime()+addTime);
};

Date.prototype.hasPassed = function(passDate) {
	return (this.getTime() >= passDate.getTime());
};

//Converts TimeString to number
function getStringTime(timeString) {
	//0y4mon3d 6h 8min3s 800ms
	var reg = /([\d]+)([a-zA-Z]+)/g;
	var _m = timeString.match(reg);
	var newTime = NaN;
	var _tk = Object.keys(msTable);

	for(var m in _m) {
		var fm = _m[m];
		var nm = fm.replace(reg, '$1').cInt();
		var om = fm.replace(reg, '$2');
		if(nm != null) {
			if(isNaN(newTime)) { newTime = 0; }
			if(_tk.indexOf(om) != -1) {
				newTime += nm * (msTable[_tk[_tk.indexOf(om)]]);
			} else { newTime += nm; }
		}
	}

	return newTime;
}
//Converts number to TimeString
function getTimeString(stringTime, excludes) {
	if(typeof(excludes) == typeof(undefined) || excludes === null) { excludes = []; }
	var newTime = parseInt(stringTime);
	var newStr = '';
	for(var ms in msTable) {
		if(excludes.indexOf(ms) == -1) {
			var msnum = 0;
			while(newTime >= msTable[ms]) {
				msnum++;
				newTime -= msTable[ms];
			}
			if(msnum > 0) {
				newStr += msnum.toString()+ms;
			}
		}
	}


	return newStr;
}
function getFnArgs(fn) {
	var fnrgx = /function[\s]+([\w]+)\(([\w,\s]+)\)/;
	var fnstr = fn.toString();
	var fnargs = [];
	var m = fnstr.match(fnrgx);
	if(m != null) {
		
      	m[2].split(',').forEach(function(a){
        	fnargs.push(a.trim());
        });
      	
      	return fnargs;
	}
	
	return fnargs;
}
//Convert object to array
function objArray(obj) {
	var a = [];
	for(var i in obj) {
var o = obj[i];
		a.push(o);
	}
	return a;
}

function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}

//Get functions in the object
function getAllFuncs(obj) {
    var props = [];

    do {
        props = props.concat(Object.getOwnPropertyNames(obj));
    } while (obj = Object.getPrototypeOf(obj));

    return props.sort().filter(function(e, i, arr) {
       if (e!=arr[i+1] && typeof obj[e] == 'function') return true;
    });
}

//Merge 2 objects
function objMerge(obj1, obj2, inheritNewProps){
	if(typeof(inheritNewProps) == typeof(undefined) || inheritNewProps === null) { inheritNewProps = true; }
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) {
        if(inheritNewProps || Object.keys(obj1).indexOf(attrname) > -1) {
            obj3[attrname] = obj2[attrname];
        }
    }
    return obj3;
}
if(typeof(Object.values) !== "function")  {
    Object.values = function(obj){
        var v = [];
        for(var i in obj) {
var oi = obj[i];
            v.push(oi);
        }

        return v;
    }
}
if(typeof(Object.keys) !== "function")  {
    Object.keys = function(obj){
        var v = [];
        for(var i in obj) {
var oi = obj[i];
            v.push(i);
        }

        return v;
    }
}
String.prototype.allMatch = function(regx) {
	var m = this.match(regx);
	var rr = [];
	for(var mm in m) {
		var mt = m[mm];
		var rx = regx.exec(this);
		rr.push(rx);
	}

	return rr;
};


String.prototype.cmatch = function(regx) {
	return (this.match(regx) || []).length;
};

String.prototype.rangeUpper = function(min, max) {
	var str = '';
	for(var i = 0; i < this.length; i++) {
		var c = this.substring(i, i+1); //curchar
		if(i >= min && i < max) {
			c=c.toUpperCase();
		}
		str+=c.toString();
	}
	return str;
};
String.prototype.rangeLower = function(min, max) {
	var str = '';
	for(var i = 0; i < this.length; i++) {
		var c = this.substring(i, i+1); //curchar
		if(i >= min && i < max) {
			c=c.toLowerCase();
		}
		str+=c.toString();
	}
	return str;
};

String.prototype.pad = function(character, len) {
	var n = this.toString();
	for(var i = n.length; i < len; i++) {
		n += character.toString();
	}
	return n;
};

String.prototype.fill = function(payload) {
	var str = this.toString();
	for(var p in payload) {
var payl = payload[p];
		str = str.split("{"+p+"}").join(payl);
	}
	return str;
}

String.prototype.padMiddle = function(character, len) {

	var n = this.toString();
	var sc = Math.floor((len-n.length)/2);
	var ns = '';
	for(var i = 0; i < sc; i++) {
		ns += character.toString();
	}
	ns+=n;
	for(var i = 0; i < sc; i++) {
		ns += character.toString();
	}
	return ns;
};

String.prototype.cInt = function() {
	return (isNaN(parseInt(this)) ? null : parseInt(this));
};


String.prototype.append = function(ch, amount) {
	var new_str = this.toString();
  	for(var i = 0; i < amount; i++) {
    	if(i >= new_str.length) {
        	new_str += ch.toString();
        }
    }

  return new_str;
};

String.prototype.prepend = function(ch, amount) {
	var new_str = this.toString();
  	for(var i = 0; i < amount; i++) {
    	if(i >= new_str.length) {
        	new_str = ch.toString()+new_str;
        }
    }

  return new_str;
};

String.prototype.replaceAll = function(search, replacement) {
    var target = this.toString();
    if(typeof(search) == 'string') { search = [search]; }
		for(var s in search) {
var sr = search[s];
			target = target.split(sr).join(replacement);
		}
		return target;
};

function occurrences(string, subString, allowOverlapping, caseSensitive) {
	if(typeof(allowOverlapping) == typeof(undefined) || allowOverlapping === null) { allowOverlapping = false; }
	if(typeof(caseSensitive) == typeof(undefined) || caseSensitive === null) { caseSensitive = true; }
    string = string.toString()
    subString = subString.toString()

	if(!caseSensitive) {
		string = string.toLowerCase();
		subString = subString.toLowerCase();
	}

    if (subString.length <= 0) return (string.length + 1);

    var n = 0,
        pos = 0,
        step = allowOverlapping ? 1 : subString.length;

    while (true) {
        pos = string.indexOf(subString, pos);
        if (pos >= 0) {
            ++n;
            pos += step;
        } else break;
    }
    return n;
}

function stringIsNumeric(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}

function stringIsBool(n) {
	return (['true', 'false'].indexOf(n.toLowerCase()) > -1);
}

var API = Java.type('noppes.npcs.api.NpcAPI').Instance();
var INbt = Java.type('noppes.npcs.api.INbt');
var LogManager = Java.type('org.apache.logging.log4j.LogManager');
var Logger = LogManager.getLogger(typeof CONFIG_SERVER != typeof undefined ? CONFIG_SERVER.NAME : "");
var ForgeLoader = Java.type('net.minecraftforge.fml.common.Loader').instance();
var EntityType = Java.type('noppes.npcs.api.constants.EntityType');

var NbtTypes = {
    "Byte": 1,
    "Short": 2,
    "Integer": 3,
    "Long": 4,
    "Float": 5,
    "Double": 6,
    "ByteArray": 7,
    "String": 8,
    "List": 9,
    "Compound": 10,
    "IntegerArray": 11,
};

function getNbtType(num) {
    for(var n in NbtTypes) {
var nbtType = NbtTypes[n];
        if(nbtType === num) { return n; }
    }
    return null;
}

function getMCModList() {
    var modlist = [];
    var loadmods = Java.type("net.minecraftforge.fml.common.Loader").instance().getModList();

    for(var mid in loadmods) {
var lmod = loadmods[mid];
        modlist.push(lmod.getModId());
    }

    return modlist;
}

function hasMCMod(name) {
    return getMCModList().indexOf(name) > -1;
}



//Check config file
var CONFIG_FILEPATH = "CustomServerTools/settings.json";

function getServerProperties() {
    var proprgxs = /([\w\-.]+)\s*=([\w\W]*?)$/gm;
    var proprgx = /([\w\-.]+)\s*=([\w\W]*?)$/m;
    var propdata = {};

    (readFileAsString('server.properties').match(proprgxs)||[]).forEach(function(prop){
        var propmeta = prop.match(proprgx);
        var propname = propmeta[1];
        var propval = propmeta[2];
        if(stringIsNumeric(propval)) {
            propval = parseFloat(propval);
        } else if(stringIsBool(propval)) {
            propval = propval === 'true';
        }

        propdata[propname] = propval
    });

    return propdata;
}

function getDiskHandler(diskname) {
	if(typeof(diskname) == typeof(undefined) || diskname === null) { diskname = null; }
    diskname = diskname||CONFIG_SERVER.USE_DISK;
    if(diskname === "DEFAULT") {
        return API.getIWorld(0).storeddata;
    }
    if(Object.keys(CONFIG_SERVER.FILE_DISKS).indexOf(diskname) > -1) {
        var disk = new CSTData().useDisk(diskname);
        return disk;
    }
    return null;
}

function saveConfiguration() {
    var configFile = new File(CONFIG_FILEPATH);

    try {

        writeToFile(CONFIG_FILEPATH, JSON.stringify(CONFIG_SERVER, null, 4));


    } catch (exc) {
        handleError(exc);
    }

}

function reloadConfiguration() {
    var configFile = new File(CONFIG_FILEPATH);

    if(!configFile.exists()) {
    	mkPath(CONFIG_FILEPATH);
    	writeToFile(CONFIG_FILEPATH, JSON.stringify(CONFIG_SERVER, null, 4));


    }

    try {
        var loadConf = JSON.parse(readFileAsString(CONFIG_FILEPATH))
        CONFIG_SERVER = objMerge(CONFIG_SERVER, loadConf);

        if(Object.keys(CONFIG_SERVER).sort().join(",") !== Object.keys(loadConf).sort().join(",")) {
            writeToFile(CONFIG_FILEPATH, JSON.stringify(CONFIG_SERVER, null, 4));
        }

    } catch (exc) {
        handleError(exc);
    }

}

reloadConfiguration();







function executeCommand(player, command, as_player) {
	if(typeof(as_player) == typeof(undefined) || as_player === null) { as_player = null; }
	if(as_player == null) { as_player = player.getName(); }
	var cmd = API.createNPC(player.world.getMCWorld());

	return cmd.executeCommand("/execute "+as_player+" ~ ~ ~ "+command);

}

function executeCommandGlobal(command, dim) {
	if(typeof(dim) == typeof(undefined) || dim === null) { dim = 0; }
	return API.createNPC(API.getIWorld(dim).getMCWorld()).executeCommand(command);
}

//Send player formatted message
function tellPlayer(player, rawtext) {
	return executeCommand(player, "/tellraw "+player.getName()+" "+parseEmotes(strf(rawtext)));
}

function tellTarget(player, target, rawtext) {
	return executeCommand(player, "/tellraw "+target+" "+parseEmotes(strf(rawtext)));
}

function tellPlayerTitle(player, rawtext, type, target) {
	if(typeof(type) == typeof(undefined) || type === null) { type = "actionbar"; }
	return executeCommand(player, "/title "+(target||player.getName())+" "+type+" "+parseEmotes(strf(rawtext)))
}
//Send player multiple formatted messages from array
function storytellPlayer(player, ar) {
	for(var i in ar) {
var ari = ar[i];
		tellPlayer(player, ari);
	}
}

//Get server title bar for displaying
//TO-DO: Placeholders instead of multiple variables
function getTitleBar(title, showServerName) {
	if(typeof(showServerName) == typeof(undefined) || showServerName === null) { showServerName = true; }
	return CONFIG_SERVER.BAR_OPEN+(showServerName?CONFIG_SERVER.TITLE+" ":CONFIG_SERVER.PREFIX)+title+CONFIG_SERVER.BAR_CLOSE;
}

function getUndoBtn(undo_cmds, hoverText) {
	if(typeof(hoverText) == typeof(undefined) || hoverText === null) { hoverText = null; }
	return "&r["+_MSG['undoBtnText']+"{run_command:!chain ;"+undo_cmds.join(";")+(hoverText == null ? "" : "|show_text:"+hoverText.toString())+"}&r]";
}

var npcSettings = {
	"Stats": {
		"MaxHealth": 20,
		"HealthRegen": 0,
		"AggroRange": 24,
		"CreatureType": 1, //Undede
		"RespawnType": 0, //"Yes",
		"RespawnTime": 86400,
		"HideDeadBody": true,
	},
	"Ai": {
		"StopOnInteract": false,
		"ReturnsHome": false,
	},
	"Display": {
		"Size": 5,
	}
};

//


function updateNpc(npc) {
	var hasChanged = false;

	for(var getname in npcSettings) {
		var getter = npc['get'+getname](); //result of: npc.getDisplay(), npc.getAi(), ...
		for(var setting in npcSettings[getname]) { //Loop settings, variable 'setting' =key
			var value = npcSettings[getname][setting]; //value of setting

			if(getter['get'+setting]() != value) { //if current (ai,display,...) setting is not wanted value

                getter['set'+setting](value); //Update value of current (ai,display,...) setting
				hasChanged = true; //Mark updated
			}
		}
	}
	if(hasChanged) { //Npc only resets now when something has changed, no unneccesary updates
		//npc.reset();
	}
}


var _COMMANDS = [];
var _DATAHANDLERS = {};
//To-Do: Comment this file



registerDataHandler("player", Player);
function Player(name) {
	

	DataHandler.apply(this, ['player', name]);

	this.addData({
		"lastPayed": 0,
		"pay": 0,
		"payTime": getStringTime('20min'),
		"maxJobs": 2,
		"maxHomes": 2,
		"homes": {},
		"defaultHome": null,
		"jobs": {},
		"inventories": [],
		"emotes": [],
		"chatcolors": [],//Unlockables for color coding
		"chatcolor": null,//Default chatcolor (NOT FOR UNLOCKS)
		"badges": [],
		"showbadges": [],
		"chateffect": null,
		"firstLogin": new Date().getTime(),
		"lastLogin": 0,
		"color": null,
		"UUID": null,
		"money": 0,
	});
	

	for(var v in VIRTUAL_CURRENCIES) {
var crncy = VIRTUAL_CURRENCIES[v];
		this.data[crncy.name] = crncy.default||0;
	}


	this.sync = function(ipl) {
		this.data.UUID = ipl.getUUID();
		this.name = ipl.getName();
		return this;
	};
	this.getTeamName = function(sb) {
		var t = sb.getPlayerTeam(this.name);
		if(t != null) {
			return t.getDisplayName();
		} else if(this.data.title != null) {
			return this.data.title;
		}

		return "";
	};
	this.getPlayerColor = function(sb){
		var t = sb.getPlayerTeam(this.name);
		var ccol = 'white';
		if(this.data.color != null) {
			ccol = this.data.color

		} else if(t != null) {
			ccol =t.getColor();
		}
		return ccol;
	};
	this.getChatColorPref = function(sb, data) {
		var pref = '';
		var prefeff = '';
		var t = sb.getPlayerTeam(this.name);
		if(t != null) {
			var td = new Team(t.getName()).init(data);
			if(td.data.chatcolor != null) {
				pref = '&'+getColorId(td.data.chatcolor);
			}
			if(td.data.chateffect != null) {
				prefeff = '&'+getColorId(td.data.chateffect);
			}
		}

		if(this.data.chatcolor != null) {
			pref = '&'+getColorId(this.data.chatcolor);
		}


		if(this.data.chateffect != null) {
			prefeff = '&'+getColorId(this.data.chateffect);
		}
		return pref+prefeff;
	};

	this.getNameTag = function(sb, prefix, namesuff, teamsuff, ccChar, data) {
	if(typeof(data) == typeof(undefined) || data === null) { data = null; }
		var t = sb.getPlayerTeam(this.name);
		var dc = ccChar||'&';
		var ccol = '';
		var ctm = '';
		if(this.data.color != null) {
			var cId = getColorId(this.data.color);
			ccol = dc+cId;
		} else if(t != null) {
			ccol = dc+getColorId(t.getColor());
		}

		if(t != null) {
			ctm = ccol+dc+'o'+t.getDisplayName()+' ';
		}

		var badgestr = "";
		var badges = data != null ? this.getBadges(data) : [];
		var st;
		for(var i in badges) {
var badge = badges[i];
			if(i < 3) {
				st = (badge.data.displayName+"&r\n"+badge.data.desc).replaceAll("&", "$");
				badgestr += ":"+badge.data.emote+":{*|show_text:"+st+"}&r";
			}
		}

		return ccol+dc+'l['+ccol+ctm+(teamsuff||'')+dc+'r'+badgestr+ccol+this.name+(namesuff||'')+ccol+dc+'l'+']'+(prefix||'')+dc+'r';
	};
	this.getBadges = function(data) {
		var badges = new Badge().getAllDataEntries(data);
		var retbadges = [];
		for(var i in badges) {
var badge = badges[i];
			if(this.data.badges.indexOf(badge.name) > -1) {
				//has badge
				retbadges.push(badge);
			}
		}

		return retbadges;
	};
	this.delJob = function(name) {
		if(this.hasJob(name)) {
			delete this.data.jobs[name];
		}
		return this;
	};
	this.getJob = function(name) {
		if(this.hasJob(name)) {
			return this.data.jobs[name];
		}
		return null;
	};
	this.getJobs = function(data) {
		var jobs = [];
		for(var i in this.data.jobs) {
var job = this.data.jobs[i];
			var pjob = new Job(i);
			if(pjob.load(data)) {
				jobs.push(pjob);
			}
		}
		return jobs;
	};
	this.getJobCount = function() {
		return Object.keys(this.data.jobs).length;
	};
	this.addJob = function(name) {
		this.data.jobs[name] = {
			"lastPayed": 0
		};
		return this;
	};
	this.hasJob = function(name) {
		return Object.keys(this.data.jobs).indexOf(name) > -1;
	};
	this.hasMaxJobs = function() {
		return (this.data.maxJobs != -1 && this.getJobCount() >= this.getMaxJobs());
	};
	this.getMaxJobs = function(sb) {
		//check this.getMaxHomes()
		return this.data.maxJobs;
	};
	this.addHome = function(name, x, y, z) {
		this.data.homes[name] = {
			x: x,
			y: y,
			z: z,
		};
		return this;
	};
	this.delHome = function(name) {
		if(this.data.homes.hasOwnProperty(name)) {
			delete this.data.homes[name];
		}
		return this;
	};
	this.hasHome = function(name) {
		return (this.data.homes.hasOwnProperty(name));
	};
	this.getMaxHomes = function(sb) {
		//WILL be edited later for handling the desision maxHome setting in teams
		return this.data.maxHomes;
	};

	this.getChats = function(data) {
		var chats = [];
		var dkeys = data.getKeys();
		for(var d in dkeys) {
var dkey = dkeys[d];
			if(dkey.cmatch(/chatchannel_([\w]+)/g) > 0) {
				var cc = new ChatChannel(dkey.replace(/chatchannel_([\w]+)/g, "$1"));
				if(cc.load(data)) {
					if(cc.data.players.indexOf(this.name) > -1) {
						chats.push(cc);
					}
				}
			}
		}

		return chats;
	}
	this.getAllowedColors = function(data, sb) {
		var ac = [];
		//Check individual colors
		for(var i in _RAWCOLORS) {
var rc = _RAWCOLORS[i];
			var cp = new Permission(getColorPermId(getColorId(rc))).init(data);
			if(cp.permits(this.name, sb, data, true, false)) {
				ac.push(getColorId(rc));
			}
		}
		for(var i in _RAWEFFECTS) {
var rc = _RAWEFFECTS[i];
			var cp = new Permission(getColorPermId(getColorId(rc))).init(data);
			if(cp.permits(this.name, sb, data, true, false)) {
				ac.push(getColorId(rc));
			}
		}

		return ac;
	};
	this.canCreateCommandText = function(data, sb) {
		return new Permission('chat.command').init(data).permits(this.name, sb, data);
	};
	this.getBounty = function(sb){
		var sbo = sb.getObjective("bounty");
		if(sbo != null) {
			var sbs = sbo.getScore(this.name);
			if(sbs != null) {
				return sbs.getValue();
			}
		}
		return 0;
	};


	this.getInventory = function(name){
		for(var invName in this.data.inventories) {
var inv = this.data.inventories[invName];
			if(inv[0] == name) return inv[1];
		}
		return;
	};
	this.removeInventory = function(name){
		for(var invName in this.data.inventories){
			this.data.inventories.splice(invName, 1);
			return true;
		}
		return false;
	};
	this.hasEmote = function(name, sb, data) { //Checks if player has emote
		var em = new Emote(name).init(data,false);
		return (this.data.emotes.indexOf(name) > -1
		|| em.getPermission().init(data, false).permits(this.name, sb, data)
		|| em.data.default
		);
	};

	this.getAllowedEmotes = function(sb, data) {
		var ems = [];
		for(var c in CHAT_EMOTES) {
var ce = CHAT_EMOTES[c];
			var ec = new Emote(c);
			ec.load(data);
			if(this.hasEmote(ec.name, sb, data)) {
				ems.push(ec.name);
			}
		}
		return ems;
	};
}


registerDataHandler("permission", Permission);
function Permission(name) {
	DataHandler.apply(this, ['permission', name]);

	this.addData({
		"enabled": true,
		"teams": CONFIG_SERVER.DEFAULT_PERM_TEAMS,
		"players": [],
		"jobs": [],
		"meta": {}
	});

	this.set = function(key,val) {
		this.data[key] = val;
		return this;
	};

	this.addTeams = function(teams) {
		if(typeof(teams) == 'string') { teams = [teams]; }
		for(var t in teams) {
var team = teams[t];
			var teamname = team;
			if(this.data.teams.indexOf(teamname) == -1) {
				this.data.teams.push(teamname);
			}
		}

		return this;
	};
	this.removeTeams = function(teams) {
		if(typeof(teams) == 'string') {
			teams = [teams];
		}

		var nteams = [];
		for(var t in this.data.teams) {
var team = this.data.teams[t];
			if(teams.indexOf(team) == -1) {
				nteams.push(team);
			}
		}
		this.data.teams = nteams;
		return this;
	};
	this.addPlayers = function(players) {
		if(typeof(players) == 'string') { players = [players]; }
		for(var p in players) {
var player = players[p];
			if(this.data.players.indexOf(player) == -1) {
				this.data.players.push(player);
			}
		}

		return this;
	};
	this.removePlayers = function(players) {
		if(typeof(players) == 'string') { players = [players]; }
		var nplayers = [];
		for(var p in this.data.players) {
var player = this.data.players[p];
			if(players.indexOf(player) == -1) {
				nplayers.push(player);
			}
		}
		this.data.players = nplayers;
		return this;
	};
	this.permits = function(player, sb, data, listenToDisabled) {
	if(typeof(listenToDisabled) == typeof(undefined) || listenToDisabled === null) { listenToDisabled = true; }
		///String player
		///IScoreboard sb
		///IData data
		var team = sb.getPlayerTeam(player);
		var permitted = false;
		var p = new Player(player);
		p.load(data);

		if(this.name != "__ALL__") {
			if(new Permission("__ALL__").init(data, true).permits(player, sb, data, false)) {
				return true;
			}
		}

		//Check enabled
		if(!this.data.enabled && listenToDisabled) { return true; }

		//Check team
		if(team != null) {
			if(this.data.teams.indexOf(team.getName()) != -1) {
				permitted = true;
			}
		}
		//Check player
		if(this.data.players.indexOf(player) != -1) {
			permitted = true;
		}

		//Check jobs
		/*
		var pjobs = p.getJobs(data);
		for(var p in pjobs) {
var pjob = pjobs[p];
			if(this.data.jobs.indexOf(pjob.name) != -1) {
				permitted = true;
			}
		}*/

		//Check parents
		var ppar = getParentPerms(this.name||"", data);
		for(var p in ppar) {
var par = ppar[p];
			if(par.permits(player, sb, data, false)) {
				permitted = true;
				break;
			}
		}



		return permitted;
	};
}

function getParentPerms(name, data) {
	var ps = (name+"").split(".");
		var par = [];
		var cs = "";
		for(var i = 0; i < ps.length; i++) {
		if(i < ps.length-1) {
			cs += (cs != "" ? ".":"")+ps[i];
			if(new Permission(cs).exists(data)) {
				par.push(new Permission(cs).init(data));
			}
		}
	}
	return par;

}




//
function worldOut(str) {
    API.getIWorld(0).broadcast(strf(str));
}


//Parses JSON with comments and trailing comma's to json objects
function cson_parse(cson_string) {
    var rgx_comments = /\/(?:\*{2,}\s[\s\S]+?|\*[^\*]+?)\*\/|([\s;])+\/\/.*$/gm;
    var rgx_commas = /,+\s*(\}|\])/g;
    //print("CSON::: "+cson_string.replace(rgx_comments, '').replace(rgx_commas, '$1').replace(/[\n\t]/g, ""));
    return JSON.parse((cson_string.replace(rgx_comments, '').replace(rgx_commas, '$1')));
}







//

//Initialize PLugin Folder
var PLUGIN_FOLDER = CONFIG_SERVER.PLUGIN_FOLDER||"CustomServerTools/plugins";
var PLUGIN_LIST = [];

var PluginAPI = {
    Plugins: {
        get: function(name){
            for(var i in PLUGIN_LIST) {
var _plugin = PLUGIN_LIST[i];

                if(_plugin.id.toString() === name.toString()) {
                    return _plugin;
                }
            }
            return null;
        },
        list: function(){
            var ids = [];
            for(var i in PLUGIN_LIST) {
var plugin = PLUGIN_LIST[i];
                ids.push(plugin);
            }
            return ids;
        },
        export: function(key, value){
            PluginAPI._exports[key] = value;
        },
        import: function(key){
            return PluginAPI._exports[key];
        },
        _exports: {},
    },
    DataHandlers: {
        implement: function(datahandlername, implementationFunc) {
            if(!(datahandlername in PluginAPI.DataHandlers.implementFuncs)) {
                PluginAPI.DataHandlers.implementFuncs[datahandlername] = [];
            }
            PluginAPI.DataHandlers.implementFuncs[datahandlername].push(implementationFunc);
        },
        implementFuncs: {},
        run: function(dhname, t) {
            if(dhname in PluginAPI.DataHandlers.implementFuncs) {
                var imf = PluginAPI.DataHandlers.implementFuncs[dhname];
                for(var i in imf) {
var im = imf[i];
                    im.apply(t, []);
                }
            }
        }
    },
    Players: {
        on: function(hook, func){
            if(!(hook in PluginAPI.Players.hookFns)) {
                PluginAPI.Players.hookFns[hook] = [];
            }

            PluginAPI.Players.hookFns[hook].push(func)
        },
        run: function(hook, args){
            if(Object.keys(PluginAPI.Players.hookFns).indexOf(hook) > -1) {
                for(var i in PluginAPI.Players.hookFns[hook]) {
var hookFn = PluginAPI.Players.hookFns[hook][i];
                    hookFn.apply(null, args);
                }
            }
        },
        hookFns: {},
    },
};




registerXCommands([
    ['!plugins', function(pl, args, data){
        var output = getTitleBar("Plugin List")+"\n&dHover plugin name for more info\n&a";
        for(var p in PLUGIN_LIST) {
var plugin = PLUGIN_LIST[p];
            var pluginInfo = "$6$lName: $r$e{PluginName}\n$r$6$lID: $r$e{PluginId}\n$r$6$lAuthor: $r$e{PluginAuthor}\n$r$6$lVersion: $r$e{PluginVersion}\n\n$r$e{PluginDesc}$r".fill({
                "PluginId": plugin.id,
                "PluginName": plugin.name,
                "PluginVersion": plugin.version,
                "PluginDesc": plugin.description||"",
                "PluginAuthor": plugin.author||"No author defined",
            });
            output += plugin.name+"{*|show_text:"+pluginInfo+"}&a";
            if(p < PLUGIN_LIST.length-1) {
                output += ", ";
            }
        }
        tellPlayer(pl, output);
        return true;
    }, 'plugins.list'],
    ['!plugin reload', function(pl, args, data){
        if(reloadPluginsFromDisk()) {
            tellPlayer(pl, "&r[&eCSTPluginLoader{*|show_text:$eCustomServerTools PluginLoader}&r] &aLoaded &c{PluginCount} &aplugins! &2[Plugin List]{run_command:!plugins|show_text:$aClick to see plugins or do $o$a!plugins}&r".fill({
                "PluginCount": PLUGIN_LIST.length
            }));
        }
    }, 'plugins.reload'],
]);



//1 if v1 > v2
//0 if same
//-1 if v1 < v2
function compareVersion(v1, v2, options) {
    var lexicographical = options && options.lexicographical,
        zeroExtend = options && options.zeroExtend,
        v1parts = v1.split('.'),
        v2parts = v2.split('.');

    function isValidPart(x) {
        return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x);
    }

    if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
        return NaN;
    }

    if (zeroExtend) {
        while (v1parts.length < v2parts.length) v1parts.push("0");
        while (v2parts.length < v1parts.length) v2parts.push("0");
    }

    if (!lexicographical) {
        v1parts = v1parts.map(Number);
        v2parts = v2parts.map(Number);
    }

    for (var i = 0; i < v1parts.length; ++i) {
        if (v2parts.length == i) {
            return 1;
        }

        if (v1parts[i] == v2parts[i]) {
            continue;
        }
        else if (v1parts[i] > v2parts[i]) {
            return 1;
        }
        else {
            return -1;
        }
    }

    if (v1parts.length != v2parts.length) {
        return -1;
    }

    return 0;
}


















































function reloadPluginsFromDisk() {
    PLUGIN_LIST = [];
    PluginAPI.Players.hookFns = {};

    if(!(new File(PLUGIN_FOLDER).exists())) {
        mkPath(PLUGIN_FOLDER);
    }




    //Load plugins
    var pluginDirs = new File(PLUGIN_FOLDER).listFiles();
    var pluginsToRun = [];
    //Loop plugin directories
    for(var p in pluginDirs) {
var pluginDir = pluginDirs[p];
        if(pluginDir.isDirectory()) {
            var pluginFiles = pluginDir.listFiles();
            var loadPlugin = null;
            for(var pf in pluginFiles) {
var pluginFile = pluginFiles[pf];
                //get config file
                if(pluginFile.getName() == "plugin.json") {
                    try {
                        loadPlugin = cson_parse(readFileAsString(pluginFile.getPath()));
                        loadPlugin['DIR'] = pluginDir.getPath();
                        //Load JS files
                        for(var lf in loadPlugin.files) {
var lfilename = loadPlugin.files[lf];
                            var lfilepath = pluginDir.getPath()+"/"+lfilename;
                            var lfile = new File(lfilepath);
                            if(lfile.exists()) {
                                //loadPlugin.fileFuncs[lfilepath] = (loadPlugin.fileFuncs[lfilepath]||[]).push(readFileAsString(lfilepath));



                                var fileScript = readFileAsString(lfilepath)
                                var fileFunc = new Function("SETTINGS", "PLUGIN", fileScript);
                                pluginsToRun.push({
                                    "func": fileFunc,
                                    "plugin": loadPlugin
                                })

                            }
                        }

                    } catch (exc) {
                        handleError(exc);
                    }



                    break;
                }
            }
            if(loadPlugin != null) {
                PLUGIN_LIST.push(loadPlugin);
            } else {
                var errtxt = "&cError loading plugin! &n&c[info]{*|show_text:$c{PluginDir} has no plugin.json!}".fill({
                    "PluginDir": pluginDir.getPath()
                });
                executeCommandGlobal("/tellraw @a "+strf(errtxt));
                return false;
            }
        }
    }

    for(var i in pluginsToRun) {
var runPlugin = pluginsToRun[i];
        //Check requirements
        var canRun = true;
        var req = (runPlugin.plugin.required||{});
        var errtxt = "";
        if(Object.keys(req).length > 0) {
            for(var reqid in req) {
var minver = req[reqid];
                var checkPlugin = PluginAPI.Plugins.get(reqid);
                if(checkPlugin != null) {

                    if(compareVersion(checkPlugin.version, minver) == -1) {
                        errtxt += "&cError loading plugin '"+runPlugin.plugin.id+"' &4[Info]{*|show_text:{INFO}}&r\n".fill({
                            "INFO": ("&cToo low version of plugin '"+reqid+"' installed! Current: &l"+checkPlugin.version+"&r&c Required: &l"+minver).replaceAll("&", "§")
                        });
                        canRun = false;
                    }
                } else {
                    errtxt += "&cError loading plugin '"+runPlugin.plugin.id+"' &4[Info]{*|show_text:{INFO}}&r\n".fill({
                        "INFO": ("&cThis plugin requires &o"+reqid+"&r&c to be installed!").replaceAll("&", "§")
                    });
                    canRun = false;
                }
            }


        }

        if(canRun) {
            try {
                //execute plugins
                runPlugin.func(runPlugin.plugin.settings||{}, runPlugin.plugin);
            } catch(exc) {
                handleError(exc);
            }
        } else {
            executeCommandGlobal("/tellraw @a "+strf(errtxt));
        }
    }

    return true;
}

//Superfunction (extendable)
//Used to save function data object.
function DataHandler(type, name) {
	this.type = type;
	this.name = name;
	this.data = this.data || {};
	this.removeFns = this.removeFns || [];
	this.loadFns = this.loadFns || [];
	this.saveFns = this.saveFns || [];
	this.createFns = this.createFns || [];

	this.dkeyrgx = new RegExp(this.type+'_([\\w.\-]+)', 'g');

	//Gets all data IDS
	this.getAllDataIds = function(data) {
		var dkeys = data.getKeys();
		var ids = [];
		for(var d in dkeys) {
var dkey = dkeys[d];
			if(dkey.cmatch(this.dkeyrgx) > 0) {
				ids.push(dkey.replace(this.dkeyrgx, '$1'));
			}
		}

		return ids;
	};

	this.addData = function(dataObj){
		this.data = objMerge(this.data, dataObj);
	};

	this.getAllDataEntries = function(data) {
		var ids = this.getAllDataIds(data);
		var de = [];

		for(var i in ids) {
var id = ids[i];
			var dht = getDataHandler(this.type);
			de.push(new dht(id).init(data));
		}

		return de;
	};

	this.getDataId = function() {
		return this.type+'_'+this.name;
	}
	this.exists = function(data) {
		return data.get(this.getDataId()) != null;
	};
	this.save = function(data) {
		if(!this.exists(data)) {//Run onCreate
			for(var i in this.createFns) {
var createFn = this.createFns[i];
				if(typeof(createFn) == 'function') {
					createFn(this, data);
				}
			}
		}
		//Run onSave
		for(var i in this.saveFns) {
var saveFn = this.saveFns[i];
			if(typeof(saveFn) == 'function') {
				saveFn(this, data);
			}
		}
		data.put(this.getDataId(), this.toJson());
		return this;
	};
	this.load = function(data) {
		if(this.exists(data)) {
			for(var i in this.loadFns) {
var loadFn = this.loadFns[i];
				if(typeof(loadFn) == 'function') { loadFn(this, data); }
			}
			var ndata = data.get(this.getDataId());
			this.data = objMerge(this.data, JSON.parse(ndata), false);
			return true;
		}
		return false;
	};
	this.remove = function(data) {
		for(var rf in this.removeFns) {
var removeFn = this.removeFns[rf];
			if(typeof(removeFn) == 'function') {
				removeFn(this, data);
			}
		}
		data.remove(this.getDataId());
		return this;
	};
	this.onRemove = function(fn, args) { //When removed
		this.removeFns.push(fn, args||{});
		return this;
	};
	this.onLoad = function(fn, args) { //When gets loaded
		this.loadFns.push(fn, args||{});
		return this;
	};
	this.onSave = function(fn, args) { //Everytime when gets saved
		this.saveFns.push(fn, args||{});
		return this;
	};
	this.onCreate = function(fn, args) { //When gets saved but did not exists before (newly created)
		this.createFns.push(fn, args||{});
		return this;
	};
	this.init = function(data, createIfNotExists) {
		if(typeof(createIfNotExists) == typeof(undefined)) { createIfNotExists = true; }
		if(!this.exists(data) && createIfNotExists) {
			this.save(data);
		}
		this.load(data);

		return this;
	};
	this.toJson = function() {
		return JSON.stringify(this.data);
	};

	PluginAPI.DataHandlers.run(this.type, this);
}


/**
 * 
 * @param {Array} items Items to show
 * @param {Array} matches (Default: [])Matches to filter on
 * @param {Number} showLen (Default: 10)Items to show per page
 * @param {Number} curPage (Default: 1)Current page to output
 * @param {String} navCmd Base command to generate new navigation commands on
 * @param {Function} listingFn (item, index) Function that returns string as one item in list (line break needed)
 * @param {Function} sortFn Function to sort items
 * @param {Function} compareFn (item,matches)Custom Function to check if item is allowed in list
 * @param {Enum("ASC", "DESC")} sortDesc (Default: ASC)Desc will reverse the items after sorting
 */
function genDataPageList(items, matches, showLen, curPage, navCmd, listingFn, sortFn, compareFn, sortDesc) {
	if(typeof(matches) == typeof(undefined) || matches === null) { matches = []; }
	if(typeof(showLen) == typeof(undefined) || showLen === null) { showLen = 10; }
	if(typeof(curPage) == typeof(undefined) || curPage === null) { curPage = 1; }
	if(typeof(navCmd) == typeof(undefined) || navCmd === null) { navCmd = null; }
	if(typeof(listingFn) == typeof(undefined) || listingFn === null) { listingFn = null; }
	if(typeof(sortFn) == typeof(undefined) || sortFn === null) { sortFn = null; }
	if(typeof(compareFn) == typeof(undefined) || compareFn === null) { compareFn = null; }
	if(typeof(sortDesc) == typeof(undefined) || sortDesc === null) { sortDesc = false; }


    var output = "";
    //Sanitize
    for(var i in matches) {
var match = matches[i];
        matches[i] = match.replace(/[^*\w]/g, "");
    }

    //Limit showLen
    showLen = Math.max(Math.min(showLen, 32), 4);

    //get excludes from matches
    var excludes = [];
    var excludeRgx = /\*([\w]+)/;
    var newMatches = [];
    for(var a in matches) {
var match = matches[a];
        (match.cmatch(excludeRgx) > 0 ? excludes : newMatches).push(match.replace(excludeRgx, "$1"));
    }
    matches = newMatches;

    var minShow = (curPage-1)*showLen;
    var maxShow = minShow+showLen;

    var curShow = 0;

    var tellItems = [];
    //Sort items
    items.sort(typeof sortFn === "function" ? sortFn : function(a,b){
        var al = a.toLowerCase();
        var bl = b.toLowerCase();

        if(al < bl) return -1;
        if(al > bl) return 1;

        return 0;
    });


    if(sortDesc) {
        items.reverse();
    }
    //Filter items
    for(var i in items) {
var item = items[i];
        var isExcluded = (compareFn == null ? arrayOccurs(item, excludes, false, false) > 0 : compareFn(item, excludes));
        if(matches.length == 0 || (compareFn == null ? arrayOccurs(item, matches, false, false) > 0 : compareFn(item, matches))) {
            if(!isExcluded) {
                if(curShow >= minShow && curShow < maxShow && tellItems.indexOf(item) == -1){
                    tellItems.push(item)
                }
                curShow++;
            }
        }
    }

    function genNavCmd(_page, _showLen, _sort) {
	if(typeof(_page) == typeof(undefined) || _page === null) { _page = curPage; }
	if(typeof(_showLen) == typeof(undefined) || _showLen === null) { _showLen = showLen; }
	if(typeof(_sort) == typeof(undefined) || _sort === null) { _sort = sortDesc; }
        return navCmd.fill({
            "MATCHES": matches.join(" ")+" "+arrayFormat(excludes, "*{VALUE}"),
            "PAGE": _page,
            "SHOWLEN": _showLen, //Backwards compatability for some plugins
            "SHOW": _showLen, //New change
            "SORT": (_sort ? "desc" : "asc")
        });
    }

    var gCmd = genNavCmd();
    output += "&3[Copy Command]{suggest_command:"+gCmd+"|show_text:$3Click to get the command that shows exactly this page.}&r"+
        " &5[? Help]{*|show_text:$dAdd words divided by a space to search for them.\nTo Exclude something, put '*' in front.\nYou can also combine it to get more specific results.}&r\n";

    if(matches.length > 0) {
        output += "&6&lSearching for: &e"+matches.join(", ")+"\n";
    }
    if(excludes.length > 0) {
        output += "&6&lExcluding: &e"+excludes.join(", ")+"\n";
    }
    output += "&6&lSorting: &e"+(sortDesc?"De":"A")+"scending&r &b[Toggle]{run_command:"+genNavCmd(curPage, showLen, !sortDesc)+"|show_text:$3Click to toggle sorting type (asc/desc).}\n";
    output += "&6&lResults Found: &a"+curShow+" &eof &a"+items.length+"\n";

    var maxPages = Math.ceil(curShow/showLen);

    var showLenOptions = [
        5,
        10,
        15,
        20
    ];
    var sloTxt = "";
    for(var s in showLenOptions) {
var slo = showLenOptions[s];
        var showLenCmd = genNavCmd(Math.round(curPage * (showLen/slo)), slo)

        sloTxt += "&b[Show "+slo+"]{run_command:"+showLenCmd+"|show_text:$3Click to show "+slo.toString()+" results per page.}&r ";
    }

    output += sloTxt+"\n";

    var navBtns = "";
    if(navCmd != null) {
        var matchCmd = matches.join(" ")+" "+arrayFormat(excludes, "*{VALUE}");
        var prevCmd = genNavCmd(curPage-1);
        var nextCmd = genNavCmd(curPage+1);
        var prevBtn = curPage > 1 ? " &9[<< Previous]{run_command:"+prevCmd+"|show_text:$9Click to go to previous page.}&r" : "";
        var nextBtn = curPage < maxPages ? " &a[Next >>]{run_command:"+nextCmd+"|show_text:$aClick to go to next page.}&r" : "";
        navBtns = prevBtn+nextBtn;
    }

    if(tellItems.length > 0) {
        output += "&6&lPage: &5&l"+curPage+"/"+maxPages+"&r"+navBtns+"\n";

        for(var i in tellItems) {
var tellItem = tellItems[i];
            output += (listingFn == null ? " - &b&l"+tellItem+"&r\n" : listingFn(tellItem, i));
        }
    } else {
        output += "&cNothing found with given criteria.";
    }

    return output;
}




function queryDataHandlers(qry) {

}

function registerDataHandler(alias, dataHandlerFn) {
	_DATAHANDLERS[alias] = dataHandlerFn;
}

function getDataHandler(alias) {
	return _DATAHANDLERS[alias];
}

function registerXCommand(commandMatch, callback, perm, rules, payload) {
	if(typeof(rules) == typeof(undefined) || rules === null) { rules = []; }
	if(typeof(payload) == typeof(undefined) || payload === null) { payload = {}; }
	_COMMANDS.push({
		usage: commandMatch,
		callback: callback,
		perm: perm,
		rules: rules,
		enabled: true,
		payload: payload,
	});
}

function getCommandNoArg(cmdstr) {
	return cmdstr.match(/![\w\s]+/)[0];
}

function matchXCommands(cmdstrs) {
	if(typeof(cmdstrs) == typeof(undefined) || cmdstrs === null) { cmdstrs = []; }
	if(typeof(cmdstrs) == 'string') { cmdstrs = [cmdstrs]; }
	var cmds = [];

	for(var c in _COMMANDS) {
var command = _COMMANDS[c];
		for(var ci in cmdstrs) {
var cmdstr = cmdstrs[ci];
			var cname = getCommandNoArg(command.usage).trim();
			if(cmdstr.substr(0, 1) == "^") {
				if((cmdstrs.length == 0 || occurrences(cname, cmdstr.substr(1, cmdstr.length)) == 0) && cmds.indexOf(command) == -1) {
					cmds.push(command);
					break;
				}
			} else {
				if((cmdstrs.length == 0 || occurrences(cname, cmdstr) > 0) && cmds.indexOf(command) == -1) {
					cmds.push(command);
					break;
				}
			}
		}
	}

	return cmds;
}

function getCommandName(cmdstr) {
	var cmda = getCommandNoArg(cmdstr).trim();//Remove whitespace around
	return cmda.substr(1, cmda.length);//Remove '!'-character
}
function getCommandPerm(cmdstr) {
	return getCommandName(cmdstr).replace(/\s+/g, '.');
}

function registerXCommands(cmds) {
	for(var c in cmds) {
		registerXCommand(cmds[c][0], cmds[c][1], cmds[c][2], cmds[c][3] || [], cmds[c][4] || {});
	}
}

function CommandFactory(datahandler, cmdtree){
	this.type = datahandler;
	this.cmdtree = cmdtree||datahandler;
	this.cmds = [];
	this.info = [];
	this.listingTransformer = null;
	this.listingTransformerFn = null;
	this.listingRequirement = null;
	this.onFns = {
		"create": [],
		"remove": [],
		"info": [],
		"list": [],
		"copy": [],
	};

	//Event functions
	this.on = function(action, callback) {
		this.onFns[action].push(callback);
		return this;
	};

	//Command Building functions
	this.addInfoText = function(infoFn) {
		this.info.push(infoFn);
		return this;
	};
	this.add = function(subCommand, fn, rules, payload, dhNameArg, dhMustExists) {
	if(typeof(rules) == typeof(undefined) || rules === null) { rules = []; }
	if(typeof(payload) == typeof(undefined) || payload === null) { payload = {}; }
	if(typeof(dhNameArg) == typeof(undefined) || dhNameArg === null) { dhNameArg = "name"; }
	if(typeof(dhMustExists) == typeof(undefined) || dhMustExists === null) { dhMustExists = true; }
		payload = objMerge({
			"datatype": this.type,
			"cmdtree": this.cmdtree,
			"argname": dhNameArg,
			"fn": fn,
		}, payload);
		var cmdstr = "!"+this.cmdtree+" "+subCommand;
		this.cmds.push([
			cmdstr,
			function(pl, args, data, cdata){
				var dht = getDataHandler(cdata.datatype);
				var dh = new dht(args[cdata.argname]).init(data,false);
				return cdata.fn(dh, pl, args, data, cdata);
			},
			getCommandPerm(cmdstr),
			rules.concat([
				{
					"argname": dhNameArg,
					"type": "datahandler",
					"datatype": this.type,
					"exists": dhMustExists
				}
			]),
			payload
		]);
		return this;
	};
	this.addSettable = function(property, argTransformFn, rules, outputTransform, argNode, argName) {
	if(typeof(argTransformFn) == typeof(undefined) || argTransformFn === null) { argTransformFn = null; }
	if(typeof(rules) == typeof(undefined) || rules === null) { rules = []; }
	if(typeof(outputTransform) == typeof(undefined) || outputTransform === null) { outputTransform = null; }
		var propname = property.rangeUpper(0, 1);
		var out = objMerge({
			"val": "\"{"+property+"}\"",
		}, (outputTransform || {}));
		argName = argName||property;
		argNode = (argNode||"<{NAME}>").fill({
			"NAME": argName,
		});
		this.cmds.push([
			'!'+this.cmdtree+' set'+propname+' <name> '+argNode,
			function(pl, args, data, cdata){
				var dht = getDataHandler(cdata.datatype);
				var dh = new dht(args.name);
				var val = args[cdata.argname];
				dh.load(data);
				dh.data[cdata.property] = (argTransformFn == null ? val : argTransformFn(val, dh, pl, args, data, cdata));
				dh.save(data);
				var tellData = {};
				tellData[cdata.property] = val;
				tellPlayer(pl, "&aSet property &2\""+property+"\"&a of "+dh.type+" &2\""+dh.name+"\"&a to "+cdata.out.val.fill(tellData)+"&r&a!");
				return true;
			},
			this.cmdtree.replaceAll(" ", ".")+'.set'+propname,
			rules.concat([
				{
					"argname": "name",
					"type": "datahandler",
					"datatype": this.type,
					"exists": true,
				}
			]),
			{
				"datatype": this.type,
				"cmdtree": this.cmdtree,
				"property": property,
				"propname": propname,
				"argname": argName,
				"argnode": argNode,
				"out": out,
			},
		]);

		return this;
	};
	this.setListTransformer = function(transformFn) {
		this.listingTransformerFn = transformFn;

		return this;
	};
	//Generate Functions
	this.genDefault = function(excludes){
	if(typeof(excludes) == typeof(undefined) || excludes === null) { excludes = []; }
		if(excludes.indexOf("create") == -1)
		this.cmds.push(
			['!'+this.cmdtree+' create <name>', function(pl, args, data, cdata){
				var dht = getDataHandler(cdata.datatype);
				var dh = new dht(args.name);
				var payload = {
					"cancel": false,
				};
				for(var o in cdata.self.onFns['create']) {
var onFn = cdata.self.onFns['create'][o];
					onFn(dh, pl, args, data, cdata, payload);
				}

				if(!payload.cancel) {
					dh.save(data);
					tellPlayer(pl, "&aCreated "+dh.type+" &2'"+dh.name+"'&a!");
					return true;
				}
				return false;
			}, this.cmdtree.replaceAll(" ", ".")+'.create', [
				{
					"argname": "name",
					"type": "string",
					"noColor": true,
				},
				{
					"argname": "name",
					"type": "datahandler",
					"datatype": this.type,
					"exists": false,
				},
			], {
				"datatype": this.type,
				"self": this,
			}
		]);
		if(excludes.indexOf("remove") == -1)
		this.cmds.push(
			['!'+this.cmdtree+' remove <name>', function(pl, args, data, cdata){
				var dht = getDataHandler(cdata.datatype);
				var dh = new dht(args.name);
				for(var o in cdata.self.onFns['remove']) {
var onFn = cdata.self.onFns['remove'][o];
					onFn(dh, pl, args, data, cdata, payload);
				}
				dh.remove(data);
				tellPlayer(pl, "&aRemoved "+dh.type+" '"+dh.name+"'!");
				return true;
			}, this.cmdtree.replaceAll(" ", ".")+'.remove', [
				{
					"argname": "name",
					"type": "datahandler",
					"datatype": this.type,
					"exists": true,
				}
			], {
				"datatype": this.type,
				"self": this,
			}
		]);
		if(excludes.indexOf("info") == -1)
		this.cmds.push(
			['!'+this.cmdtree+' info <name>', function(pl, args, data, cdata){
				var dht = getDataHandler(cdata.datatype);
				var dh = new dht(args.name);
				dh.load(data);
				var typename = dh.type.rangeUpper(0, 1);
				tellPlayer(pl, getTitleBar(typename+" Info", false));
				tellPlayer(pl, "[&2:recycle: Refresh{run_command:!"+cdata.cmdtree+" info "+dh.name+"|show_text:$aClick to reload "+cdata.datatype+" info.}&r]\n"+
					"&6&l"+typename+" Name: &b"+dh.name+"&r [&4:cross: Remove{run_command:!"+cdata.cmdtree+" remove "+dh.name+"|show_text:$cClick to remove "+dh.type+"}&r]");
				if("getPermission" in dh) {
					var dhp = dh.getPermission().init(data, false);
					tellPlayer(pl, "&6&lPermission: &9"+dhp.name+"&r [&e:sun: Info{run_command:!perms info "+dhp.name+"}&r]")
				}
				var tellInfo = "";
				for(var i in cdata.info) {
var infoFn = cdata.info[i];
					tellInfo += infoFn(dh, pl, args, data, cdata);
				}
				if(tellInfo != "") {
					tellPlayer(pl, tellInfo);
				}

				for(var o in cdata.self.onFns['info']) {
var onFn = cdata.self.onFns['info'][o];
					onFn(dh, pl, args, data, cdata);
				}

				return true;
			}, this.cmdtree.replaceAll(" ", ".")+'.info', [
				{
					"argname": "name",
					"type": "datahandler",
					"datatype": this.type,
					"exists": true,
				}
			], {
				"self": this,
				"datatype": this.type,
				"cmdtree": this.cmdtree,
				"info": this.info,
				"exc": excludes
			}
		]);
		if(excludes.indexOf("list") == -1)
		this.cmds.push(
			['!'+this.cmdtree+' list [...matches]', function(pl, args, data, cdata){
				var w = pl.world;
				var sb = w.getScoreboard();
				var dht = getDataHandler(cdata.datatype);
				var params = getArgParams(args.matches);

				var de = new dht().getAllDataEntries(data);
				for(var o in cdata.self.onFns['list']) {
var onFn = cdata.self.onFns['list'][o];
					onFn(dh, pl, args, data, cdata);
				}
				var txt = getTitleBar(cdata.datatype.rangeUpper(0, 1)+" List")+"\n";
				txt += genDataPageList(
					de,
					args.matches,
					parseInt(params.show||10),
					parseInt(params.page||1),
					"!"+cdata.cmdtree+" list {MATCHES} -page:{PAGE} -show:{SHOWLEN} -sort:{SORT}",
					function(item) {
						return cdata.ltfn == null ? ("&e - &b"+item.name+"&r\n") : cdata.ltfn(item, pl, args, data);
					},
					function(a, b) {
						var aa = a.name;
						var bb = b.name;
						if(aa < bb) return -1;
						if(aa > bb) return 1;
						return 0;
					},
					function(cmd, list) {
						return arrayOccurs(cmd.name, list, false, false);
					},
					(params.sort||"").toLowerCase() == "desc"
				);

				tellPlayer(pl, txt);
				return true;
			}, this.cmdtree.replaceAll(" ", ".")+'.list', [],
			{
				"self": this,
				"datatype": this.type,
				"cmdtree": this.cmdtree,
				"lt": this.listingTransformer,
				"ltfn": this.listingTransformerFn,
			},
		]);
		if(excludes.indexOf("copy") == -1)
		this.cmds.push(
			['!'+this.cmdtree+' copy <name> <new_name>', function(pl, args, data, cdata){
				var dht = getDataHandler(cdata.datatype);
				var dh = new dht(args.name).init(data);
				for(var o in cdata.self.onFns['copy']) {
var onFn = cdata.self.onFns['copy'][o];
					onFn(dh, pl, args, data, cdata);
				}
				dh.name = args.new_name;
				dh.save(data);
				tellPlayer(pl, "&aCopied "+dh.type+" '"+args.name+"' to '"+args.new_name+"'!");
				return true;
			}, this.cmdtree.replaceAll(" ", ".")+'.copy', [
				{
					"argname": "new_name",
					"type": "string",
					"noColor": true,
				},
				{
					"argname": "name",
					"type": "datahandler",
					"datatype": this.type,
					"exists": true,
				},
				{
					"argname": "new_name",
					"type": "datahandler",
					"datatype": this.type,
					"exists": false
				}
			], {
				"datatype": this.type,
				"self": this,
			}
		]);
		return this;
	};
	this.register = function(){
		registerXCommands(this.cmds);
		return this;
	};
}


function parseUsageRgx(command, str) {
	if(typeof(str) == typeof(undefined) || str === null) { str = null; }//Converts command usage to Regex, and gathers info about command
	//!perms\s+manage\s+add((?:\s+[\w]+))((?:\s+[\w]+)*)
	//+ == <...vars> //multiple args, minimal one required
	//* == [...vars] //multiple args, optional
	//  == <var> //arg, required
	//? == [var] // arg, optional

	var argrx = [];
	var cmdMatch = command.usage
	.replace(/(\w)\s+(\w)/g, "$1\\s+$2")
	.replace(/(\w|>|\])\s+(\w|<|\[)/g, "$1$2");//fix whitespace
	var req_regx = /<([.]{3})*([\w]+)>/g;//Required arg regex
	var opt_regx = /\[([.]{3})*([\w]+)\]/g;//Optional arg recalc
	var rm = cmdMatch.allMatch(req_regx);
	for(var i in rm) {//required args
		var rmcode = rm[i][0];
		var rmmulti = (rm[i][1] != null);
		var rmname = rm[i][2];
		var rmpart = "((?:\\s+\\S+)"+(rmmulti?"+":"")+")";
		if(str != null) {
			argrx.push([
				command.usage.indexOf(rmcode),
				rmname,
				rmmulti
			]);
		}
		cmdMatch = cmdMatch.replace(rmcode, rmpart);
	}
	var om = cmdMatch.allMatch(opt_regx);
	for(var i in om) {//optional args
		var omcode = om[i][0];
		var ommulti = (om[i][1] != null);
		var omname = om[i][2];
		var ompart = "((?:\\s+\\S+)"+(ommulti?"*":"?")+")";
		if(str != null) {
			argrx.push([
				command.usage.indexOf(omcode),
				omname,
				ommulti
			]);
		}
		cmdMatch = cmdMatch.replace(omcode, ompart);
	}

	var capt_names = [];
	var cids = [];

	while(argrx.length > 0) {
		var hid = 0;
		for(var i in argrx)  {
			if(argrx[i][0] > hid) {
				hid = argrx[i][0];
			}
		}
		for(var i in argrx)  {
			if(argrx[i][0] == hid) {
				capt_names.push([argrx[i][1], argrx[i][2]]);
				argrx.splice(i, 1);
				break;
			}
		}
	}
	capt_names.reverse();

	return [cmdMatch, capt_names];
}

var ARGPARAM_REGEX = /-([\w]+)(?:\s*:\s*([\w\S]+))?/;

function getArgParams(arr) {
	var params = {};
	var remParams = [];
	for(var i in arr) {
var a = arr[i];
		var am = a.match(ARGPARAM_REGEX);
		if(am != null) {
			params[am[1]] = (am[2] === undefined ? true : am[2]);
			remParams.push(am[0]);
		}
	}
	for(var re in remParams) {
var remPar = remParams[re];
		array_remove(arr, remPar);
	}
	return params;
}

function executeXCommand(str, player,permcheck,data) {
	if(typeof(permcheck) == typeof(undefined) || permcheck === null) { permcheck = true; }
	var data = data||player.world.getStoreddata();
	var sb = player.world.getScoreboard();
	for(var c in _COMMANDS) {
var cmd = _COMMANDS[c];
		var cmdm = parseUsageRgx(cmd, str);

		var argrgx = cmdm[0];
		var rgx = new RegExp(argrgx, 'gi');
		if( (str.match(rgx) || []).length == 1) {
			if(str.indexOf(str.match(rgx)[0]) == 0 && str.replace(rgx, '') == '') {
				var argnames = cmdm[1];
				var cg = 1;
				var args = {};
				for(var a in argnames) {
					var argname = argnames[a][0];
					var ismulti = argnames[a][1];
					if(typeof(args[argname]) == typeof(undefined)) {
						args[argname] = (ismulti ? [] : null)
					}
					var argval = str.replace(rgx, '$'+cg.toString());
					if(ismulti) {
						args[argname] = argval.split(' ');
						args[argname] = args[argname].filter(function(el){
							return el.toString().length > 0;
						});
					} else {
						args[argname] = (argval.trim() == "" ? null : argval.trim());
					}


					cg++;
				}

				var cmdperm = new Permission(cmd.perm);
				if(!cmdperm.exists(data)) {
					cmdperm.save(data);
				}
				cmdperm.load(data);
				if(cmdperm.permits(player.getName(), sb, data) || !permcheck) {
					//Check arguments
					for(var a in args) {
var arg = args[a];
						if(arg == null) { continue; }

						for(var b in cmd.rules) {
var rule = cmd.rules[b];

							if(!"argname" in rule) { continue; }
							var errpref = '';
							var errsuff = '';
							if("msgprefix" in rule) { errpref = rule.msgprefix }
							if("msgsuffix" in rule) { errsuff = rule.msgsuffix }

							if("as" in rule) {
								if(rule.as == "string" && typeof arg == 'object') {
									arg = arg.join(" ");
								}
							}

							if(rule.argname != a) { continue; }
							var rulename = rule.name||rule.argname.toString();
							if('type' in rule) {//Check Arg Type
								switch(rule.type) {
									case 'id': {
										if(arg.replace(/([\w\-\.]+)/g, '') != '') {
											tellPlayer(player, errpref+_MSG["argNotValid"].fill({
												"argName": rulename,
												"allowed": "A-Za-z0-9_-:D"
											})+errsuff);
											return false;
										}
										//Run case 'string'
									}
									case 'string': {
										if(arg.replace(/([\w\-\.]+)/g, '') != '') {
											tellPlayer(player, errpref+_MSG["argNotValid"].fill({
												"argName": rulename,
												"allowed": "&cA-Za-z0-9_-"
											})+errsuff);
											return false;
										}
										if('minlen' in rule) {
											if(arg.toString().length < rule.minlen) {
												tellPlayer(player, errpref+"&c'"+rulename+"' is too short! (Min. "+rule.minlen+" characters)"+errsuff);
												return false;
											}
										}
										if('maxlen' in rule) {
											if(arg.toString().length < rule.maxlen) {
												tellPlayer(player, errpref+"&c'"+rulename+"' is too long! (Min. "+rule.minlen+" characters)"+errsuff);
												return false;
											}
										}
										if("noColor" in rule) {
											if(rule.noColor) {
												if(escCcs(arg.toString()) != arg.toString()) {
													tellPlayer(player, errpref+"&c'"+rulename+"' cannot contain color coding!"+errsuff);
													return false;
												}
											}
										}
										break;
									}
									case 'enum': {
										if("values" in rule) {
											if(rule.values.indexOf(arg) == -1) {
												tellPlayer(player, "&c'"+rulename+"' must be one of the following: "+rule.values.join(", "));
												return false;
											}
										}
										break;
									}
									case 'currency':
									case 'time':
									case 'number': {
										var num = NaN;
										if(rule.type == 'number') {
											num = parseFloat(arg);
										} else if(rule.type == 'currency') {
											num = getCoinAmount(arg);
										} else {
											num = getStringTime(arg);
										}

										if(isNaN(num)) {
											tellPlayer(player, errpref+"&c'"+rulename+"' is not a number!"+errsuff);
											return false;
										}
										if('max' in rule) {
											if(num > rule.max) {
												var rmax = rule.max;
												if(rule.type == 'currency') {
													rmax = getAmountCoin(rule.max);
												} else if(rule.type == 'time') {
													rmax = getTimeString(rule.max);
												}
												tellPlayer(player, errpref+"&c'"+rulename+"' cannot be greater than "+rmax+errsuff);
												return false;
											}
										}
										if('min' in rule) {
											if(num < rule.min) {
												var rmin = rule.min;
												if(rule.type == 'currency') {
													rmin = getAmountCoin(rule.min);
												} else if(rule.type == 'time') {
													rmin = getTimeString(rule.min);
												}
												tellPlayer(player, errpref+"&c'"+rulename+"' cannot be less than "+rmin+errsuff);
												return false;
											}
										}
									}
									case 'datahandler': {
										if('datatype' in rule) {
											var dh = new DataHandler(rule.datatype, arg);
											if('exists' in rule) {
												var exists = dh.exists(data);
												if(rule.exists && !exists) {
													//Hasto exists but does not
													tellPlayer(player, errpref+"&c"+dh.type.rangeUpper(0,1)+" '"+dh.name+"' does not exist!"+errsuff);
													return false;
												}
												if(!rule.exists && exists) {
													//Has not to exists but does
													tellPlayer(player, errpref+"&c"+dh.type.rangeUpper(0,1)+" '"+dh.name+"' already exists!"+errsuff);
													return false;
												}
											}
										}
										break;
									}
									case 'color': {
										if(objArray(_RAWCOLORS).indexOf(arg) == -1) {
											tellPlayer(player, errpref+"&cColor must be one of the following: "+objArray(_RAWCOLORS).join(', ')+'!'+errsuff);
											return false;
										}
										break;
									}
									case 'coloreffect': {
										if(objArray(_RAWEFFECTS).indexOf(arg) == -1) {
											tellPlayer(player, errpref+"&cChat effects must be one of the following: \n"+objArray(_RAWEFFECTS).join("\n")+errsuff);
											return false;
										}
										break;
									}
									case 'attribute': {
										if(_ITEMATTR.indexOf(arg) == -1) {
											tellPlayer(player, errpref+"&cItem attributes must be one of these: \n"+_ITEMATTR.join("\n")+errsuff);
											return false;
										}
										break;
									}
									case 'bool': {
										if(['true', 'false'].indexOf(arg) == -1) {
											tellPlayer(player, errpref+"&c"+rulename.rangeUpper(0,1)+" must be true or false!"+errsuff);
											return false;
										}
										break;
									}
								}

							}

						}
					}

					return (cmd.callback(player, args, data, cmd.payload) || false);
				} else {
					tellPlayer(player, "&cYou don't have permission to this command!");
					return false;
				}
			}
		}
	}
	//No valid command given
	var usg = [];
	var aa = str.split(" ");
	while(aa.length > 0) {
		var saa = aa.join(" ");
		if(usg.length == 0) {
			for(var c in _COMMANDS) {
var cmd = _COMMANDS[c];
				if(occurrences(cmd.usage, saa) > 0) {
					var lcp = new Permission(cmd.perm);
					lcp.load(data);
					if(lcp.permits(player.getName(), sb, data)) {
						usg.push(cmd.usage);
					}
				}
			}
		}
		aa.splice(-1,1);
	}


	tellPlayer(player, "&cCould not find this command!\nDo &c&n!help or click here{run_command:!help}&c to see available commands.");

	return false;

}



//Register commands

    registerXCommands([
        ['!config reload', function(pl, args, data){
            reloadConfiguration();
            tellPlayer(pl, "&aReloaded CustomServerTools configuration.");
        }, 'config.reload'],
    ]);

    registerXCommands([
        ["!kick <player> [...reason]", function(pl, args, data){
            if(playerIsOnline(pl.world, args.player)) {
                var plo = new Player(pl.getName()).init(data);
                pl.world.getPlayer(args.player).kick(parseEmotes(ccs(CONFIG_SERVER.BAR_OPEN+CONFIG_SERVER.TITLE+CONFIG_SERVER.BAR_CLOSE+"\n\n"+plo.getNameTag(pl.world.scoreboard)+"\n\n&9&lHas kicked you for:&r "+args.reason.join(" "))));
            } else {
                tellPlayer(pl, "&cPlayer is not online.")
            }
        }, "kick"],
    ]);

    //REGISTER AUTOMSG COMMANDS


    var badgeCommands = new CommandFactory("badge");
    badgeCommands
        .genDefault()
        .addSettable("desc", function(desc){
            return desc.join(" ");
        }, [], null, "[...{NAME}]")
        .addSettable("emote", function(emote){return emote;}, [
            {
                "argname": "emote",
                "type": "enum",
                "value": Object.keys(CHAT_EMOTES)
            }
        ])
        .addSettable("displayName", function(name){
            return name.join(" ");
        }, [], null, "[...{NAME}]")
        .addInfoText(function(badge){
            return "&6&lDisplay Name: &r"+badge.data.displayName+" &r&4[Change]{suggest_command:!badge setDisplayName "+badge.name+" }&r\n"+
            "&6&lEmote Icon:&r :"+badge.data.emote+": ("+badge.data.emote+")\n"+
            "&6&lDescription:&r "+badge.data.desc;
        })
        .add("give <name> [...players]", function(badge, pl, args, data){
            if(args.players.length == 0) { args.players.push(pl.getName()); }
            for(var i in args.players) {
var apl = args.players[i];
                var aplo = new Player(apl);
                if(aplo.exists(data)) {
                    aplo.init(data);
                    if(aplo.data.badges.indexOf(badge.name) == -1) {
                        aplo.data.badges.push(badge.name);
                        aplo.save(data);
                    }
                }
            }

            tellPlayer(pl, "&aGave badge '"+badge.name+"' to players '"+args.players.join(", ")+"'.");
        })
        .add("take <name> [...players]", function(badge, pl, args, data){
            if(args.players.length == 0) { args.players.push(pl.getName()); }
            for(var i in args.players) {
var apl = args.players[i];
                var aplo = new Player(apl);
                if(aplo.exists(data)) {
                    aplo.init(data);
                    if(aplo.data.badges.indexOf(badge.name) > -1) {
                        var newBadges = [];
                        for(var pb in aplo.data.badges) {
var plb = aplo.data.badges[pb];
                            if(plb != badge.name) {
                                newBadges.push(plb);
                            }
                        }
                        aplo.data.badges = newBadges;
                        aplo.save(data);
                    }
                }
            }

            tellPlayer(pl, "&aTook badge '"+badge.name+"' from players '"+args.players.join(", ")+"'.");
        })
        .register();

	//REGISTER CHAT CHANNEL COMMANDS

	registerXCommands([
		//['', function(pl, args){}, ''],
		['!chat create <name>', function(pl, args){
			var data = pl.world.getStoreddata();
			var cc = new ChatChannel(args.name);
			cc.save(data);
			tellPlayer(pl, "&aCreated chat channel '"+cc.name+"'!");

			return false;
		}, 'chat.create', [
			{
				"argname": "name",
				"type": "id",
				"minlen": 3
			},
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": false,
			}
		]],
		['!chat remove <name>', function(pl, args, data){
			var cc = new ChatChannel(args.name);
			cc.remove(data);
			tellPlayer(pl, "&aRemoved chat channel '"+cc.name+"'!");

			return false;
		}, 'chat.remove', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			}
		]],
		['!chat list [...matches]', function(pl, args, data){
			var cids = new ChatChannel().getAllDataIds(data);
			tellPlayer(pl, getTitleBar("Chat Channels"));
			for(var ci in cids) {
var cid = cids[ci];
				var cc = new ChatChannel(cid);
				if(args.matches.length == 0 || arrayOccurs(cid, args.matches) > 0) {
					if(cc.load(data) && cc.getPermission().init(data).permits(pl.getName(), pl.world.getScoreboard(), data)) {
						var onlinePlayers = [];
						var offPlayers = []
						for(var cpli in cc.data.players) {
var cpl = cc.data.players[cpli];
							if(playerIsOnline(pl.world, cpl)) {
								onlinePlayers.push(cpl);
							} else {
								offPlayers.push(cpl);
							}
						}
						var onlineText = "$eOnline Players:$r\n"+
							onlinePlayers.join("\n")+
							"\n$eOffline Players:$r\n"+
							offPlayers.join("\n");
						var ontxt = "&r&e"+onlinePlayers.length+"/"+cc.data.players.length+" Online{*|show_text:"+onlineText+"}&r";
						var opttxt = (cc.data.players.indexOf(pl.getName()) > -1 ? "&c&nLeave{run_command:!chat leave "+cc.name+"}&r":"&a&nJoin{run_command:!chat join "+cc.name+"}&r");
						tellPlayer(pl, cc.getTag()+"&r ("+cc.name+") "+opttxt+" "+ontxt);
					}
				}
			}
			return false;
		}, 'chat.list'],
		['!chat setColor <name> <color>', function(pl, args, data){
			var cc = new ChatChannel(args.name);
			cc.load(data);
			cc.data.color = args.color.toLowerCase();
			cc.save(data);
			tellPlayer(pl, '&aSet color of chatchannel '+cc.getName()+'&a to '+cc.data.color+'!');
			return true;
		}, 'chat.setColor', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			},
			{
				"argname": "color",
				"type": "color",
			}
		]],
		['!chat setDisplayName <name> [...displayName]', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);

			cc.data.displayName = (args.displayName.length > 0 ? args.displayName.join(' ') : cc.name);
			cc.save(data);
			tellPlayer(pl, '&aSet display name to: '+cc.getName());
			return true;
		}, 'chat.setDisplayName', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			},
			{
				"argname": "displayName",
				"type": "string",
				"noColor": true
			}
		]],
		['!chat setDesc <name> [...desc]', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);
			cc.data.desc = args.desc.join(' ');
			cc.save(data);
			tellPlayer(pl, '&aSet description of '+cc.getName()+'&r&a to: '+cc.data.desc);
			return true;
		}, 'chat.setDisplayName', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			},
		]],
		['!chat join <name>', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);
			var plo = new Player(pl.getName()).init(data);
			if(cc.getPermission().init(data).permits(pl.getName(), pl.world.getScoreboard(), data)) {
				if(cc.data.players.indexOf(pl.getName()) == -1) {
					cc.data.players.push(pl.getName());
					plo.data.talkchat = cc.name;
					plo.save(data);
					cc.save(data);
					cc.broadcast(pl.world, plo.getNameTag(pl.world.getScoreboard())+"&r &ehas joined "+cc.getName(), [pl.getName()]);
					tellPlayer(pl, "&eJoined chat-channel "+cc.getTag()+(cc.data.desc != '' ? "&r\n&e"+cc.data.desc:""));
					return true;
				} else {
					tellPlayer(pl, "&cYou are already in this chat!");
				}


			} else {
				tellPlayer(pl, "&cYou are not allowed to join this channel!");
			}
			return false;
		}, 'chat.join', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			}
		]],
		['!chat leave <name>', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);
			var plo = new Player(pl.getName()).init(data);

			if(cc.data.players.indexOf(pl.getName()) > -1) {
				cc.data.players = removeFromArray(cc.data.players, pl.getName());
				cc.save(data);
				tellPlayer(pl, "&eLeaved channel "+cc.getName());
				cc.broadcast(pl.world, plo.getNameTag(pl.world.getScoreboard())+"&r &ehas left "+cc.getName(), [pl.getName()]);
				return true;
			} else {
				tellPlayer(pl, "&cYou can't leave a channel that you're not in!");
			}
			return false;
		}, 'chat.leave', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			}
		]],
	]);

  registerXCommands([
    //['', function(pl, args, data){}, '', []],
    ['!emote list [...matches]', function(pl, args, data){
        var emids = new Emote().getAllDataIds(data);
        tellPlayer(pl, getTitleBar('Emote List'));

    }, 'emote.list', []],
    ['!emote info <name>', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      tellPlayer(pl, getTitleBar('Emote Info'));
      tellPlayer(pl, "&eEmote Name: &r"+em.name);
      tellPlayer(pl, "&eEmote: &r:"+em.name+":");
      tellPlayer(pl, "&ePermission ID: &9&l"+em.getPermission().name+"&r [&6:sun: Info{run_command:!perms info "+em.getPermission().name+"}&r]");
      tellPlayer(pl, "&eIs Default: &c"+(em.data.default ? "&a:check: Yes" : "&c:cross: No"));
      tellPlayer(pl, "&ePrice: &c"+getAmountCoin(em.data.price));
      tellPlayer(pl, "&eFor Sale: "+(em.data.forSale ? "&a:check: Yes" : "&c:cross: No"));
      tellPlayer(pl, "&eHidden: "+(em.data.hidden ? "&c:check: Yes" : "&a:cross: No"));
    }, 'emote.info', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      }
    ]],
    ['!emote buy <emote>', function(pl, args, data){
        var em = new Emote(args.emote).init(data);
        var plo = new Player(pl.getName()).init(data);
        if(!em.data.hidden && em.data.forSale) {
            if(plo.data.emotes.indexOf() == -1) {
                if(plo.data.money >= em.data.price) {
                    plo.data.money -= em.data.price;
                    plo.data.emotes.push(em.name);
                    plo.save(data);
                    tellPlayer(pl, "&aBought emote "+em.name+" :"+em.name+": for &r:money:&e"+getAmountCoin(em.data.price)+"&a!");
                } else {
                    tellPlayer(pl, "&cYou don't have enough money in your money pouch!");
                }
            } else {
                tellPlayer(pl, "&cYou already have this emote!");
            }
        } else {
            tellPlayer(pl, "&cThis emote cannot be bought!");
        }
        return false;
    }, 'emote.buy', [
        {
            "argname": "emote",
            "type": "datahandler",
            "datatype": "emote",
            "exists": true,
        },
    ]],
    ['!emote take <emote> <player>', function(pl, args, data){
      var p = new Player(args.player).init(data);
      p.data.emotes = removeFromArray(p.data.emotes, args.emote);
      p.save(data);
      tellPlayer(pl, "&aTook emote '"+args.emote+"' from player '"+p.name+"'!");
      return true;
    }, 'emote.take', [
      {
        "argname": "player",
        "type": "datahandler",
        "datatype": "player",
        "exists": true,
      },
      {
        "argname": "emote",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
    ]],
    ['!emote give <emote> <player>', function(pl, args, data){
      var p = new Player(args.player).init(data);
      if(p.data.emotes.indexOf(args.emote) == -1) {
        p.data.emotes.push(args.emote);
      }
      p.save(data);
      tellPlayer(pl, "&aGave emote '"+args.emote+"' to player '"+p.name+"'!");
      return true;
    }, 'emote.give', [
      {
        "argname": "player",
        "type": "datahandler",
        "datatype": "player",
        "exists": true,
      },
      {
        "argname": "emote",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
    ]],
    ['!emote setForSale <name> <forSale>', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      em.data.forSale = (args.forSale == 'true');
      em.save(data);
      tellPlayer(pl, "&a"+(em.data.forSale ? "Put" : "Pulled")+" emote '"+em.name+"' "+(em.data.forSale ? "on" : "off")+"-sale!");
  }, 'emote.setForSale', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
      {
        "argname": "forSale",
        "type": "bool",
      },
    ]],
    ['!emote setHidden <name> <hidden>', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      em.data.hidden = (args.hidden == 'true');
      em.save(data);
      tellPlayer(pl, "&a"+(em.data.hidden ? "Hided":"Showing")+" emote '"+em.name+"'");
  }, 'emote.setHidden', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
      {
        "argname": "hidden",
        "type": "bool",
      },
    ]],
    ['!emote setDefault <name> <default>', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      em.data.default = (args.default == 'true');
      em.save(data);
      tellPlayer(pl, "&a"+(em.data.default ? "Put" : "Pulled")+" emote '"+em.name+"' "+(em.data.default ? "into" : "from")+" default emotes!");
  }, 'emote.setDefault', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
      {
        "argname": "default",
        "type": "bool",
      },
    ]],
    ['!emote setDesc <name> [...desc]', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      em.data.desc = args.desc.join(" ");
      em.save(data);
      tellPlayer(pl, "&aChanged description of emote '"+em.name+"'!");
    }, 'emote.setDesc', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
    ]],
    ['!emote setPrice <name> <price>', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      em.data.price = getCoinAmount(args.price);
      em.save(data);
      tellPlayer(pl, "&aSet price of emote '"+em.name+"' to "+getAmountCoin(em.data.price));

      return true;
    }, 'emote.setPrice', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
      {
        "argname": "price",
        "type": "currency",
        "min": 0,
      },
    ]],
  ]);

    //REGISTER ENTITY COMMANDS
    registerXCommands([
        //['', function(pl, args, data){}, '', []],
        ['!entity rename [...name]', function(pl, args, data){}, 'entity.rename', []],
    ]);

  registerXCommands([
    ['!giftcode list [...matches]', function(pl, args, data){
        tellPlayer(pl, getTitleBar("GiftCodes List"));
        var codes = new GiftCode().getAllDataIds(data);
        for(var n in codes) {
var codeId = codes[n];
            var code = new GiftCode(codeId).init(data);
            var hoverInfo = "$e$lCode: $r"+code.data.code+"\n$e$lUses left: $r"+code.getUsesLeft();
            tellPlayer(pl, "&e - &b&l"+code.name+"{*|show_text:"+hoverInfo+"}&r [&6:sun: Info{run_command:!giftcode info "+code.name+"}&r] [&c:cross: Remove{run_command:!giftcode remove "+code.name+"}&r]");
        }
    }, 'giftcode.list', []],
	['!giftcode info <name>', function(pl, args, data){
		var code = new GiftCode(args.name).init(data);
        tellPlayer(pl, getTitleBar('GiftCode Info'));
        tellPlayer(pl, "&6GiftCode Name: &r"+code.name);
        tellPlayer(pl, "&6Code: &r"+code.data.code+"&r [&d:recycle: Regen{run_command:!giftcode setCode "+code.name+"}&r] [&eEdit{suggest_command:!giftcode setCode "+code.name+" }&r]");
        tellPlayer(pl, "&6Permission ID: &9&l"+code.getPermission().name+"&r [&6:sun: Info{run_command:!perms info "+code.getPermission().name+"}&r]");
        tellPlayer(pl, "&6Uses left: &c"+code.getUsesLeft());
        tellPlayer(pl, getTitleBar('Rewards', false));
		tellPlayer(pl, "&6Money: &r:money:&e"+getAmountCoin(code.data.money));
		if(code.data.items.length > 0){
			tellPlayer(pl, "&eItems:");
			for(var i in code.data.items) {
var itemData = code.data.items[i];
				var item = nbtItem(itemData, pl.world);
				tellPlayer(pl, "&6-&3 [" + (parseInt(i)+1) + "] " + item.getDisplayName() + " &2x"+item.getStackSize() + " &r[&c:cross: Remove{run_command:!giftcode removeItem " + code.name + " " +(parseInt(i)+1)+"}&r]");
			}
		}
		if(code.data.emotes.length > 0){
			tellPlayer(pl, "&eEmotes:");
			for(var i in code.data.emotes) {
var emoteData = code.data.emotes[i];
				var emote = new Emote(emoteData).init(data);
				tellPlayer(pl, "&6-&3 [" + (parseInt(i)+1) + "] " + emote.name + " &r:" + emote.name + ": [&c:cross: Remove{run_command:!giftcode removeEmote " + code.name + " " +(parseInt(i)+1)+"}&r]");
			}
		}


    }, 'giftcode.info', [
		{
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true
        }
	]],
    ['!giftcode create <name> [code]', function(pl, args, data){
        var giftcode = new GiftCode(args.name);
        if(args.code) {
            giftcode.data.code = args.code;
        } else {
            giftcode.generateCode();
        }
		giftcode.data.uses = -1;
        tellPlayer(pl, "&aGiftcode '"+args.name+"&a' added with code '"+giftcode.data.code+"'!");
        giftcode.save(data);
    }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "id",
            "minlen": 3
        },
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": false,
        }
    ]],
    ['!giftcode setCode <name> [code]', function(pl, args, data){
        var giftcode = new GiftCode(args.name);
        giftcode.load(data);
        if(typeof(args.code) === "string") {
            giftcode.data.code = args.code;
        } else {
            giftcode.generateCode();
        }
        giftcode.save(data);
        tellPlayer(pl, "&aSet the code for GiftCode '"+args.name+"&a' to "+giftcode.data.code+"!");
    }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        },
        {
            "argname": "code",
            "type": "id",
            "minlen": 3
        }
    ]],
    ['!giftcode setMaxUses <name> <uses>', function(pl, args, data){
        var giftcode = new GiftCode(args.name);
        giftcode.load(data);
        giftcode.data.uses = args.uses;
        giftcode.save(data);
        tellPlayer(pl, "&aSet max uses for GiftCode '"+args.name+"&a' to "+giftcode.getUsesLeft()+"!");
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        },
        {
            "argname": "uses",
            "type": "number"
        }
    ]],
    ['!giftcode addItem <name>', function(pl, args, data){
		var hand = pl.getMainhandItem();
		if(!hand.isEmpty()) {
			var giftcode = new GiftCode(args.name);
	        giftcode.load(data);
			giftcode.data.items.push(hand.getItemNbt().toJsonString());
			giftcode.save(data);
			executeXCommand("!giftcode info " + args.name, pl);
			return true;
		}
		tellPlayer(pl, "&cYou don't have anything in your hand!");
		return false;
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        }
    ]],
	['!giftcode removeItem <name> <id>', function(pl, args, data){
		var giftcode = new GiftCode(args.name);
		var id = args.id - 1;
		giftcode.load(data);
		if(giftcode.data.items.length > id) {
			giftcode.data.items.splice(id, 1);
			giftcode.save(data);
			executeXCommand("!giftcode info " + args.name, pl);
			return true;
		}
		tellPlayer(pl, "&cNo item with this id!");
		return false;
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        },
		{
			"argname": "id",
			"type": "number",
			"min": 1
		}
    ]],
	['!giftcode setMoney <name> <amount>', function(pl, args, data){
		var giftcode = new GiftCode(args.name);
	    giftcode.load(data);
		if(args.amount != 0)
			giftcode.data.money = getCoinAmount(args.amount);
		else
			giftcode.data.money = 0;
		giftcode.save(data);
		tellPlayer(pl, "&aMoney prize set to "+args.amount+"!");
		return true;
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true
        },
		{
			"argname": "amount",
			"type": "currency"
		}
    ]],
	['!giftcode addEmote <name> <emote>', function(pl, args, data){
		var giftcode = new GiftCode(args.name);
	    giftcode.load(data);
		giftcode.data.emotes.push(args.emote);
		giftcode.save(data);
		executeXCommand("!giftcode info " + args.name, pl);
		return true;
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true
        },
		{
            "argname": "emote",
            "type": "datahandler",
            "datatype": "emote",
            "exists": true
        }
    ]],
	['!giftcode removeEmote <name> <id>', function(pl, args, data){
		var giftcode = new GiftCode(args.name);
		var id = args.id - 1;
		giftcode.load(data);
		if(giftcode.data.emotes.length > id) {
			giftcode.data.emotes.splice(id, 1);
			giftcode.save(data);
			executeXCommand("!giftcode info " + args.name, pl);
			return true;
		}
		tellPlayer(pl, "&cNo emote with this id!");
		return false;
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        },
		{
			"argname": "id",
			"type": "number",
			"min": 1
		}
    ]],
    ['!giftcode redeem <code>', function(pl, args, data){
		var codes = new GiftCode().getAllDataIds(data);
        for(var n in codes) {
var codeId = codes[n];
            var code = new GiftCode(codeId).init(data);
			if(code.data.code == args.code){
				return code.redeem(pl, data);
			}
        }
        tellPlayer(pl, "&cGiftCode with code '"+args.code+"' not found!");
  }, 'giftcode.redeem'],

  	['!giftcode unredeem <name> <player>', function(pl, args, data){
	  var code = new GiftCode(args.name);
	  code.load(data);
	  if(code.data.player.indexOf(args.player) == -1) {
		  tellPlayer(pl, "&cCode isn't activated yet!");
		  return false;
	  }
	  array_remove(code.data.players, args.player);
	  code.save(data);
	  tellPlayer(pl, "&aUnredeemed giftcode '"+args.name+"&a' for player "+args.player+"!");
	}, 'giftcode.create', [
	  {
		  "argname": "name",
		  "type": "datahandler",
		  "datatype": "giftcode",
		  "exists": true,
	  },
	  {
		  "argname": "player",
		  "type": "datahandler",
		  "datatype": "player",
		  "exists": true
	  }
  	]],

	['!giftcode remove <name>', function(pl, args, data){
		var code = new GiftCode(args.name);
		code.remove(data);
		tellPlayer(pl, "&aRemoved giftcode '"+args.name+"&a'!");
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        }
    ]]
  ]);

	registerXCommands([
		['!item renameLore <slot> [...lore]', function(pl, args){
			var mItem = pl.getMainhandItem();

			if(!mItem.isEmpty()) {
				var newLoreStr = args.lore.join(' ');
				var newLore = objArray(mItem.getLore());
				var s = parseInt(args.slot) || 0;
				if(s < newLore.length) {
					newLore[s] = parseEmotes(ccs(newLoreStr));
				} else {
					newLore.push(ccs(newLoreStr));
				}
				mItem.setLore(newLore);
				tellPlayer(pl, "&aRenamed lore!");
			} else {
				tellPlayer(pl, "&cYou don't have anything in your hand!");
			}

			return false;
		}, 'item.renameLore'],
		['!item rename <...name>', function(pl, args){
			var mItem = pl.getMainhandItem();

			if(!mItem.isEmpty()) {
				var newName = args.name.join(' ');
				mItem.setCustomName(parseEmotes(ccs(newName)));
				return true;
			} else {
				tellPlayer(pl, "&cYou don't have anything in your hand!");
			}

			return false;
		}, 'item.rename'],
		['!item addcstEnchant <name> [lvl]', function(pl, args, data){
			var mItem = pl.getMainhandItem();
			var ench = getCSTEnchantByName(args.name);
			if(!mItem.isEmpty() && ench != null) {
				addCSTEnchant(mItem, ench.name, args.lvl||1);
			}
		}, 'item.addEnchant', [
			{
				"argname": "lvl",
				"type": "number",
				"min": 1
			},

		]],
		["!item addSellItem", function(pl, args, data){
			var oItem = pl.getOffhandItem();
			var mItem = pl.getMainhandItem();

			var mNbt = mItem.getNbt();

			if(oItem.isEmpty()) {
				tellPlayer(pl, "&cYou don't have an chance item in your offhand!");
				return false;
			} else
			if(mItem.isEmpty()) {
				tellPlayer(pl, "&cYou don't have an sell item in your mainhand!");
				return false;
			} else {
				var chanceItems = mNbt.has("CSTSellItems") ? Java.from(mNbt.getList("CSTSellItems", mNbt.getListType("CSTSellItems"))) : [];

				chanceItems.push(oItem.getItemNbt());

				mNbt.setList("CSTSellItems", chanceItems);

				tellPlayer(pl, "&aAdded offhand item as chance item to sell item! To view sell item info, do &2!item sellItemInfo&a!");

			}


		}, "item.addSellItem"],
		['!item removecstEnchant <name>', function(pl, args, data){
			var mItem = pl.getMainhandItem();
			var ench = getCSTEnchantByName(args.name);
			if(!mItem.isEmpty() && ench != null) {
				removeCSTEnchant(mItem, ench.name);
			}
		}, 'item.removeEnchant', [
			{
				"argname": "lvl",
				"type": "number",
				"min": 1
			},

		]],
		['!listCstEnchants [...matches]', function(pl,args){
			var params = getArgParams(args.matches);
			var txt = getTitleBar("Custom Server Tools Enchants", false)+"\n";

			txt += genDataPageList(
				_ENCHANTS,
				args.matches,
				parseInt(params.show||10),
				parseInt(params.page||1),
				"!listCstEnchants {MATCHES} -show:{SHOWLEN} -page:{PAGE} -sort:{SORT}",
				function(ench) {
					return "&e - &c&l"+ench.name+"&r\n";
				},
				function(a,b) {
					var al = a.name.toLowerCase();
			        var bl = b.name.toLowerCase();

			        if(al < bl) return -1;
			        if(al > bl) return 1;

			        return 0;
				},
				function(ench, list) {
					 return arrayOccurs(ench.name, list, false, false) > 0
				},
				(params.sort||"").toLowerCase() == "desc"
			);

			tellPlayer(pl, txt);

		}, "listCstEnchants"],
		['!item setAttr <slot> <attribute> <value>', function(pl, args){
			var mItem = pl.getMainhandItem();

			if(!mItem.isEmpty()) {
				mItem.setAttribute(args.attribute, parseFloat(args.value), parseInt(args.slot));
				tellPlayer(pl, "&aSet "+args.attribute+" to "+args.value+"%!");
				return true;
			} else {
				tellPlayer(pl, "&cYou don't have anything in your hand!");
			}

			return false;
		}, 'item.setAttr', [
			{
				"argname": "slot",
				"type": "number",
				"min": -1,
				"max": 5,
			},
			{
				"argname": "attribute",
				"type": "attribute",
			},
			{
				"argname": "value",
				"type": "number",
				"min": 0,
			}
		]],

	]);

	registerXCommands([
		['!jobs create <name> [...display_name]', function(pl, args){
			var job = new Job(args.name);
			var dname = args.display_name.join(' ');
			var data = pl.world.getStoreddata();
			if(dname != "") {
				job.data.displayName = dname;
			}
			tellPlayer(pl, "&aJob '"+job.getDisplayName(data)+"&a' created! "+getUndoBtn(["!jobs remove "+job.name], "$cClick to undo"));
			job.save(data);
		}, 'jobs.create', [
			{
				"argname": "name",
				"type": "id",
				"minlen": 3
			},
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": false,
			}
		]],
		['!jobs remove <name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.remove(data);
			tellPlayer(pl, "&aRemoved job '"+job.getDisplayName(data)+"&a'!");
		}, 'jobs.add', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs setPay <name> <amount>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			var amount = getCoinAmount(args.amount);
			job.data.pay = amount;
			job.save(data);
			tellPlayer(pl, "&aSet the salary of job '"+job.getDisplayName(data)+"&a' to &r:money:&e"+getAmountCoin(amount)+"&a!");
		}, 'jobs.setPay', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			},
			{
				"argname": "amount",
				"type": "number"
			}
		]],
		['!jobs setPayTime <name> <time>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			job.data.payTime = args.time;
			job.save(data);
			tellPlayer(pl, "&aSet the paytime of job '"+job.getDisplayName(data)+"&a' to "+getTimeString(args.time)+"!");
		}, 'jobs.setPayTime', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			},
			{
				"argname": "time",
				"type": "time"
			}
		]],
		['!jobs setOpen <name> <open>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			job.data.isOpen = (args.open == 'true');
			job.save(data);
			tellPlayer(pl, "&aSet if job '"+job.getDisplayName(data)+"&a' is open to "+args.open);
		}, 'jobs.setOpen', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			},
			{
				"argname": "open",
				"type": "bool"
			}
		]],
		['!jobs setDisplayName <name> <...display_name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			job.data.displayName = args.display_name.join(' ');
			job.save(data);
			tellPlayer(pl, "&aSet the display of job_id '"+job.name+"' to '"+job.getDisplayName(data)+"&a'!");
		}, 'jobs.setDisplayName', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs list [...matches]', function(pl, args){
			var data = pl.world.getStoreddata();
			var dkeys = data.getKeys();
			tellPlayer(pl, getTitleBar("Job List"));
			for(var d in dkeys) {
var dkey = dkeys[d];
				if( ( dkey.match(/job_(\w.)/g) || [] ).length > 0 ) {
					var job = new Job(dkey.replace(/job_(\w.)/g, '$1'));
					var isMatch = false;
					args.matches.forEach(function(mt){
						if(occurrences(mt, job.name) > 0 || occurrences(mt, job.getDisplayName(data)) > 0) {
							isMatch = true;
						}
					});

					if(args.matches.length == 0 || isMatch) {
						job.load(data);
						tellPlayer(pl, "&e - &r"+job.getStatusColor(data)+escCcs(job.getDisplayName())+"&r (&9&o"+job.name+"&r)");
					}

				}
			}
			return true;
		}, 'jobs.list'],
		['!jobs info <name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			tellPlayer(pl, getTitleBar("Job Info"));
			tellPlayer(pl, "&eName: &9&o"+job.name);
			tellPlayer(pl, "&eDisplay Name: &r"+job.getStatusColor(data)+escCcs(job.getDisplayName()));
			tellPlayer(pl, "&eCompany: &c"+job.data.companyId);
			tellPlayer(pl, "&eIncome: "+getAmountCoin(job.data.pay)+' per '+getTimeString(job.data.payTime));
			tellPlayer(pl, "&eIs Open: "+(job.data.isOpen ? '&atrue':'&cfalse'));
			tellPlayer(pl, "&ePlaces taken: "+job.getStatusColor(data)+job.getPlayers(data).length+"/"+(job.data.capacity > -1 ? job.data.capacity : 'UNLIMITED'));
			tellPlayer(pl, "&eFire Time: &6"+getTimeString(job.data.fireTime));
		}, 'jobs.info', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs playerList <name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			tellPlayer(pl, getTitleBar("Job Player List"));
			tellPlayer(pl, "&eJob: &9&o"+args.name);
			var pls = job.getPlayers(data);
			for(var p in pls) {
var plr = pls[p];
				tellPlayer(pl, "&e - &r"+plr);
			}
		}, 'jobs.playerList', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs addPlayers <name> <...player_names>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			for(var p in args.player_names) {
var apl = args.player_names[p];
				var apo = new Player(apl);
				if(apo.load(data)) {
					apo.addJob(job.name);
					apo.save(data);
				}
			}
			tellPlayer(pl, "&aAdded "+args.player_names.length+" player(s) to job '"+job.name+"'");
		}, 'jobs.addPlayers', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs setPlaces <name> <amount>', function(pl, args){
			var am = parseInt(args.amount) || 10;
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.data.capacity = am;
			tellPlayer(pl, "&aSet max players of job '"+job.name+"' to "+am+'!');
			job.save(data);
		}, 'jobs.setPlaces', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			},
			{
				"argname": "amount",
				"type": "number"
			}
		]],
		['!jobs setFireTime <name> <time>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.data.fireTime = args.time;
			tellPlayer(pl, "&aSet fire time of job '"+job.name+"' to "+getTimeString(args.time)+"!");
			job.save(data);
		}, 'jobs.setFireTime', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			},
			{
				"argname": "time",
				"type": "time"
			}
		]],
		['!jobs removePlayers <name> <...players>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			for(var p in args.players) {
var apl = args.players[p];
				var apo = new Player(apl);
				if(apo.load(data)) {
					apo.delJob(job.name);
					apo.save(data);
				}
			}
			tellPlayer(pl, "&aRemoved "+args.players.length+" player(s) from job '"+job.name+"'");
		}, 'jobs.removePlayers', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs reload', function(pl, args){
			var data = pl.world.getStoreddata();
			var dkeys = data.getKeys();
			var jc = 0;
			for(var d in dkeys) {
var dkey = dkeys[d];
				if(dkey.cmatch(/job_(\w+)/g)) {
					var job = new Job(dkey.replace(/job_(\w+)/g, '$1'));
					if(job.load(data)) {
						job.save(data);
					}
					jc++;
				}
			}
			tellPlayer(pl, "&aReloaded "+jc+" job(s)!");
		}, 'jobs.reload']
	]);


    registerXCommands([
        ["!menu open <file>", function(pl, args, data){
            var path = "menus/"+args.file+".json";
            var menuFile = new File(path);
            if(menuFile.exists()){
                var json = readFileAsString(path);
                try {
                    json = JSON.parse(json);
                } catch(exc) {
                    handleError(exc, true, pl.getName());
                }

                var menu = new CustomMenu().fromJson(json);
                var c = menu.open(pl);
                tellPlayer(pl, "The size is: "+c.getSize());
            } else {
                tellPlayer(pl, "&cFile '"+path+"' doesn't exists!");
            }
        }, "menu.open"]
    ]);



	//REGISTER PERMISSION COMMANDS
	var permCommands = new CommandFactory("permission", "perms");

	permCommands
		.addInfoText(function(perm){
			var infoText = "&6&lEnabled: "+(perm.data.enabled ? "&atrue" : "&cfalse");
			infoText += "&r ["+
				(perm.data.enabled ?
					"&c:cross: Disable{run_command:!perms setEnabled "+perm.name+" false|show_text:$cClick to disable permission.}"
				:
					"&a:check: Enable{run_command:!perms setEnabled "+perm.name+" true|show_text:$aClick to enable permission.}"
				)
			+"&r]\n";
			infoText += "&6&lPermitted Teams: &r(&a:check: Add Teams{suggest_command:!perms addTeams "+perm.name+" }&r)\n";
			for(var t in perm.data.teams) {
var permteam = perm.data.teams[t];
				infoText += "&e - &r"+permteam+"&r (&c:cross: Remove{run_command:!perms removeTeams "+perm.name+" "+permteam+"|show_text:$cClick to remove team $o"+permteam+"$c from permission $o"+perm.name+"}&r)\n";
			}

			infoText += "&6&lPermitted Players: &r(&a:check: Add Players{suggest_command:!perms addPlayers "+perm.name+" }&r)\n";
			for(var p in perm.data.players) {
var permpl = perm.data.players[p];
				infoText += "&e - &r"+permpl+"&r (&c:cross: Remove{run_command:!perms removePlayers "+perm.name+" "+permpl+"}&r)";
			}
			return infoText;
		})
		.setListTransformer(
			function(perm, pl, args, data){
				var sb = pl.world.getScoreboard();

				var canInfo = new Permission("perms.info").init(data).permits(pl.getName(), sb, data);
				var canRemove = new Permission("perms.remove").init(data).permits(pl.getName(), sb, data);

				var tdata = {
					"INFOBTN": canInfo ? "&5[Info]{run_command:!perms info "+perm.name+"|show_text:$dClick to show permission info.}&r" : "",
					"REMOVEBTN": canRemove ? "&c[Remove]{run_command:!perms remove "+perm.name+"|show_text:$cClick to remove permission.}&r" : "",
				}

				return ("&e - &b"+perm.name+"&r {INFOBTN} {REMOVEBTN}\n").fill(tdata);
			}
		)
		.genDefault()
		.addSettable("enabled", function(enabled){
			return (enabled.toString() === "true");
		}, [
			{
				"argname": "enabled",
				"type": "bool",
			}
		], {
			"val": "{enabled}"
		})
		.register();

	registerXCommands([
		['!perms addTeams <permission_id> <...teams>', function(pl, args, data){
			var w = pl.world;
			var p = new Permission(args.permission_id).init(data);
			p.addTeams(args.teams).save(data);
			tellPlayer(pl, "&aAdded teams \""+args.teams.join(", ")+"\" to "+p.name+"!&r [&5&lUndo{run_command:!perms removeTeams "+p.name+" "+args.teams.join(" ")+"}&r]");
		}, 'perms.addTeams', [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]],
		['!perms removeTeams <permission_id> <...teams>', function(pl, args, data){
			var w = pl.world;
			var p = new Permission(args.permission_id).init(data);
			if(p.load(data)) {
				p.removeTeams(args.teams).save(data);
				tellPlayer(pl, "&aRemoved teams \""+args.teams.join(", ")+"\" from "+p.name+"!&r [&5&lUndo{run_command:!perms addTeams "+p.name+" "+args.teams.join(" ")+"}&r]");
				return true;
			} else {
				tellPlayer(pl, "&c"+args.permission_id+" does not exists!");
			}
			return false;
		}, 'perms.removeTeams', [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]],
		['!perms addPlayers <permission_id> <...players>', function(pl, args, data){
			var w = pl.world;
			var p = new Permission(args.permission_id).init(data);
			p.addPlayers(args.players).save(data);
			tellPlayer(pl, "&aAdded players \""+args.players.join(", ")+"\" to "+p.name+"!&r [&5&lUndo{run_command:!perms removePlayers "+p.name+" "+args.players.join(" ")+"}&r]");
		}, 'perms.addPlayers', [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]],
		['!perms removePlayers <permission_id> <...players>', function(pl, args, data){
			var w = pl.world;
			var p = new Permission(args.permission_id).init(data);
			p.removePlayers(args.players).save(data);
			tellPlayer(pl, "&aRemoved players \""+args.players.join(", ")+"\" from "+p.name+"!&r [&5&lUndo{run_command:!perms addPlayers "+p.name+" "+args.players.join(" ")+"}&r]");
		}, 'perms.removePlayers', [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]],
	]);



	//REGISTER PLAYER COMMANDS
	var playerCommands = new CommandFactory("player");

	playerCommands
	.setListTransformer(
			function(player){
				return "&e - &b"+player.name+" &3[Info]{run_command:!player info "+player.name+"}&r\n";
			}
		)
		.genDefault(["create", "info"])
		.register();


	registerXCommands([
		//PLAYER MANAGE
		['!player perms <player> [...matches]', function(pl, args, data){
			var permids = new Permission().getAllDataIds(data);

			var w = pl.world;
			var sb = w.getScoreboard();
			var tm = sb.getPlayerTeam(args.player);
			tellPlayer(pl, getTitleBar("Player Perms"));
			tellPlayer(pl, "&ePermissions for player:&r "+args.player);
			var shownperms = 0;
			for(var p in permids) {
var pid = permids[p];
				if(args.matches.length == 0 || arrayOccurs(pid, args.matches, false, false) > 0) {
					var perm = new Permission(pid).init(data);
					if(perm.permits(args.player, sb, data)) {
						tellPlayer(pl, "&6 - Has permission: &b&l"+perm.name+"&r (&ePerm Info{run_command:!perms info "+perm.name+"}&r)");
						if(perm.data.players.indexOf(args.player) > -1) {
							tellPlayer(pl, "&e    - By player&r (&c - Revoke{run_command:!perms removePlayers "+perm.name+" "+args.player+"|show_text:$cClick to revoke permission "+perm.name+" for player "+args.player+".}&r)");
						}
						if(tm != null) {
							if(perm.data.teams.indexOf(tm.getName()) > -1) {
								var tcol = '&'+getColorId(tm.getColor());
								tellPlayer(pl, "&e    - By team "+tcol+"&o"+tm.getName()+"&r (&c:cross: Revoke Team{run_command:!perms removeTeams "+perm.name+" "+tm.getName()+"|show_text:$cClick to revoke permission "+perm.name+" for team "+tm.getName()+".}&r)");
							}
						}
						shownperms++;
					}
				}

			}
			if(shownperms == 0) {
				tellPlayer(pl, "&cNo permissions found for player "+args.player);
			}
		}, 'player.perms'],
		['!player setColor <player> [color]', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.color = args.color;
			plo.save(data);

			if(args.color != null) {
				tellPlayer(pl, "&aSet color of player '"+args.player+"' to '"+args.color+"'");
			} else {
				tellPlayer(pl, "&aReset color of player '"+args.player+"'!");
			}

		}, "player.setColor", [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true,
			},
			{
				"argname": "color",
				"type": "color"
			}
		]],
		['!player setPay <player> <amount>', function(pl, args, data){
			var am = getCoinAmount(args.amount);
			var p = new Player(args.player).init(data);

			p.data.pay = am;
			p.save(data);
			tellPlayer(pl, "&aSet pay amount of player '"+p.name+"' to &r:money:&e"+getAmountCoin(am)+'&a!');

			return true;
		}, 'player.setPay', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "amount",
				"type": "currency",
				"min": 0
			}
		]],
		['!player setPayTime <player> <time>', function(pl, args, data){
			var am = getStringTime(args.time);
			var p = new Player(args.player).init(data);
			p.data.payTime = am;
			p.save(data);
			tellPlayer(pl, "&aSet pay time of player '"+p.name+"' to "+getTimeString(am)+'!');

			return true;
		}, 'player.setPayTime', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "time",
				"type": "time",
				"min": getStringTime("30s"),
			}
		]],
		['!player setMaxJobs <player> <amount>', function(pl, args, data){
			var p = new Player(args.player).init(data);
			p.data.maxJobs = parseInt(args.amount) || 1;
			p.save(data);

			tellPlayer(pl, "&aSet maxhomes of player '"+p.name+"' to "+(parseInt(args.amount) || 1)+'!');
			return true;

		}, 'player.setMaxJobs', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "amount",
				"type": "number",
				"min": -1,
			}
		]],
		['!player setMaxHomes <player> <amount>', function(pl, args, data){
			var p = new Player(args.player).init(data);
			p.data.maxHomes = parseInt(args.amount) || 1;
			p.save(data);
			tellPlayer(pl, "&aSet maxhomes of player '"+p.name+"' to "+(parseInt(args.amount) || 1)+'!');
			return true;

		}, 'player.setMaxHomes', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "amount",
				"type": "number",
				"min": -1,
			}
		]],
		['!player setChatColor <player> <color>', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.chatcolor = args.color;
			plo.save(data);
			tellPlayer(pl, "&aChanged chatcolor to "+args.color+"!");
			return true;
		}, 'player.setChatColor', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "color",
				"type": "color"
			}
		]],
		['!player resetChatColor <player>', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.chatcolor = null;
			plo.save(data);
			tellPlayer(pl, "&aReset chatcolor of player "+plo.name+"!");
			return true;
		}, 'player.resetChatColor', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
		]],
		['!player setChatEffect <player> <effect>', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.chatcolor = args.effect;
			plo.save(data);
			tellPlayer(pl, "&aChanged chateffect to "+args.effect+"!");
			return true;
		}, 'player.setChatColor', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "effect",
				"type": "coloreffect"
			}
		]],
		['!player resetChatEffect <player>', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.chateffect = null;
			plo.save(data);
			tellPlayer(pl, "&aReset chateffect of player "+plo.name+"!");
			return true;
		}, 'player.resetChatEffect', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
		]],
		['!player income <player>', function(pl, args, data){
			var p = new Player(args.player).init(data);
			var sb = pl.world.getScoreboard();
			tellPlayer(pl, getTitleBar("Player Income"));
			tellPlayer(pl, "&ePlayer: &r"+p.getNameTag(sb));
			tellPlayer(pl, "&eBasic income: &6&o"+getAmountCoin(p.data.pay)+"&r&e per &6&o"+getTimeString(p.data.payTime));
			var tleft = (p.data.lastPayed+p.data.payTime) - new Date().getTime();
			tellPlayer(pl, "&6&o"+getTimeString(tleft, ['ms'])+"&r&e until next pay.");
			var pjobs = p.getJobs(data);

			if(pjobs.length > 0) {
				for(var pj in pjobs) {
var pjob = pjobs[pj];
					tellPlayer(pl, "&eJob income for &r"+pjob.getDisplayName(data));
					tellPlayer(pl, "&e - Job salary: &6&o"+getAmountCoin(pjob.data.pay));
					var jleft = (p.getJob(pjob.name).lastPayed+pjob.data.payTime) - new Date().getTime();
					tellPlayer(pl, "&e - &6&o"+getTimeString(jleft, ['ms'])+"&r&e until next pay for &r"+pjob.getDisplayName(data));
				}
			}


			//print(p.toJson());
			return true;
		}, 'player.income', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			}
		]],
		['!player info <player>', function(pl, args, data){
			var p = new Player(args.player).init(data);
			var sb = pl.world.getScoreboard();
			var po = null;
			tellPlayer(pl, getTitleBar("Player Info", false));
			tellPlayer(pl, "&6&lPlayer Info For: &r"+p.getNameTag(sb));
			var now = new Date().getTime();
			tellPlayer(pl, "&6UUID: &e"+p.data.UUID);
			tellPlayer(pl, "&6First Login: &e&o"+getTimeString(now - p.data.firstLogin, ['ms'])+"&r &eago.");
			tellPlayer(pl, "&6Last Login: &e&o"+getTimeString(now - p.data.lastLogin, ['ms'])+"&r &eago.");
			tellPlayer(pl, "&6Money Pouch: &r:money:&e"+getAmountCoin(p.data.money));
			tellPlayer(pl, "&6Bounty: &r:money:&e"+getAmountCoin(p.getBounty(sb)));
			var mh = p.getMaxHomes(sb);
			var mj = p.getMaxJobs(sb);
			var hc = Object.keys(p.data.homes).length;
			var jc = Object.keys(p.data.jobs).length;
			tellPlayer(pl, "&6Max Homes: &e"+hc+"/"+(mh == -1 ? "&aInfinite" : mh)+"&r [&a:check: Set{suggest_command:!player setMaxHomes "+p.name+" }&r] [&dView{run_command:!player homes "+p.name+"}&r]");
			tellPlayer(pl, "&6Max Jobs: &e"+jc+"/"+(mj == -1 ? "&aInfinite" : mj)+"&r [&a:check: Set{suggest_command:!player setMaxJobs "+p.name+" }&r] [&dView{run_command:!player income "+p.name+"}&r]");
			var badgetxt = arrayFormat(p.data.badges, "&e - &b{VALUE}", "\n");
			tellPlayer(pl, "&6&lBadges:&r\n"+badgetxt);
			return true;
		}, 'player.info', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			}
		]],
		['!player homes <player>', function(pl, args, data){
			var apo = new Player(args.player).init(data);
			var w = pl.world;
			var sb = w.getScoreboard();
			tellPlayer(pl, getTitleBar("Player Homes"));
			tellPlayer(pl, "&6Player: "+apo.getNameTag(sb));
			for(var hname in apo.data.homes) {
var home = apo.data.homes[hname];
				tellPlayer(pl, "&6 - &b&l"+hname+"&r [&9Teleport{run_command:/tp "+pl.getName()+" "+home.x+" "+home.y+" "+home.z+"}&r]");
			}
		}, 'player.homes', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			}
		]],



		//PLAYER UTILITY
		['!bounty add <player> <amount>', function(pl, args, data){
			var plo = new Player(pl.getName()).init(data);
			var tplo = new Player(args.player).init(data);
			var ba = getCoinAmount(args.amount);
			var w = pl.world;
			var sb = w.getScoreboard();
			var sbo = sb.getObjective("bounty");
			if(sbo != null) {
				if(plo.data.money >= ba) {
					plo.data.money -= ba;
					var btax = Math.ceil(ba/100*5);
					var nb = ba-btax;
					if(sbo.hasScore(args.player)) {
						sbo.getScore(args.player).setValue(sbo.getScore(args.player).getValue()+ba);
					} else {
						sbo.createScore(args.player).setValue(ba);
					}
					plo.save(data);
					tellPlayer(pl, "&r:money:&e"+getAmountCoin(btax)+"&a has been taken as bounty tax!")
					if(tplo.name != plo.name) {
						executeCommand(pl, "/tellraw @a "+parseEmotes(strf(plo.getNameTag(sb)+"&a has put a bounty of &r:money:&e"+getAmountCoin(nb)+"&a on &r"+tplo.getNameTag(sb)+"&a!")));
					} else {
						executeCommand(pl, "/tellraw @a "+parseEmotes(strf(plo.getNameTag(sb)+"&a is so stupid, he gave himself a bounty of &r:money:&e"+getAmountCoin(nb)+"&a!")));
					}

				} else {
					tellPlayer(pl, "&cYou don't have enough money in your pouch to add the bounty!&r [&2Money Pouch{run_command:!myMoney}&r]");
				}
			} else {
				tellPlayer(pl, "&cScoreboard objective 'bounty' does not exists!");
			}

		}, 'bounty.add', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true,
			},
			{
				"argname": "amount",
				"type": "currency",
				"min": getCoinAmount("5K"),
			},
		]],
		['!topBounty', function(pl, args, data){
			var sb = pl.world.getScoreboard();
			var bo = sb.getObjective("bounty");
			var scores = [];
			if(bo != null) {
				var bos = bo.getScores();
				for(var b in bos) {
var bscore = bos[b];
					scores.push({
						name: bscore.getPlayerName(),
						value: bscore.getValue(),
					});
				}
			}
			scores = scores.sort(function(a,b){
				return b.value-a.value;
			});
			tellPlayer(pl, getTitleBar("Top Bounties"))
			for(var s in scores) {
var score = scores[s];
				var spl = new Player(score.name);
				spl.load(data);
				var pnum = parseInt(s)+1;
				tellPlayer(pl, " - "+pnum+". "+spl.getNameTag(sb)+"&r :money:&e"+getAmountCoin(score.value));
			}
		}, 'topBounty', []],
		['!withdraw <amount> [times]', function(pl, args, data){
			var p = new Player(pl.getName()).init(data);
			var w = pl.world;
			var times = args.times||1;
			var wamount = getCoinAmount(args.amount);
			if(p.data.money >= wamount*times) {
				for(var i = 0; i < times; i++) {
					var moneyItems = genMoney(w, wamount);
					p.data.money -= wamount;
					givePlayerItems(pl, moneyItems);
				}
				p.save(data);
				tellPlayer(pl, "&aWithdrawed &r:money:&e"+getAmountCoin(wamount*times)+"&r&a from money pouch!");
				return true;
			} else {
				tellPlayer(pl, "&cYou dont have that much money in your pouch!");
			}
			return false;
		}, 'withdraw', [
			{
				"argname": "amount",
				"type": "currency",
				"min": 1,
			},
			{
				"argname": "times",
				"type": "number",
				"min": 1,
			}
		]],
		['!deposit', function(pl, args, data){
			var p = new Player(pl.getName()).init(data);
			var w = pl.world;
			var mItem = pl.getMainhandItem();
			if(isItemMoney(mItem, w)) {
				var mval = getCoinAmount(mItem.getLore()[0]||"0C")*mItem.getStackSize();
				pl.setMainhandItem(null);
				p.data.money += mval;
				tellPlayer(pl, "&aAdded &r:money:&e"+getAmountCoin(mval)+"&a to money pouch.&r [&2:money: Money Pouch{run_command:!myMoney|show_text:Click here or do $o!myMoney}&r]");
				p.save(data);
			} else {
				tellPlayer(pl, "&cYou don't have valid money in your hand!");
			}
			return false;
		}, 'deposit'],
		['!depositAll', function(pl, args, data){
			var p = new Player(pl.getName()).init(data);
			var w = pl.world;
			var pnbt = pl.getEntityNbt();
			var mItems = getPlayerInvFromNbt(pnbt, w, function(item, itnbt, w){
				return isItemMoney(item, w);
			});
			var addAmount = 0;
			for(var i in mItems) {
var mItem = mItems[i];
				var mVal = getItemMoney(mItem, w)*mItem.getStackSize();

				addAmount += mVal;
				pl.removeItem(mItem, mItem.getStackSize());
			}
			if(addAmount > 0) {
				tellPlayer(pl, "&aAdded &r:money:&e"+getAmountCoin(addAmount)+"&a to money pouch!&r [&9View{run_command:!myMoney}&r]");
				p.data.money += addAmount;
				p.save(data);
			} else {
				tellPlayer(pl, "&cYou don't have money in your inventory!");
			}

		}, 'deposit', []],
		['!myMoney', function(pl, args, data){
			var pnbt = pl.getEntityNbt();
			var p = new Player(pl.getName()).init(data);
			var mp = p.data.money;
			var mi = getMoneyItemCount(pnbt, pl.world);
			var total = mp+mi;
			tellPlayer(pl, getTitleBar('Money Pouch'));
			tellPlayer(pl, ":danger: &4&oYou will lose 50% of your money pouch on death.&r :danger:");
			for(var v in VIRTUAL_CURRENCIES) {
var crncy = VIRTUAL_CURRENCIES[v];
				tellPlayer(pl, "&6"+crncy.displayName+": &r"+crncy.prefix+getAmountCoin(p.data[crncy.name])+crncy.suffix);
			}

			//tellPlayer(pl, "&6Arcade Tokens: &d:money:A"+getAmountCoin(p.data.armoney));
			//tellPlayer(pl, "&6Vote Tokens: &b:money:V"+getAmountCoin(p.data.vmoney));
			tellPlayer(pl, "&6Money Pouch: &r:money:&e"+getAmountCoin(mp)+"&r [&aWithdraw{suggest_command:!withdraw }&r] [&aWithdraw All{run_command:!withdraw "+getAmountCoin(mp)+"}&r]");
			tellPlayer(pl, "&6Inventory: &r:money:&e"+getAmountCoin(mi)+"&r [&aDeposit{run_command:!depositAll|show_text:$6Click to deposit all money from inventory.}&r]");
			tellPlayer(pl, "&cYou carry a total of &r:money:&e"+getAmountCoin(total));
			tellPlayer(pl, "&9You will lose &r:money:&e"+getAmountCoin(mi+Math.round(mp/2))+"&9 on death!");
			return true;
		}, 'myMoney'],
		['!myIncome', function(pl, args, data){
			var p = new Player(pl.getName());
			p.load(data);
			tellPlayer(pl, getTitleBar("Income"));
			tellPlayer(pl, "&eBasic income: &6&o"+getAmountCoin(p.data.pay)+"&r&e per &6&o"+getTimeString(p.data.payTime));
			var tleft = (p.data.lastPayed+p.data.payTime) - new Date().getTime();
			tellPlayer(pl, "&6&o"+getTimeString(tleft, ['ms'])+"&r&e until next pay.");
			var pjobs = p.getJobs(data);

			if(pjobs.length > 0) {
				for(var pj in pjobs) {
var pjob = pjobs[pj];
					tellPlayer(pl, "&eJob income for &r"+pjob.getDisplayName(data));
					tellPlayer(pl, "&e - Job salary: &6&o"+getAmountCoin(pjob.data.pay));
					var jleft = (p.getJob(pjob.name).lastPayed+pjob.data.payTime) - new Date().getTime();
					tellPlayer(pl, "&e - &6&o"+getTimeString(jleft, ['ms'])+"&r&e until next pay for &r"+pjob.getDisplayName(data));
				}
			}


			//print(p.toJson());
			return true;

		}, 'myIncome'],
		['!myStats [...matches]', function(pl, args, data){
			var pskills = getSkills(pl);
			var maxLvl = 32;
			tellPlayer(pl, getTitleBar("Stats"));
			var lmatches = arrayTransform(args.matches, function(arr_el){return arr_el.toLowerCase();});
			for(var p in pskills) {
var pskill = pskills[p];
				if(arrayOccurs(pskill.name.toLowerCase(), lmatches) || args.matches.length == 0) {
					var proc = Math.round(pskill.xp/pskill.maxXp*100);
					skillBar = progressBar(pskill.xp, pskill.maxXp, 10);
					var nxtLvl = pskill.level + 1;
					tellPlayer(pl,"&3&l"+pskill.name+" "+(pskill.level < maxLvl ? ("&e&l"+pskill.level+" "+skillBar+" &e&l"+nxtLvl+"&r"+" "+proc+"%&e - "+pskill.xp+"/"+pskill.maxXp) : "&r&a&lMAX LEVEL&r"));
				}
			}

			return true;
		}, 'myStats'],
		['!myColors', function(pl, args, data){
			var plo = new Player(pl.getName()).init(data);
			for(var r in _RAWCOLORS) {
var rcol = _RAWCOLORS[r];
				var colchar = (plo.data.chatcolors.indexOf(rcol) == -1 ? "\u2B1C":":box:");
				var coltext = "[&"+r+colchar+colchar+colchar+"{*|show_text:$"+r+rcol+"}&r]";
				tellPlayer(pl, coltext);
			}
		}, 'myColors'],
		['!myEmotes [...matches]', function(pl, args, data){
			var plo = new Player(pl.getName()).init(data);
			var sb = pl.world.getScoreboard();
			var showStr = "";
			var showEmotes = [];
			var unlocked = [];
			var showWidth = 10;

			for(var c in CHAT_EMOTES) {
var ce = CHAT_EMOTES[c];
				if(args.matches.length == 0 || arrayOccurs(c, args.matches, false, false) > 0) {
					var ec = new Emote(c).init(data, false);
					showEmotes.push(ec);
					if(plo.hasEmote(ec.name, sb, data)) {
						unlocked.push(ec);
					}
				}
			}

			tellPlayer(pl, getTitleBar('Emotes'));
			tellPlayer(pl, "&6"+unlocked.length+"/"+showEmotes.length+" Unlocked.");
			tellPlayer(pl, "&eHover emoji for info.");
			tellPlayer(pl, "[&9&l? Help{*|show_text:"+
				"$e$o$lI see chinese symbols!$r\n"+
				"You dont have the resourcepack installed, contact server admins!\n"+
				"$e$o$lHow do I unlock emotes?$r\n"+
				"Some are unlocked by default, some can be bought, some are permitted to certain teams and some require a specific task."+
				"}&r]"
			);
			var tellStr = "";
			for(var i in showEmotes) {
var em = showEmotes[i];
				var plHas = plo.hasEmote(em.name, sb, data);
				var plHasPerm = em.getPermission().init(data, false).permits(plo.name, sb, data);
				var infoStr = ":"+em.name+":\n$eName: $r"+em.name+"\n"+(em.data.hidden?"$c$lHidden Emote\n":"");
				var lockStr = (
					em.data.default ?
						"$6$lDEFAULT EMOTE$r":
						(plHasPerm ?
							"$5$lUNLOCKED WITH PERM$r":
							(plHas ?
								"$a$lUNLOCKED$r":
								"$c$lLOCKED$r"
							)
						)
					);
				var sellStr = (plHas ? "" : (!em.data.forSale ? "\n$cThis emote is not for sale." : "\n$cClick to buy "+em.name+" for $r:money:$e"+getAmountCoin(em.data.price)));
				var descStr = (em.data.desc != "" ? em.data.desc.replaceAll('&', '$')+"\n" : "");
				if(em.data.hidden && !plHas) { continue; }

				tellStr += (plHas ? "&r":"&8")+"[:"+em.name+":]{*|show_text:"+infoStr+descStr+lockStr+sellStr+"}&r ";
				if(parseInt(i) > 0 && (parseInt(i)+1) % showWidth === 0) {
					tellStr += "\n";
				}


			}

			tellPlayer(pl, tellStr);

		}, 'myEmotes'],
		['!myWarps [...matches]', function(pl, args, data){
			var w = pl.world;
			var params = getArgParams(args.matches);
			var ids = new Warp().getAllDataIds(data);

			var page = (parseInt(params.page)||1)-1;

			var defaultShowLen = 10;
			var minShowLen = 4;
			var maxShowLen = 32;

			var showLen = Math.max(Math.min((parseInt(params.show)||defaultShowLen), maxShowLen), minShowLen);
			var minShow = page*showLen;
			var maxShow = minShow+showLen;

			var curShow = 0;

			if(ids.length > 0) {
				tellPlayer(pl, getTitleBar("Your Warppp List",false));
				var tellIds = [];
				var pagenum = Math.floor(minShow/showLen)+1;
				for(var i in ids) {
var id = ids[i];
					if((args.matches.length == 0 || arrayOccurs(id, args.matches, false, false)) && new Warp(id).getPermission().init(data,false).permits(pl.getName(), pl.world.getScoreboard(), data)) {
						if(curShow >= minShow && curShow < maxShow && tellIds.indexOf(id) == -1){
							tellIds.push(id);
						}
						curShow++;
					}

				}
				if(args.matches.length > 0) {
					tellPlayer(pl, "&6&lSearching for:&e "+args.matches.join(", "));
				}
				tellPlayer(pl, "&6&lResults: &c"+curShow);
				var maxpages = Math.ceil(curShow/showLen);
				nxtPage = page+2;
				var navBtns =
					" &r"+(pagenum > 1 ? "[&9<< Previous{run_command:!myWarps "+args.matches.join(" ")+" -page:"+page+" -show:"+showLen+"}&r]" : "")+
					" "+(pagenum < maxpages ? "[&aNext >>{run_command:!myWarps "+args.matches.join(" ")+" -page:"+nxtPage+" -show:"+showLen+"}&r]" : "");
				tellPlayer(pl, "&6&lPage: &d&l"+pagenum+"/"+maxpages+navBtns);
				tellPlayer(pl,
					"[&cShow 5{run_command:!myWarps "+args.matches.join(" ")+" -show:5}&r] "+
					"[&cShow 10{run_command:!myWarps "+args.matches.join(" ")+" -show:10}&r] "+
					"[&cShow 15{run_command:!myWarps "+args.matches.join(" ")+" -show:15}&r] "+
					"[&cShow 20{run_command:!myWarps "+args.matches.join(" ")+" -show:25}&r]"
				);
				for(var i in tellIds) {
var id = tellIds[i];

					var wrp = new Warp(id).init(data);
					tellPlayer(pl, "&e - &b"+wrp.name+"&r "+(wrp.data.price > 0 ? "(:money:&e"+getAmountCoin(wrp.data.price)+"&r) " : "")+"&r[&e:sun: Teleport{run_command:!warp tp "+wrp.name+"}&r]");
				}
			} else {
				tellPlayer(pl, "&cThere are no registered warps");
			}
			return true;
		}, ['myWarps']],
		['!setHome <name>', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			var ppos = pl.getPos();
			plo.load(data);

			if(plo.data.maxHomes == -1 || Object.keys(plo.data.homes).length < plo.data.maxHomes) {
				plo.addHome(args.name, ppos.getX(), ppos.getY(), ppos.getZ());
				tellPlayer(pl, "&aAdded home '"+args.name+"'!");
				plo.save(data);
				return true;
			} else {
				tellPlayer(pl, "&cYou have reached maximum amount of homes! ("+plo.data.maxHomes+")");
			}

			return false;
		}, 'setHome'],
		['!delHome <name>', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			var ppos = pl.getPos();
			plo.load(data);
			if(plo.hasHome(args.name)) {//remove home
				plo.delHome(args.name);
				tellPlayer(pl, "&aRemoved home '"+args.name+"'!");
				plo.save(data);
				return true;
			} else {//Add new home
				tellPlayer(pl, "&cHome '"+args.name+"' does not exist!");
			}
			return false;
		}, 'delHome'],
		['!myHomes', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			plo.load(data);
			if(Object.keys(plo.data.homes).length > 0) {
				tellPlayer(pl, getTitleBar("Homes"));
				var maxHomeStr = " - &e"+Object.keys(plo.data.homes).length+"/"+(plo.data.maxHomes == -1 ? "&aInfinite":plo.data.maxHomes)+"&e Homes used";
				tellPlayer(pl, "[&a:check: Add{suggest_command:!setHome }&r]"+maxHomeStr);
				for(var i in plo.data.homes) {
var home = plo.data.homes[i];
					tellPlayer(pl, "&e - &9&o"+i+"&r&r [&bTeleport{run_command:!home "+i+"|show_text:Click to TP\n$eX:$c"+home.x+" $eY:$c"+home.y+" $eZ:$c"+home.z+" }&r] [&c:cross: Remove{run_command:!delHome "+i+"|show_text:Click to remove home.}&r]");
				}
				return true;
			} else {
				tellPlayer(pl, "&cYou don't have any homes!");
			}

			return false;
		}, 'myHomes'],
		['!defaultHome <name>', function(pl, args, data){
			var plo = new Player(pl.getName()).init(data);
			if(Object.keys(plo.data.homes).indexOf(args.name) > -1) {
				plo.data.defaultHome = args.name;
				plo.save(data);
				tellPlayer(pl, "&aSet default home to '"+args.name+"'");
				return true;
			} else {
				tellPlayer(pl, "&cYou don't have this home!");
			}
			return false;
		}, 'defaultHome'],
		['!home [name]', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			var ppos = pl.getPos();
			plo.load(data);
			var hname = args.name||plo.data.defaultHome;
			if(hname != null) {
				if(plo.hasHome(hname)) {
					var h = plo.data.homes[hname];
					pl.setPosition(h.x, h.y, h.z);
					return true;
				} else {
					tellPlayer(pl, "&cHome '"+args.name+"' does not exist!");
				}
			} else {
				tellPlayer(pl, "&cYou don't have an default home!");
			}
			return false;
		}, 'home'],
		['!heal', function(pl, args){
			pl.setHealth(parseFloat(pl.getMaxHealth()));
			pl.setHunger(20);
			pl.getMCEntity().func_71024_bL().func_75119_b(20);
			tellPlayer(pl, "&aYou have been healed!");
		}, 'heal'],
	]);


	//REGISTER REGION COMMANDS
	registerXCommands([
		//['', function(pl, args){}, '', []],
		['!region create <name>', function(pl, args, data){
			var region = new Region(args.name);
			region.save(data);
			tellPlayer(pl, "&aAdded region '"+args.name+"'!");
			return true;
		}, 'region.create', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": false
			}
		]],
		['!region info [name]', function(pl, args, data){
			if(args.name != null) {
				var region = new Region(args.name).init(data);
				tellPlayer(pl, getTitleBar("Region Info"));
				tellPlayer(pl, "&eRegion ID: &b&l"+region.name+"&r (&2:recycle: Refresh{run_command:!region info "+region.name+"}&r)");
				var regperm = region.getPermission().init(data);
				tellPlayer(pl, "&ePermission ID: &9&l"+regperm.name+"&r (&6:sun: Perm Info{run_command:!perms info "+regperm.name+"}&r)");
				var rpermname = region.getPermission().name;
				//tellPlayer(pl, "&eRegion Permission: &b&l"+rpermname+"&r "+(region.getPermission().exists(data) ? "(&6:sun: Info{run_command:!perms info "+rpermname+"}&r)"));
				tellPlayer(pl, "&eOwner: &r&o"+(region.data.owner == null ? CONFIG_SERVER.TITLE:region.data.owner+"&r (&c:cross: Kick{run_command:!region setOwner "+region.name+"|show_text:Kick "+region.data.owner+" from "+region.name+"}&r)")+"&r (&a+ Set{suggest_command:!region setOwner "+region.name+" |show_text:Set new owner for "+region.name+"}&r)");
				tellPlayer(pl, "&eFor Sale: "+
					(region.data.forSale ?
						"&a:check: Yes&r (&cPull off sale{run_command:!region setForSale "+region.name+" false}&r)"
						:
						"&c:cross: No&r (&aPut for sale{run_command:!region setForSale "+region.name+" true}&r)")
				);
				tellPlayer(pl, "&ePriority: &6"+region.data.priority+"&r [&6&lEDIT{suggest_command:!region setPrio "+region.name+" }&r]");
				var openVals = [
					"Interact",
					"Build",
				];
				for(var i in openVals) {
var opv = openVals[i];
					var rov = region.data['all'+opv];
					tellPlayer(pl,
						"&eOpen "+opv+": &b"+(rov ? "&a:check: Yes":"&c:cross: No")+
						"&r [&"+(rov ? "cDisable":"aEnable")+
						"{run_command:!region setOpen "+region.name+" "+opv.toLowerCase()+" "+(!rov).toString()+"}&r]"
					);
				}
				//tellPlayer(pl, "&eAll Interact: &6"+region.data.allInteract.toString());
				if(region.data.positions.length > 0) {
					//Cache positions for undo
					tellPlayer(pl, "&ePosition List:&r (&cClear{run_command:!region removePos "+region.name+" "+Object.keys(region.data.positions).join(" ")+"}&r)");
					for(var ri in region.data.positions) {
var regpos = region.data.positions[ri];
						tellPlayer(pl, "&5&l"+ri+"&r - &eXYZ1 &r(&b"+(regpos.xyz1||[]).join(", ")+"&r) &eXYZ2 &r(&b"+(regpos.xyz2||[]).join(", ")+"&r) (&c - Remove{run_command:!region removePos "+region.name+" "+ri+"}&r)");
					}
				} else {
					tellPlayer(pl, "&6Region has no positions! (This region still can be used for group-rules, like regions with positions set)");
				}

				return true;
			} else {
				var regids = new Region().getAllDataIds(data);
				var ppos = [
					pl.getPos().getX(),
					pl.getPos().getY()+4,
					pl.getPos().getZ(),
				];
				var showRegs = [];
				for(var r in regids) {
var regid = regids[r];
					var reg = new Region(regid).init(data);
					if(reg.hasCoord(ppos)) {
						showRegs.push(reg.name);
					}
				}
				if(showRegs.length > 0) {

					executeXCommand("!region list "+showRegs.join(" "), pl);
					return true;
				} else {
					tellPlayer(pl, "&cYou are not standing in any region!");
				}
			}
			return false;
		}, 'region.info', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true,
			},
		]],
		['!region setOpen <name> <action> <value>', function(pl, args, data){
			var reg = new Region(args.name).init(data);
			var rdatakey = 'all'+args.action.toLowerCase().rangeUpper(0, 1);
			var newval = (args.value == "true");
			reg.data[rdatakey] = newval;
			tellPlayer(pl, "&a"+(newval ? "Enabled" : "Disabled")+" open "+args.action+" of region '"+args.name+"'");
			reg.save(data);
		}, 'region.setOpen', [
			{
				"argname": "name",
				"type": "datahandler",
				"exists": true,
			},
			{
				"argname": "action",
				"type": "enum",
				"values": ["interact", "build", "attack"],
			},
			{
				"argname": "value",
				"type": "bool",
			},
		]],
		['!region setPrio <name> <priority>', function(pl, args, data){
			var reg = new Region(args.name);
			reg.load(data);
			reg.data.priority = parseInt(args.priority);
			reg.save(data);
			tellPlayer(pl, "&aChanged priority of "+args.name+" to "+args.priority+"!");
			return true;
		}, 'region.setPrio', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true,
			},
			{
				"argname": "priority",
				"type": "number",
				"min": 0,
			}
		]],
		['!region setForSale <name> <forSale>', function(pl, args, data){}, 'region.setForSale', []],
		['!region removePos <name> [...posNumbers]', function(pl, args, data){
			var region = new Region(args.name).init(data);
			//Cache pos for undo
			var undocmds = [];
			var newPos = [];

			for(var i in region.data.positions) {
var rpos = region.data.positions[i];
				if(args.posNumbers.indexOf(i.toString()) > -1) {
					undocmds.push("!region setPos "+region.name+" "+i+" 1 "+rpos.xyz1[0]+" "+rpos.xyz1[1]+" "+rpos.xyz1[2]);
					undocmds.push("!region setPos "+region.name+" "+i+" 2 "+rpos.xyz2[0]+" "+rpos.xyz2[1]+" "+rpos.xyz2[2]);
				} else {
					newPos.push(rpos);
				}
			}
			region.data.positions = newPos;

			tellPlayer(pl, "&aRemoved positions '"+args.posNumbers.join(" ")+"' of region '"+region.name+"'! &5[Undo]{run_command:!chain "+undocmds.join(";")+"}&r");

			region.save(data);
			return true;
		}, 'region.removePos', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true
			}
		]],
		['!region setPos <name> <posNum> <selectionNum> <x> <y> <z>', function(pl, args, data){//Wont be used by players, but region wand commands
			var region = new Region(args.name).init(data);
			var posArgs = ['x','y','z'];
			for(var i in posArgs) {
var pa = posArgs[i];
				args[pa] = args[pa].replace("~", pl.getPos()['get'+pa.toUpperCase()]());
			}
			var newPos = [
				args.x,
				args.y,
				args.z,
			];
			var newPosNum = Math.min(parseInt(args.posNum), region.data.positions.length);
			if(!(newPosNum in region.data.positions)) {
				region.data.positions[newPosNum] = {
					xyz1: null,
					xyz2: null,
				};
			}
			region.data.positions[newPosNum]['xyz'+args.selectionNum] = newPos;
			tellPlayer(pl, "&aSet selection #"+args.selectionNum+" of position #"+args.posNum+" of region '"+region.name+"' to "+newPos.join(", ")+"!");
			region.save(data);
			return true;
		}, 'region.setPos', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true,
			},
			{
				"argname": "posNum",
				"min": 0,
			},
			{
				"argname": "selectioNum",
				"min": 1,
				"max": 2,
			},
		]],
		['!region list [...matches]', function(pl, args, data){
			var w = pl.world;
			var params = getArgParams(args.matches);
			var ids = new Region().getAllDataIds(data);

			var page = (parseInt(params.page)||1)-1;

			var defaultShowLen = 10;
			var minShowLen = 4;
			var maxShowLen = 32;

			var showLen = Math.max(Math.min((parseInt(params.show)||defaultShowLen), maxShowLen), minShowLen);
			var minShow = page*showLen;
			var maxShow = minShow+showLen;

			var curShow = 0;

			if(ids.length > 0) {
				tellPlayer(pl, getTitleBar("Region List"));
				var tellIds = [];
				var pagenum = Math.floor(minShow/showLen)+1;
				for(var i in ids) {
var id = ids[i];
					if((args.matches.length == 0 || arrayOccurs(id, args.matches, false, false))) {
						if(curShow >= minShow && curShow < maxShow && tellIds.indexOf(id) == -1){
							tellIds.push(id)
						}
						curShow++;
					}

				}
				if(args.matches.length > 0) {
					tellPlayer(pl, "&6&lSearching for:&e "+args.matches.join(", "));
				}
				tellPlayer(pl, "&6&lResults: &c"+curShow);
				var maxpages = Math.ceil(curShow/showLen);
				var nxtPage = page+2;
				var navBtns =
					" &r"+(pagenum > 1 ? "[&9<< Previous{run_command:!region list "+args.matches.join(" ")+" -page:"+page+" -show:"+showLen+"}&r]" : "")+
					" "+(pagenum < maxpages ? "[&aNext >>{run_command:!region list "+args.matches.join(" ")+" -page:"+nxtPage+" -show:"+showLen+"}&r]" : "");
				tellPlayer(pl, "&6&lPage: &d&l"+pagenum+"/"+maxpages+navBtns);
				tellPlayer(pl,
					"[&cShow 5{run_command:!region list "+args.matches.join(" ")+" -show:5}&r] "+
					"[&cShow 10{run_command:!region list "+args.matches.join(" ")+" -show:10}&r] "+
					"[&cShow 15{run_command:!region list "+args.matches.join(" ")+" -show:15}&r] "+
					"[&cShow 20{run_command:!region list "+args.matches.join(" ")+" -show:25}&r]"
				);
				for(var i in tellIds) {
var id = tellIds[i];
					tellPlayer(pl, "&e - &b&l"+id+"&r (&6:sun: Info{run_command:!region info "+id+"}&r) (&c:cross: Remove{run_command:!region remove "+id+"}&r)");
				}
			} else {
				tellPlayer(pl, "&cThere are no registered regions!");
			}
			return true;
		}, ['region.list']],
		['!region remove <name>', function(pl, args, data){
			var region = new Region(args.name);
			region.remove(data);
			tellPlayer(pl, "&aRemoved region '"+region.name+"'!");
			return true;
		}, 'region.remove', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true
			}
		]],
		['!region setOwner <name> [player]', function(pl, args, data){
			var region = new Region(args.name).init(data);
			region.data.owner = args.player;
			tellPlayer(pl, "&aSet region owner to: "+(region.data.owner == null ? "&6&lGramados" : region.data.owner));
			region.save(data);
			return true;
		}, 'region.setOwner', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true
			}
		]],
		['!region select <name>', function(pl, args, data){
			var rayt = pl.rayTraceBlock(16, false, true);
			var region = new Region(args.name).init(data);
			var rpos = [
				rayt.getPos().getX(),
				rayt.getPos().getY(),
				rayt.getPos().getZ(),
			];
			region.addCoord(rpos).save(data);
			tellPlayer(pl, "&aAdded coords to region '"+region.name+"'! ("+rpos.join(", ")+")");
			return true;
		}, 'region.setPos', [ //Needs setPos permission (to keep modifying position at one perm!)
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true
			}
		]],
	]);


	//REGISTER TEAM COMMANDS
	var teamCommands = new CommandFactory("team");


	registerXCommands([
		['!team syncAll [removeNonExistend]', function(pl, args, data){
			var w = pl.world;
			var sb = w.getScoreboard();
			var sbteams = sb.getTeams();
			var dhteams = new Team().getAllDataIds(data);
			for(var s in sbteams) {
var sbt = sbteams[s];
				if(dhteams.indexOf(sbt.getName()) == -1) {
					tellPlayer(pl, "&cScoreboard team '"+sbt.getName()+"' has no synced data! Syncing...");
				}
			}

		}, 'team.syncAll', [
				{
					"argname": "removeNonExistend",
					"type": "bool"
				}
			]
		],
	]);

	//REGISTER UTIL COMMANDS
	registerXCommands([
		['!debug [...matches]', function(pl, args, data){
			var items = new Permission().getAllDataEntries(data);

			var params = getArgParams(args.matches);
			var tellStr = getTitleBar("Sample Items")+"\n"+
				genDataPageList(
					items,
					args.matches,
					parseInt(params.show||10),
					parseInt(params.page||1),
					"!debug {MATCHES} -page:{PAGE} -show:{SHOWLEN}",
					function(item, i){
						return "&r[&c&l"+item.name+"&r] "+"\n";
					},
					function(a, b) {
						if(a.name < b.name) return -1;
						if(a.name > b.name) return 1;
						return 0;
					},
					function (item, list) {
						return arrayOccurs(item.name, list, false, false) > 0;
					}
				);
			tellPlayer(pl, tellStr);
		}, 'debug', [
			{
				"argname": "rows",
				"type": "number",
				"min": 1,
				"max": 6,
			}
		]],
		['!fakemsg <player> <team> <team_color> [...message]', function(pl, args, data){
			executeCommand(pl, "/tellraw @a "+parseEmotes(strf(getChatMessage(args.player, args.team, args.team_color, args.message.join(" ")))));
		}, 'fakemsg', [
			{
				"argname": "team_color",
				"type": "color"
			}
		]],
		['!scare [player] [type]', function(pl, args, data){
			var tpl = args.player||pl.getName();
			var type = args.type||"creeper";
			var snds = {
				"creeper": "minecraft:entity.creeper.primed",
				"ghast": "minecraft:entity.ghast.hurt"
			};

			if(tpl != null) {
				executeCommand(pl, "/playsound "+snds[type]+" hostile "+tpl, tpl);
			}
		}, 'scare', [
			{
				"argname": "type",
				"type": "enum",
				"values": [
					"creeper",
					"ghast"
				]
			}
		]],
		['!thunder [player]', function(pl, args, data){
			var target = (args.player == null ? pl:pl.world.getPlayer(args.player));
			if(target != null) {
				var tpo = new Player(target.getName()).init(data);
				var tpos = target.getPos();
				pl.world.thunderStrike(tpos.getX(), tpos.getY(), tpos.getZ());
				executeCommand(pl, "/tellraw @a "+parseEmotes(strf(tpo.getNameTag(pl.world.getScoreboard())+"&a&l HAS MADE THE &r:seagull:&a&lHOLY SEAGULL&r:seagull:&a&l ANGRY!!!")));
			}
		}, 'thunder', []],
		
		['!sign edit <line> [...text]', function(pl, args, data){

			var rt = pl.rayTraceBlock(16, false, false);
			var rtb = rt.getBlock();
			//is sign
			if(["minecraft:wall_sign", "minecraft:standing_sign"].indexOf(rtb.getName()) > -1 && rtb.hasTileEntity()) {
				var rnbt = rtb.getTileEntityNBT();
				var newTxt = parseEmotes(strf(args.text.join(" ")));
				rnbt.setString("Text"+args.line.toString(), newTxt);
				rtb.setTileEntityNBT(rnbt);

				//==TEMPORARY: force block update
				//==Removed when Noppes includes updating in setTileEntityNBT
				var meta = rtb.getMetadata();
				rtb.setMetadata(0);
				rtb.setMetadata(1);
				rtb.setMetadata(meta);
				//==

				tellPlayer(pl, "&aEdited line #"+args.line.toString()+" of sign!");
			} else {
				tellPlayer(pl, "&cYou are not looking at a sign!");
			}

			return false;
		}, 'sign.edit', [
			{
				"argname": "slot",
				"type": "number",
				"min": 1,
				"max": 4,
			},
		]],
		['!help [...matches]', function(pl, args, data){
			var params = getArgParams(args.matches);
			var txt = getTitleBar("Commands")+"\n";
			var cmds = [];
			//Only get permiited commands
			for(var c in _COMMANDS) {
var _cmd = _COMMANDS[c];
				if(new Permission(_cmd.perm).init(data).permits(pl.getName(), pl.world.scoreboard, data)) {
					cmds.push(_cmd);
				}
			}
			txt += genDataPageList(
				cmds,
				args.matches,
				parseInt(params.show||10),
				parseInt(params.page||1),
				"!help {MATCHES} -page:{PAGE} -show:{SHOWLEN} -sort:{SORT}",
				function(cmd, i) {
					return "&c"+cmd.usage+"{suggest_command:"+getCommandNoArg(cmd.usage)+"}&r\n";
				},
				function(a, b) {
					var aa = getCommandNoArg(a.usage);
					var bb = getCommandNoArg(b.usage);
					if(aa < bb) return -1;
					if(aa > bb) return 1;
					return 0;
				},
				function(cmd, list) {
					return arrayOccurs(cmd.usage, list, false, false);
				},
				(params.sort||"").toLowerCase() == "desc"
			);
			tellPlayer(pl, txt);
		}, 'help'],
		['!command info <...command>', function(pl, args, data){
			var argcmd = args.command.join(" ").trim();
			for(var c in _COMMANDS) {
var cmd = _COMMANDS[c];
				if(getCommandName(cmd.usage) == argcmd) {
					tellPlayer(pl, getTitleBar("Command Info"));
					tellPlayer(pl, "&eCommand: &b"+getCommandNoArg(cmd.usage).trim());
					tellPlayer(pl,
						"&ePermission ID: &9&l"+
						cmd.perm+"&r"+
						(	new Permission(cmd.perm).exists(data) ?
							" (&6:sun: Info{run_command:!perms info "+cmd.perm+"}&r)"
							:
							"(&d:recycle: Regenerate{run_command:!chain !perms create "+cmd.perm+";!command info "+argcmd+"|show_text:Command exists, but permission does not.\nClick to regenerate.}&r)"
						)
					);
					return true;
				}
			}
			tellPlayer(pl, "&cNo commands found.");
			return true;
		}, 'command.info'],
		['!chain <...commands>', function(pl, args, data){
			var acmds = args.commands.join(" ").split(";");
			for(var a in acmds) {
var acmd = acmds[a];
				var excmd = acmd.trim().replace(/\s+/g, ' ');
				if(excmd.length != "") {
					executeXCommand(excmd, pl);
				}
			}
			return true;
		}, 'chain'],
		['!fakeleave [...players]', function(pl, args){
			var pcol = '&f';
			var sb = pl.world.getScoreboard();
			var spl = (args.players.length > 0 ? args.players : [pl.getName()]);
			for(var ss in spl) {
var sp = spl[ss];
				var t = sb.getPlayerTeam(sp);
				if(t != null) {
					var tc = t.getColor();
					if(tc != null) {
						pcol = '&'+getColorId(tc);
					}
				}

				executeCommand(pl, '/tellraw @a '+strf(pcol+sp+' &r&eleft the game', true));
			}
		}, 'fakeleave'],
		['!fakejoin [...players]', function(pl, args){
			var pcol = '&f';
			var sb = pl.world.getScoreboard();
			var spl = (args.players.length > 0 ? args.players : [pl.getName()]);
			for(var ss in spl) {
var sp = spl[ss];
				var t = sb.getPlayerTeam(sp);
				if(t != null) {
					var tc = t.getColor();
					if(tc != null) {
						pcol = '&'+getColorId(tc);
					}
				}

				executeCommand(pl, '/tellraw @a '+strf(pcol+sp+' &r&ejoined the game', true));
			}
		}, 'fakejoin'],
		['!version', function(pl, args){
			tellPlayer(pl, getTitleBar("Server Software"));
			tellPlayer(pl, "&e&l"+CONFIG_SERVER.NAME+" Version: &c&l"+SCRIPT_VERSION);
			tellPlayer(pl, "&e&lSubscription: &9&lPrototype Edition");
			tellPlayer(pl, "&e&lProgrammed by: &r&lRunonstof&e and &r&lslava_110");
			tellPlayer(pl, "&6Contact Runonstof for further questions. Or visit the &6&nDiscord Server&r");
		}, "version"],
		['!listEnchants [...matches]', function(pl, args){
			var ENCHANTS = REGISTRY.ENCHANTMENTS.getValues();
			tellPlayer(pl, getTitleBar("All Registered Enchantments", false));
			for(var i in ENCHANTS) {
var ench = ENCHANTS[i];
				var ename = REGISTRY.ENCHANTMENTS.getKey(ench);
				var eid = REGISTRY.ENCHANTMENTS.getID(ench);
				if(args.matches.length == 0 || arrayOccurs(ename, args.matches)) {
					tellPlayer(pl, "&e - &b"+ename+"&r (ID: "+eid+")");
				}
			}
		}, 'listEnchants'],
		['!listPotions [...matches]', function(pl, args){
			var POTIONS = REGISTRY.POTIONS.getValues();
			tellPlayer(pl, getTitleBar("All Registered Potion Effects", false));
			for(var i in POTIONS) {
var pot = POTIONS[i];
				var pname = REGISTRY.POTIONS.getKey(pot);
				var pid = REGISTRY.POTIONS.getID(pot);
				if(args.matches.length == 0 || arrayOccurs(pname, args.matches) > 0) {
					tellPlayer(pl, "&e - &b"+pname+"&r (ID: "+pid+")");
				}
			}
		}, 'listPotions'],
		['!listBiomes [...matches]', function(pl, args){
			var BIOMES = REGISTRY.BIOMES.getValues();
			tellPlayer(pl, getTitleBar("All Registered Biomes", false));
			for(var i in BIOMES) {
var bio = BIOMES[i];
				var bname = REGISTRY.BIOMES.getKey(bio);
				var bid = REGISTRY.BIOMES.getID(bio);
				if(args.matches.length == 0 || arrayOccurs(bname, args.matches) > 0) {
					tellPlayer(pl, "&e - &b"+bname+"&r (ID: "+bid+")");
				}
			}
		}, 'listBiomes'],
		['!listEntities [...matches]', function(pl, args){
			var ENTITIES = REGISTRY.ENTITIES.getValues();
			tellPlayer(pl, getTitleBar("All Registered Entities", false));
			for(var i in ENTITIES) {
var ent = ENTITIES[i];
				var bname = REGISTRY.ENTITIES.getKey(ent);
				var bid = REGISTRY.ENTITIES.getID(ent);
				if(args.matches.length == 0 || arrayOccurs(bname, args.matches) > 0) {
					tellPlayer(pl, "&e - &b"+bname+"&r (ID: "+bid+")");
				}
			}
		}, 'listEntities'],
		['!listSkills [...matches]', function(pl, args){
			if(ReskillableRegistry != null) {
				var SKILLS = ReskillableRegistry.SKILLS.getValues();
				tellPlayer(pl, getTitleBar("All Registered Skills", false));
				for(var i in SKILLS) {
var skill = SKILLS[i];
					var bname = ReskillableRegistry.SKILLS.getKey(skill);
					var bid = ReskillableRegistry.SKILLS.getID(skill);
					var obj = skill.getKey().replace(/\w+\.(\w+)/g, '$1_xp');
					if(args.matches.length == 0 || arrayOccurs(bname, args.matches) > 0) {
						tellPlayer(pl, "&e - &b"+bname+"&r (ID: "+bid+", Objective: "+obj+")");
					}
				}
			} else {
				tellPlayer(pl, "&6This command requires the mod 'Reskillable' to be installed.");
			}
		}, 'listSkills'],
		['!tellraw <player> <...message>', function(pl, args){
			var msg = args.message.join(' ');
			executeCommand(pl, '/tellraw '+args.player+' '+parseEmotes(strf(msg, true)));
			return true;
		}, 'tellraw'],
		['!tellaction <player> <...message>', function(pl, args, data){
			var msg = args.message.join(' ');
			executeCommand(pl, "/title "+args.player+" actionbar "+parseEmotes(strf(msg)));
			return true;
		}, 'tellaction'],
		['!telltitle <player> <...message>', function(pl, args, data){
			var msg = args.message.join(' ');
			executeCommand(pl, "/title "+args.player+" title "+parseEmotes(strf(msg)));
			return true;
		}, 'telltitle'],
		['!setMagAmmo <amount>', function(pl, args){
			var mItem = pl.getMainhandItem();
			if(!mItem.isEmpty()) {
				var mnbt = mItem.getNbt();
				if(mnbt.has('Ammo')) {
					mnbt.setInteger('Ammo', args.amount);
					//Item.setNbt(mnbt);
					tellPlayer(pl, "&aSet ammo to "+args.amount+"!");
					return true;
				}
			}
			tellPlayer(pl, "&cYou don't have an magazine in your hand!");

			return false;
		}, 'setMagAmmo', [
			{
				"argname": "amount",
				"type": "number",
				"min": 0
			}
		]],
		['!giveMoney <amount> [...players]', function(pl, args){
			var w = pl.world;
			var plrs = [];
			objArray(w.getAllPlayers()).forEach(function(wp){
				plrs.push(wp.getName());
			});
			var am = getCoinAmount(args.amount);
			if(args.players.length == 0) { args.players = [pl.getName()]; }
			var mn = genMoney(w, am);

			for(var i in args.players) {
var apl = args.players[i];
				if(plrs.indexOf(apl) > -1) {
					for(var m in mn) {
var mi = mn[m];
						w.getPlayer(apl).giveItem(mi);
					}
				}
			}

			tellPlayer(pl, "&aGave &r:money:&e"+getAmountCoin(am)+"&a to players: '"+args.players.join(', ')+"'");
			for(var a in args.players) {
var apl = args.players[a];
				if(playerIsOnline(w, apl)) {
					executeCommand(pl, "/tellraw "+apl+" "+parseEmotes(strf("&aYou got &r:money:&e"+getAmountCoin(am))));
				}
			}
		}, 'giveMoney', [
			{
				"argname": "amount",
				"type": "currency",
				"min": 1
			}
		]],
		['!takeMoney <amount> [...players]', function(pl, args, data){
			var w = pl.world;
			var plrs = [];
			objArray(w.getAllPlayers()).forEach(function(wp){
				plrs.push(wp.getName());
			});
			var am = getCoinAmount(args.amount);
			if(args.players.length == 0) { args.players = [pl.getName()]; }

			for(var i in args.players) {
var ap = args.players[i];
				var apo = new Player(ap).init(data);
				apo.data.money -= am;
				apo.save(data);
			}
		}, 'takeMoney', [
			{
				"argname": "amount",
				"type": "currency",
				"min": 1
			}
		]],
		['!giveVMoney <amount> [...players]', function(pl, args, data){
			var w = pl.world;

			var am = getCoinAmount(args.amount);
			if(args.players.length == 0) { args.players = [pl.getName()]; }


			for(var i in args.players) {
var apl = args.players[i];
				var apo = new Player(apl);
				if(apo.exists(data)) {
					apo.load(data);
					apo.data.vmoney += am;
					apo.save(data);

				}

			}

			tellPlayer(pl, "&aGave &b:money:"+getAmountCoin(am)+"&a to players: '"+args.players.join(', ')+"'");
			for(var a in args.players) {
var apl = args.players[a];
				if(playerIsOnline(w, apl)) {
					executeCommand(pl, "/tellraw "+apl+" "+parseEmotes(strf("&aYou got &b:money:"+getAmountCoin(am))));
				}
			}
		}, 'giveMoney', [
			{
				"argname": "amount",
				"type": "currency",
				"min": 1
			}
		]],
		['!giveArMoney <amount> [...players]', function(pl, args, data){
			var w = pl.world;

			var am = getCoinAmount(args.amount);
			if(args.players.length == 0) { args.players = [pl.getName()]; }


			for(var i in args.players) {
var apl = args.players[i];
				var apo = new Player(apl);
				if(apo.exists(data)) {
					apo.load(data);
					apo.data.armoney += am;
					apo.save(data);

				}

			}

			tellPlayer(pl, "&aGave &d:money:"+getAmountCoin(am)+"&a to players: '"+args.players.join(', ')+"'");
			for(var a in args.players) {
var apl = args.players[a];
				if(playerIsOnline(w, apl)) {
					executeCommand(pl, "/tellraw "+apl+" "+parseEmotes(strf("&aYou got &d:money:"+getAmountCoin(am))));
				}
			}
		}, 'giveMoney', [
			{
				"argname": "amount",
				"type": "currency",
				"min": 1
			}
		]],
		['!copyCoords [player]', function(pl, args, data){
			var pname = args.player||pl.getName();
			if(playerIsOnline(pl.world, pname)) {
				var telltxt = getTitleBar("Coords", false)+"\n\n"+
				"&aX: &c{XCOORD} &aY: &c{YCOORD} &aZ: &c{ZCOORD}\n\n"+
				"&rCopy coords as:\n"+
				" - &a[TP Command]{suggest_command:/tp @p {XCOORD} {YCOORD} {ZCOORD}|show_text:$aClick to get coords as /tp command.}&r\n"+
				" - &a[Formatted XYZ]{suggest_command:X:{XCOORD} Y:{YCOORD} Z:{ZCOORD}|show_text:$aClick to get coords nicely formatted.}&r\n"+
				" - &a[Numbers Only]{suggest_command:{XCOORD} {YCOORD} {ZCOORD}|show_text:$aClick to get coords numbers only.}&r\n"+
				" - &a[Selector]{suggest_command:x={XCOORD},y={YCOORD},z={ZCOORD}|show_text:$aClick to get coords as selector.}&r\n";

				tellPlayer(pl, telltxt.fill({
					"XCOORD": Math.floor(pl.getX()),
					"YCOORD": Math.floor(pl.getY()),
					"ZCOORD": Math.floor(pl.getZ()),
				}));

			} else {
				tellPlayer(pl, "&cPlayer is not online!");
			}
		}, 'copyCoords'],
		//Inventory load/save
		['!inv save <name>', function(pl, args, data){
			var apo = new Player(pl.getName());
			apo.load(data);

			var inv = pl.getMCEntity().field_71071_by;
			var inventory = [];
			for (var i = 0; i < inv.field_70462_a.length; i++) {
				inventory.push(API.getIItemStack(inv.field_70462_a.get(i)).getItemNbt().toJsonString());
			}

			apo.data.inventories.push([args.name, inventory]);
			apo.save(data);
			tellPlayer(pl, "&aInventory saved as '"+args.name+"'");

			return true;

		}, 'inv.save'],
		['!inv load <name>', function(pl, args, data){
			var w = pl.world;
			var apo = new Player(pl.getName());
			apo.load(data);

			var inventory = apo.getInventory(args.name);
			if(!inventory){
				tellPlayer(pl, "&cInventory '"+args.name+"' not found");
				return false;
			}

			var inv = pl.getMCEntity().field_71071_by;
			inv.func_174888_l(); //Clear

			for (var i = 0; i < inventory.length; i++) {
				if(inventory[i] && API.stringToNbt(inventory[i]).getString("id")!="minecraft:air")
				inv.field_70462_a.set(i, w.createItemFromNbt(API.stringToNbt(inventory[i])).getMCItemStack());
			}

			inv.func_70296_d(); //Mark dirty
			pl.getMCEntity().field_71069_bz.func_75142_b(); //Detect and send changes

			tellPlayer(pl, "&aInventory '"+args.name+"' succefully loaded");
			return true;

		}, 'inv.load'],
		['!inv remove <name>', function(pl, args, data){
			var w = pl.world;
			var apo = new Player(pl.getName());
			apo.load(data);

			var inventory = apo.getInventory(args.name);
			if(!inventory){
				tellPlayer(pl, "&cInventory '"+args.name+"' not found");
				return false;
			}
			apo.removeInventory(args.name);
			apo.save(data);
			tellPlayer(pl, "&aInventory '"+args.name+"' succefully removed");
			return true;

		}, 'inv.save']
	]);

	//REGISTER COMMANDS
	var warpCommands = new CommandFactory("warp");
	warpCommands
		//Set some things for default commands
		.on("create", function(warp, pl, args, data){
			warp.data.pos = {
				x: pl.getPos().getX(),
				y: pl.getPos().getY(),
				z: pl.getPos().getZ(),
			};
		})
		.addInfoText(function(warp){
			return "&6&lTeleport Price: &r:money:&e"+getAmountCoin(warp.data.price)+"&r [&a:check: Set{suggest_command:!warp setPrice "+warp.name+" }&r]\n";
		})
		.addInfoText(function(warp){
			var wpos = warp.data.pos;
			return "&aX: &c"+wpos.x+"&a Y: &c"+wpos.y+"&a Z: &c"+wpos.z;
		})
		.setListTransformer(
			function(warp, pl, args, data){
				var sb = pl.world.getScoreboard();
				var wperm = warp.getPermission().init(data).permits(pl.getName(), sb, data);
				var canUseTp = new Permission("warp.tp").init(data).permits(pl.getName(), sb, data);
				var tdata = {
					"PRICE": "&r:money:&e"+getAmountCoin(warp.data.price)+"&r",
					"TPBTN": (canUseTp && wperm ? "(&9Teleport{run_command:!warp tp "+warp.name+"}&r)" : ""),
				};

				return ("&e - &b"+warp.name+"&r {PRICE} {TPBTN}\n").fill(tdata);
			}
		)
		.genDefault()
		.addSettable("price", function(price){
			return getCoinAmount(price);
		}, [
			{
				"argname": "price",
				"type": "currency",
				"min": 0
			}
		], {
			"val": "&r:money:&e{price}"
		})
		.add("tp <name>", function(warp, pl, args, data){
			var plo = new Player(pl.getName()).init(data);
			if(warp.getPermission().init(data).permits(pl.getName(), pl.world.getScoreboard(), pl.world.getStoreddata())) {
				if(plo.data.money >= warp.data.price) {
						plo.data.money -= warp.data.price;
						tellPlayer(pl, "&aTook &r:money:&e"+getAmountCoin(warp.data.price)+"&a as warp tax!");
						pl.setPosition(warp.data.pos.x, warp.data.pos.y, warp.data.pos.z);
						plo.save(data);
						return true;
				} else {
					tellPlayer(pl, "&cYou don't have enough money!");
				}
			} else {
				tellPlayer(pl, "&cYou don't have access to this warp!");
			}
			return false;
		})
		.register();


//Get data from IData
function data_get(data, keys) {
	var get = {};
	for(var k in keys) {
		//var key = keys[k];
		get[keys[k]] = data.get(keys[k]);
		//if(get[keys[k]] == null) { get[keys[k]] = keys[k]; }
	}

	return get;
}

//Add data to IData if it doesn't exist
function data_register(data, vals) {
	for(var k in vals) {
var val = vals[k];
		if(data.get(k) == null) { data.put(k, val); }
	}
}

//Add data to IData even if it does exist
function data_overwrite(data, keys, vals) {
	if(typeof(keys) == typeof(undefined) || keys === null) { keys = []; }
	if(typeof(vals) == typeof(undefined) || vals === null) { vals = []; }
	if(typeof(keys) == 'string') { keys = [keys]; }
	if(typeof(vals) == 'string') { vals = [vals]; }

	for(var k in keys) {
		var key = keys[k];
		var val = vals[k];
		data.put(key, val);
	}
}
//Compare 2 IItemStacks
function isItemEqual(stack, other, ignoreNbt){
	if(typeof(ignoreNbt) == typeof(undefined) || ignoreNbt === null) { ignoreNbt = false; }
	if (!other || other.isEmpty()) {
		return false;
	}

	var stackNbt = stack.getItemNbt();
	stackNbt.remove('Count');
	var otherNbt = other.getItemNbt();
	otherNbt.remove('Count');

	if(ignoreNbt) {
		if(stackNbt.getString("id") == otherNbt.getString("id")) {
			return true;
		}
	} else {
		if(isNbtEqual(stackNbt, otherNbt)) {
			return true;
		}
	}

	return false;
}


function ENbt(nbtObject) {
    this.nbt = nbtObject; /* INbt */
    this.copy = function() {
        return new ENbt(API.stringToNbt(this.nbt.toJsonString()));
    };
    this.get = function(path) {
        var paths = path.toString().split(".");
        var cur = this.nbt;
        for(var pa in paths) {
var p = paths[pa];
            var keyType = getNbtType(cur.getType(p));
            if(keyType != "List") {
                //getString, getInteger etc
                cur = cur["get"+keyType](p);
            } else {
                cur = cur["get"+keyType](p, cur.getListType(p));
            }
        }
        return cur;
    };
    this.toJsonString = function() { return this.nbt.toJsonString(); }
    this.toJsonObj = function() { return JSON.parse(this.toJsonString()); }
}

function nbtCopy(nbt) {
	return API.stringToNbt(nbt.toJsonString());
}

function nbtToObject(nbt) {
    return nbt.toJsonString().replace(/"([\w:]+?)": (\d)\w/g, '"$1": $2');
}

function nbtItem(nbt, w) {
	if(typeof(nbt) == 'string') { nbt = API.stringToNbt(nbt); }
	var item = w.createItemFromNbt(nbt);
	return item;
}

function nbtGetList(nbt, list) {
    return (nbt.has(list) ? nbt.getList(list, nbt.getListType(list)) : null);
}

//Turn String[] with item nbts to IItemStack[]
function nbtItemArr(nbtArr, w) {
    var itemArr = [];
	for(var itemData in nbtArr) {
var item = nbtArr[itemData];
        itemArr.push(nbtItem(item, w));
    }

    return itemArr;
}

function isNbtEqual(nbt, otherNbt) {
    return nbt.toJsonString() == otherNbt.toJsonString();
}

function nbtHasSameData(nbt, onbt) {
    //TODO:compare keys of nbt
}function givePlayerItems(player, stacks, pnbt) {
	if(typeof(pnbt) == typeof(undefined) || pnbt === null) { pnbt = null; }
    var w = player.world;
    if(pnbt == null) {
        pnbt = player.getEntityNbt();//Dont over-use this one
    }
    var invcnt = getPlayerInvCount(pnbt, w);
    for(var s in stacks) {
var stack = stacks[s];
        if(invcnt < 36) {
            //Player inv not full
            player.giveItem(stack);
            invcnt++;
        } else {
            player.dropItem(stack);
        }
    }
}

//Made for givePlayerItems (does not include armor and offhand)
function getPlayerInvCount(pnbt, w) {
    return getPlayerInvFromNbt(pnbt, w, function(item, itnbt){
        //Exclude armor slots and offhand
        return ["-106", "100", "101", "102", "103"].indexOf(itnbt.getByte('Slot').toString()) == -1;
    }).length;
}

function getArrItemCount(array, itemstack, ignoreNbt) {
	if(typeof(ignoreNbt) == typeof(undefined) || ignoreNbt === null) { ignoreNbt = false; }
	var icount = 0;
	for(var pi in array) {
var pitem = array[pi];
		var pinbt = pitem.getItemNbt();
		var scount = parseInt(pinbt.getByte('Count'));
		if(isItemEqual(itemstack, pitem, ignoreNbt))
			icount += scount;
	}

	return icount;
}

function getPlayerInvFromNbt(pnbt, w, filterFn) {
	if(typeof(filterFn) == typeof(undefined) || filterFn === null) { filterFn = null; }
	var pinv = pnbt.getList('Inventory', pnbt.getListType('Inventory'));
	var pitems = [];
	for(var p in pinv) {
var pin = pinv[p];
		var pitm = w.createItemFromNbt(API.stringToNbt(pin.toJsonString()));
        //pin (INbt) contains key "Slot"
        //pitm.getItemNbt() does not, thats why pin is passed
        if( (filterFn == null ? true : filterFn(pitm, pin, w)) ) {
            pitems.push(pitm);
        }
	}

	return pitems;
}

function getInvItemCount(pnbt, itemstack, w, ignoreNbt) {
	return getArrItemCount(getPlayerInvFromNbt(pnbt, w), itemstack, ignoreNbt);
}

function playerIsOnline(world, player) {
	var isOnline = false;
	var pl = world.getAllPlayers();
	for(var p in pl) {
		if(pl[p].getName() == player.toString()) {
			isOnline = true;
			break;
		}
	}
	return isOnline;
}

function getChatMessage(player, team, color, message) {
	//time
	var curTimeStr = new Date().toLocaleTimeString("fr-FR").split(":");
	curTimeStr.pop();
	curTimeStr = curTimeStr.join(":");
	var ccode = getColorId(color);
	return "["+curTimeStr+"] &l&"+ccode+"[&"+ccode+team+"&r &"+ccode+player+"&l&"+ccode+"] -> &r"+message;
}

function getChatTag(player, team, color) {
	var ccode = getColorId(color);
	return "&"+ccode+"&l[&"+ccode+"&o"+team+"&r &"+ccode+player+"&"+ccode+"&l]";
}
function normalizePos(pos) {
	return [
		pos.getX(),
		pos.getY(),
		pos.getZ(),
	];
}
function getChunk(pos) {
    return [Math.floor(pos.x/16), Math.floor(pos.z/16)];
}

function getChunkCoords(chunk) {
    return [
        chunk[0]*16,
        chunk[1]*16,
        (chunk[0]+1)*16 - 1,
        (chunk[1]+1)*16 - 1,
    ];
}

function inChunk(pos, chunk) {
    var coords = getChunkCoords(chunk);
    return (
        pos.x >= coords[0],
        pos.z >= coords[1],
        pos.x <= coords[2],
        pos.z >= coords[3]
    );
}
registerDataHandler("automsg", AutoMsg);
function AutoMsg(name) {
    DataHandler.apply(this, ['automsg', name]);

    this.addData({
		"msg": "Default AutoMessage",
        "enabled": true,
        "mode": "interval",
        "interval": getStringTime("5min"),
        "lastSend": 0,
	});

    this.broadcast = function(pl, target) {
        executeCommand(pl, "/tellraw "+target+" "+parseEmotes(strf(this.msg)));
        return this;
    };

    this.canSend = function(){
        return new Date().getTime() >= this.lastSend+this.interval;
    };
}
registerDataHandler("badge", Badge);
function Badge(name) {
    DataHandler.apply(this, ["badge", name]);

    this.addData({
		"displayName": "New Badge",
        "emote": "medal_bronze",
        "desc": "",
	});
}
registerDataHandler("chatchannel", ChatChannel);
function ChatChannel(name) {
	DataHandler.apply(this, ['chatchannel', name]);
	Permittable.apply(this, []); //add getPermission etc

	this.addData({
		"displayName": name,
		"players": [],
		"color": "blue",
		"desc": "",
	});
	this.addPlayers = function(players){
		for(var p in players) {
var player = players[p];
			this.data.players.push(player);
		}
		return this;
	};
	this.getColor = function(cr) {
		cr = cr||'&';
		return cr+getColorId(this.data.color);
	};
	this.getName = function() {
		return this.getColor()+this.data.displayName+"&r";
	};
	this.getTag = function(prefix, cr) {
		cr = cr||'&';
		return this.getColor(cr)+cr+"l[#"+this.data.displayName+(prefix||'')+"]"+cr+"r";
	};
	this.removePlayers = function(players) {
		var np = [];
		for(var p in this.data.players) {
var player = this.data.players[p];
			if(players.indexOf(player) == -1) {
				np.push(player);
			}
		}
		this.data.players = np;
		return this;
	};
	this.getPlayers = function(world) { //returns all online IPlayers
		var plr = world.getAllPlayers();
		var plrs = [];
		for(var p in plr) {
var pl = plr[p];
			if(this.data.players.indexOf(pl.getName()) > -1) {
				plrs.push(pl);
			}
		}
		return plrs;
	};
	this.broadcast = function(w, msg, exc) {
		if(typeof(exc) == typeof(undefined)) { exc = []; }
		var plrs = w.getAllPlayers();
		for(var p in plrs) {
var pl = plrs[p];
			if(this.data.players.indexOf(pl.getName()) > -1 && exc.indexOf(pl.getName()) == -1) {
				tellPlayer(pl, msg);
			}
		}
		return this;
	};

	this.onCreate(function(self, data){
		var perm = self.getPermission();
		perm.data.enabled = false;
		perm.save(data);
	});
}
registerDataHandler("emote", Emote);
function Emote(name) {
  DataHandler.apply(this, ['emote', name]);
  Permittable.apply(this, ['emotes']);

  this.addData({
		"price": 0,
    "desc": "",
    "default": false, //If everyone has the emote by default
    "forSale": false, //If emote can be bought
    "hidden": false, //Will be hidden from !myEmotes, unless player has it, if forSale == true emote can still be bought via command
	});

  this.getCode = function(){
      return CHAT_EMOTES[this.name]||"?";
  };
}
registerDataHandler("giftcode", GiftCode);

function GiftCode(name) {
	DataHandler.apply(this, ['giftcode', name]);
	Permittable.apply(this, ['giftcodes']);
	this.addData({
		"code": "",
        "uses": 0,
        "items": [],
		"money": 0,
		"emotes": [],
		"players": [], //redeemed players
	});

	this.onCreate(function(self, data){
		var perm = self.getPermission();
        perm.data.enabled = false;
        perm.save(data);
    });

    this.generateCode = function(){
        var code = "";
        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for (var i = 0; i < 6; i++)
            code += chars.charAt(Math.floor(Math.random() * chars.length));

        this.data.code = code;
    };

    this.getUsesLeft = function(pl){
        if(this.data.uses == -1) return "infinite";
        return this.data.uses;
    };

    this.redeem = function(pl, data){
		var perm = this.getPermission().init(data);
		if(!perm.permits(pl.getName(), pl.world.getScoreboard(), data)){
			tellPlayer(pl, "&cYou don't have permission to use this code!");
			return false;
		}

		var p = new Player(pl.getName()).init(data);
		if(this.data.uses == 0){
			tellPlayer(pl, "&cMax uses reached");
			return false;
		}
		if(this.data.players.indexOf(pl.getName()) > -1){
			tellPlayer(pl, "&cYou already activated this code");
			return false;
		}
		//give
		if(this.data.emotes.length > 0){
			for(var n in this.data.emotes) {
var emote = this.data.emotes[n];
				if(p.data.emotes.indexOf(emote) == -1) {
	          		p.data.emotes.push(emote);
	        	}
        	}
		}
		if(this.data.items.length > 0) givePlayerItems(pl, nbtItemArr(this.data.items, pl.world));
		if(this.data.money > 0) givePlayerItems(pl, genMoney(pl.world, this.data.money));

		if(this.data.uses > 0) { //keep -1 special
			this.data.uses -= 1;
		}
		this.data.players.push(pl.getName());
		this.save(data);
		p.save(data);
		tellPlayer(pl, "&aCode '"+this.name+"&a' activated!");
		return true;
    };

}
registerDataHandler("job", Job);
function Job(name) {
	DataHandler.apply(this, ['job', name]);
	this.addData({
		"displayName": name,
		"pay": getCoinAmount('5g'),
		"payTime": getStringTime('20min'),
		"isOpen": false,
		"capacity": 10,
		"fireTime": getStringTime('1w'),
		"companyId": null
	});

	this.getPlayers = function(data) {
		var pl = [];
		var dkeys = data.getKeys();
		for(var d in dkeys) {
var dkey = dkeys[d];
			if(dkey.cmatch(/player_(\w+)/g) == 1) {
				var player = new Player(dkey.replace(/player_(\w+)/g, '$1'));
				player.load(data);
				if(player.hasJob(this.name) && pl.indexOf(player.name) == -1) {
					pl.push(player.name);
				}
			}
		}

		return pl;
	};

	this.getDisplayName = function(data) {
		if(typeof(data) == typeof(undefined)) {
			return this.data.displayName+'&r';
		} else {
			return this.getStatusColor(data)+this.data.displayName+'&r';
		}
	}

	this.getStatusColor = function(data) {
		if(this.data.capacity == -1) {
			return '&a';
		}
		if(this.getPlayers(data).length < this.data.capacity) {
			return '&6';
		}
		return '&c';
	};
}
registerDataHandler("mail", Mail);
function Mail(name) {
	this.addData({
		"from": null,
		"to": [],
		"title": "",
		"message": ""
	});
}
registerDataHandler("minigame", Minigame);
function Minigame(name) {
    DataHandler.apply(this, ["minigame", name]);
	this.addData({
		"from": null,
		"to": [],
		"title": "",
		"message": ""
	});

    this.start = function(){

    }
    this.win = function(){

    }
}
registerDataHandler("region", Region);

function Region(name) {
	DataHandler.apply(this, ['region', name]);
	Permittable.apply(this, ['regions']); //Uses custom permission domain 'regions'


	this.addData({
		"displayName": this.name,
		"positions": [],
		"owner": null,//
		"rentStartTime": 0,
		"maxRentCredit": -1,
		"rentCredit": 0,
		"forSale": false,
		"priority": 0,
		"salePrice": 0,
		"rentTime": -1,
		"flags": {
			"noFallDamage": false,
		},
		"allInteract": false,
		"allBuild": false,
		"allAttack": false,
		"trusted": [],//
	});

	/*String player, IScoreboard sb, IData data*/
	this.can = function(player, sb, data, action) {
	if(typeof(action) == typeof(undefined) || action === null) { action = null; }
		var perm = this.getPermission().init(data);
		var canAction = false;

		switch(action) {
			case "interact":
				if(this.data.allInteract) canAction = true;
				break;
			case "build":
				if(this.data.allBuild) canAction = true;
				break;
			case "attack":
				if(this.data.allAttack) canAction = true;
				break;

		}

		return (
			this.data.owner == player
		|| 	this.data.trusted.indexOf(player) > -1
		||  perm.permits(player, sb, data)
		||	canAction
		);
	}
	/*Array xyz1, Array xyz2*/
	this.addPos = function(xyz1, xyz2) {
		var newPos = {
			xyz1: xyz1,
			xyz2: xyz2,
		};
		this.data.positions.push(newPos);

		return this;
	};
	this.addCoord = function(xyz) {
		//Check if there is a half-position
		var hasHalfPos = false;
		for(var i in this.data.positions) {
var pos = this.data.positions[i];
			if(pos.xyz1 == null || pos.xyz2 == null) {
				pos.xyz1 = pos.xyz1||xyz;
				pos.xyz2 = pos.xyz2||xyz;

				this.data.positions[i] = pos;
				hasHalfPos = true;
				break;
			}
		}
		if(!hasHalfPos) {
			this.addPos(xyz, null);
		}

		return this;
	};
	/*Array xyz*/
	this.getPos = function(xyz) { //Gets cube number of xyz coord
		for(var i in this.data.positions) {
var pos = this.data.positions[i];//Loop cubes

			if(pos.xyz1 != null && pos.xyz2 != null) { //Check is valid cube
				var minx = Math.min(pos.xyz1[0], pos.xyz2[0]);
				var miny = Math.min(pos.xyz1[1], pos.xyz2[1]);
				var minz = Math.min(pos.xyz1[2], pos.xyz2[2]);

				var maxx = Math.max(pos.xyz1[0], pos.xyz2[0]);
				var maxy = Math.max(pos.xyz1[1], pos.xyz2[1]);
				var maxz = Math.max(pos.xyz1[2], pos.xyz2[2]);

				var x = xyz[0];
				var y = xyz[1];
				var z = xyz[2];

				if(x >= minx
				&& x <= maxx

				&& y >= miny
				&& y <= maxy

				&& z >= minz
				&& z <= maxz) {
					return parseInt(i);
				}
			}
		}

		return -1;
	};

	this.hasCoord = function(xyz) { //Check if xyz is in region
		return (this.getPos(xyz) > -1);
	}
}
registerDataHandler("team", Team);
function Team(name) {
	DataHandler.apply(this, ['team', name]);
	this.addData({
		"chatcolor": null,
		"chateffect": null,
	});
	this.teamExists = function(sb) {
		return sb.hasTeam(this.name);
	};
}
registerDataHandler("warp", Warp);
function Warp(name) {
	DataHandler.apply(this, ["warp", name]);
	Permittable.apply(this, ["warps"]); //Use new domain "warps"

	this.onCreate(function(self, data){
		var perm = self.getPermission();
		perm.data.enabled = false;
		perm.save(data);
	});

	this.addData({
		"pos": {
			"x": null,
			"y": null,
			"z": null,
		},
		"price": 0,
	});
}









//




//



function getColorPermId(colorId) {
	return 'chat.color.'+getColorName(colorId);
}













function romanize(num) {
  var lookup = {M:1000,CM:900,D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1},
      roman = '',
      i;
  for ( i in lookup ) {
    while ( num >= lookup[i] ) {
      roman += i;
      num -= lookup[i];
    }
  }
  return roman;
}


var MCP = {
    "functions": {
        "ItemStack_getItem": "func_77973_b",
        "Item_getEquipmentSlot": "func_185083_B_",
        "EntityLivingBase_travel": "func_191986_a",
        "EntityLivingBase_setAIMoveSpeed": "func_70659_e",
        "EntityLivingBase_getAIMoveSpeed": "func_70689_ay",
        "EntityLiving_getMoveHelper": "func_70605_aq",
        "EntityMoveHelper_strafe": "func_188488_a",
        "ISaveHandler_getWorldDirectory": "func_75765_b"
    },
    "fields": {
        "World_isRemote": "field_72995_K",
        "World_worldInfo": "field_72986_A",
        "World_saveHandler": "field_73019_z",
        "Entity_onGround": "field_70122_E",
    }
    
};


var _ENCHANTS = [];
var CSTENCH_TAG = "CSTEnch";

registerCSTEnchant("cst:berserker", "Berserker", 10, function(id, e, lvl, type){
    switch(type) {
        case "damagedEntity":
            var chance = 5+2*lvl;
            var newHP = e.player.getHealth();
            var hpPerc = Math.round(100/e.player.getMaxHealth()*newHP);
            if(hpPerc <= 50 && Math.random()*100 <= chance) {
                //Add Strength
                e.player.addPotionEffect(5, 3, lvl, true);
                //Add Speed
                e.player.addPotionEffect(1, 3, Math.ceil(lvl/2), true);
                //Add Haste
                e.player.addPotionEffect(3, 3, lvl, true);
            }
        break;
    }
});


function getEntityMobHead(entity) {
    //Player
    if(entity.getType() == 1) {
        var head = API.getIWorld(0).createItem("minecraft:skull", 3, 1);
        head.getNbt().setString("SkullOwner", entity.getName());
        return head;
    }
    var vanillaSkulls = {
        "Skeleton": 0,
        "WitherSkeleton": 1,
        "Zombie": 2,
        "Creeper": 4,
    };
    var vk = Object.keys(vanillaSkulls);
    if(vk.indexOf(entity.getTypeName()) > -1) {
        var head = API.getIWorld(0).createItem("minecraft:skull", vanillaSkulls[entity.getTypeName()], 1);
        return head;
    }

    var mhfSkulls = {
        "Blaze": "Blaze",
        "CaveSpider": "CaveSpider",
        "Chicken": "Chicken",
        "Cow": "Cow",
        "Enderman": "Enderman",
        "Ghast": "Ghast",
        "VillagerGolem": "Golem",
        "LavaSlime": "LavaSlime",
        "MushroomCow": "MushroomCow",
        "Ocelot": "Ocelot",
        "Pig": "Pig",
        "PigZombie": "PigZombie",
        "Sheep": "Sheep",
        "Slime": "Slime",
        "Spider": "Spider",
        "Squid": "Squid",
        "Villager": "Villager",

    };
    if(Object.keys(mhfSkulls).indexOf(entity.getTypeName()) > -1) {
        var head = API.getIWorld(0).createItem("minecraft:skull", 3, 1);
        head.getNbt().setString("SkullOwner", "MHF_"+mhfSkulls[entity.getTypeName()]);
        return head;
    }

    return null;
}


registerCSTEnchant("cst:decapitation", "Decapitation", 5, function(id, e, lvl, type){
    switch(type) {
        case "damagedEntity":
            var head = getEntityMobHead(e.target);
            if(head != null) {
                e.player.giveItem(head);
            }
        break;
    }
});
registerCSTEnchant("cst:depth_fighter", "Depth Fighter", 10, function(id, e, lvl, type){
    switch(type) {
        case "damagedEntity":
            var xpChance = Math.min(5+4*(lvl-1), 100);
            var xpPerc = Math.min(25+5*(lvl-1), 100);
            var num = Math.round(Math.random()*100);
            if(num <= xpChance) {
                var giveXP = Math.round((e.damage)/100*xpPerc);
                executeCommand(e.player, "/playsound minecraft:entity.experience_orb.pickup ambient "+e.player.getName())
                executeCommand(e.player, "/summon xp_orb {X} {Y} {Z} {Value:{XP}}".fill({
                    "X": e.player.getX(),
                    "Y": e.player.getY()+1,
                    "Z": e.player.getZ(),
                    "XP": giveXP
                }));
            }
        break;
    }
});
registerCSTEnchant("cst:ender_swap", "Ender Swap", 1, function(id, e, lvl, type, slot){
    switch(type) {
        case "damagedEntity":
            if(e.damageSource.isProjectile()) {
                var ppos = e.player.getPos().up();
                var ppitch = e.player.getPitch();
                var prot = e.player.getRotation();

                var tpos = e.target.getPos().up();
                var tpitch = e.target.getPitch();
                var trot = e.target.getRotation();

                e.player.setPos(tpos);
                e.player.setPitch(tpitch);
                e.player.setRotation(trot);

                e.player.playSound("minecraft:entity.endermen.teleport", 2, 1);

                e.target.setPos(ppos);
                e.target.setPitch(ppitch);
                e.target.setRotation(prot);

                executeCommand(e.player, "/particle dragonbreath {X} {Y} {Z} 1 1 1 1 700 force".fill({
                    "X": tpos.getX(),
                    "Y": tpos.getY(),
                    "Z": tpos.getZ(),
                }));
                executeCommand(e.player, "/particle dragonbreath {X} {Y} {Z} 1 1 1 1 700 force".fill({
                    "X": ppos.getX(),
                    "Y": ppos.getY(),
                    "Z": ppos.getZ(),
                }));
            }
        break;
    }
}, false);
registerCSTEnchant("cst:launch", "launch", 10, function(id, e, lvl, type){
    switch(type) {
        case "damagedEntity":
            //if(hpPerc <= 50) {
                var jumpspd = 0.8+(0.05*lvl);
                (e.target).setMotionY(jumpspd);
            //}
        break;
    }
});
registerCSTEnchant("cst:life_steal", "Life Steal", 10, function(id, e, lvl, type){
    switch(type) {
        case "damagedEntity":
            var stealChance = Math.min(5+4*(lvl-1), 100);
            var stealPerc = Math.min(50+5*(lvl-1), 100);
            var num = Math.round(Math.random()*100);
            if(num <= stealChance) {
                var newHP = Math.min(Math.round(e.player.getHealth()+(e.damage/100*stealPerc)), e.player.getMaxHealth());
                e.player.setHealth(newHP);
                executeCommand(e.player, "/particle heart {x} {y} {z} 1 2 1 10 20".fill({
                    "x": e.player.getX(),
                    "y": e.player.getY()+1,
                    "z": e.player.getZ(),
                }));
                executeCommand(e.player, "/playsound minecraft:entity.firework.large_blast ambient "+e.player.getName());
            }
        break;
    }
});
registerCSTEnchant("cst:paralyze", "Paralyze", 10, function(id, e, lvl, type){
    switch(type) {
        case "damagedEntity":
            var parChance = Math.min(5+(2*(lvl-1)), 100);
            if(Math.round(Math.random()*100) <= parChance) {
                var duration = Math.round(lvl*1.5);
                e.target.addPotionEffect(8, duration, 128, true);
                e.target.addPotionEffect(2, duration, 128, true);
            }
            break;
    }
})


function getCSTEnchantByName(name_id) {
    for(var i in _ENCHANTS) {
var ench = _ENCHANTS[i];
        if( ench.name == name_id ) {
            return ench;
        }
    }
    return null;
}

function getCSTEnchantsFromItem(itemstack) {
    if(itemstack == null) {
        return [];
    }
    var nbt = itemstack.getNbt();
    var enchs = [];
    var itemenchs = nbtGetList(nbt, CSTENCH_TAG)||[];
    for(var i in itemenchs) {
var itemench = itemenchs[i];
        enchs.push({
            "name": itemench.getString("name"),
            "lvl": parseInt(itemench.getShort("lvl")),
        });
    }
    return enchs;
}

//Checks if item has CST Enchant
//if lvl > 0 it will check also if enchant level >= lvl
function hasCSTEnchant(item, id, lvl) {
	if(typeof(lvl) == typeof(undefined) || lvl === null) { lvl = 0; }
    var itemnbt = item.getNbt();
    var cstenchs = nbtGetList(itemnbt, CSTENCH_TAG);
    for(var i in cstenchs) {
var cstench = cstenchs[i];
        if(cstench.getString("name") == id) {
            if(lvl > 0) {
                return parseInt(cstench.getShort("lvl")) >= lvl;
            }
            return true;
        }
    }

    return false;
}

function removeCSTEnchant(item, id) {
    if(hasCSTEnchant(item, id)) {
        var newench = [];
        var itemnbt = item.getNbt();
        var cstenchs = nbtGetList(itemnbt, CSTENCH_TAG);
        var newLore = [];
        var remLore = [];
        for(var i in cstenchs) {
var cstench = cstenchs[i];
            var ench = getCSTEnchantByName(cstench.getString("name"));
            var lvl = parseInt(cstench.getShort("lvl"));


            if(ench.name != id) {
                newench.push(cstench);
            } else {
                remLore.push(ccs(getCSTEnchantDisplay(ench.name, lvl)));
            }
        }
        itemnbt.setList(CSTENCH_TAG, newench);
        var iLore = Java.from(item.getLore());
        for(var i in iLore) {
var lore = iLore[i];
            if(remLore.indexOf(lore) == -1) {
                newLore.push(lore);
            }
        }
        item.setLore(newLore);
        return true;
    }
    return false;
}

function runCSTEnchant(id, event, lvl, type, slot) {
    var ench = getCSTEnchantByName(id);
    if(ench != null) {
        return ench.func(id, event, lvl, type, slot);
    }
    return null;
}

function addCSTEnchant(item, id, lvl) {
    var itemNbt = item.getNbt();
    var addench = getCSTEnchantByName(id);
    var newench = Java.from(nbtGetList(itemNbt, CSTENCH_TAG))||[];
    if(hasCSTEnchant(item, id)) {
        removeCSTEnchant(item, id);
    }
    newench.push(API.stringToNbt('{"name":"'+id+'","lvl":'+lvl+'s}'));
    itemNbt.setList(CSTENCH_TAG, newench);
    item.setLore(Java.from(item.getLore()).concat([ccs(getCSTEnchantDisplay(id, lvl))]))
}

function getCSTEnchantDisplay(id, lvl) {
    var ench = getCSTEnchantByName(id);
    if(ench != null) {
        return "&7"+ench.displayName+(ench.showLvl ? " "+romanize(lvl) : "");
    }
    return "";
}

function registerCSTEnchant(name, displayName, maxLvl, func, showLvl) {
	if(typeof(showLvl) == typeof(undefined) || showLvl === null) { showLvl = true; }
    _ENCHANTS.push({
        "maxlvl": maxLvl,
        "name": name,
        "displayName": displayName,
        "func": func,
        "showLvl": showLvl,
    });
}






//

















var MENU_TIMER_ID = 420;
var MENU_TIMER_PAYLOAD = null;
var MENU_ON_CLOSE = [];
var MENU_CAN_EDIT = false;







function fillObject(obj, data) {

    for(var key in obj) {
var val = obj[key];
        if(typeof val === 'string') {
            //obj[key] = val.fill(data);
        } else if(typeof val != 'number') {
            //fillObject(obj[key], data);
        }
    }
    return obj;
}

function containerGetRows(container) {
    return (container.getSize()-36)/9;
}

function handleMenuEvents(player, evs, filldata) {
    filldata = objMerge({
        "player": player.getName(),
    }, filldata||{});

    for(var c in evs) {
var ev = evs[c];
        fillObject(ev, filldata);
        switch(ev.type) {
            case "run_command":
                executeCommand(player, ev.command||"");
                break;
            case "run_xcommand":
            case "run_xcommand_admin":
                executeXCommand(ev.command||"", player, ev.type === "run_xcommand");
                break;
            case "run_file":
                var scrPath = ev.file||"";
                var scrFile = new File(scrPath);
                if(scrFile.exists()) {
                    var scr = readFileAsString(scrPath);
                    var scrFunc = new Function('e', 'payload', scr);
                    var payl = objMerge({
                        //defaults
                    }, ev.payload||{});

                    try {
                        scrFunc(e, payl);
                    } catch(exc) {
                        handleError(exc, false, player.getName());
                    }
                } else {
                    tellPlayer(player, "&cFile '"+scrPath+"' doesn't exist!");
                }
                break;
            case "run_script":
                var scr = ev.script||"";
                var scrFunc = new Function('e', 'payload', scr);
                var payl = objMerge({
                    //defaults
                }, ev.payload||{});

                try {
                    scrFunc(e, payl);
                } catch(exc) {
                    handleError(exc, false, player.getName());
                }
                break;
            case "open_menu":
                var menuPath = "menus/"+(ev.file||"")+".json";
                var menuFile = new File(menuPath);
                if(menuFile.exists()) {
                    var menuFileText = readFileAsString(menuPath);
                    var menuJson = null;

                    try {
                        menuJson = JSON.parse(menuFileText);
                    } catch (exc) {
                        handleError(exc, false, player.getName());
                    }

                    if(menuJson !== null) {
                        player.closeGui();
                        MENU_TIMER_PAYLOAD = {'menu':menuJson,'data':ev.data||{},'onClose':menuJson.onClose||[]};
                        player.timers.forceStart(MENU_TIMER_ID, 1, false);

                    }


                } else {
                    tellPlayer(player, "&cFile '"+menuPath+"' does not exists!")
                }
                break;
            case "cancel":
                if(e.isCancelable()) {
                    e.setCanceled(true);
                }
                break;
            case "close_menu":
                player.closeGui();
                break;
            case "function":
                if(typeof ev.function === 'function') {
                    var payl = objMerge({
                        //defaults
                    }, ev.payload||{});
                    var c = player.getOpenContainer();
                    ev.function(player, payl, c.getSize()>36 ? c : null);
                }
                break;
        }
    }
}

function CustomMenu(name, meta) {
    this.name = name||"";
    this.rows = 6;
    this.items = [];
    this.closeFns = [];
    this.openFns = [];
    this.filldata = {};
    this.meta = meta||{};

    this.getFirstFreeSlot = function(container) {
        var items = container.getItems();
        for(var i in items) {
var item = items[i];
            if(item.isEmpty() && i>=36) {
                return i-36;
            }
        }
        return -1;
    };

    this.fromContainer = function(container) {
        this.name = container.getName();
        this.items = container.getItems().map(function(item){
            return new CustomMenuItem().fromItemStack(item);
        });
        this.rows = containerGetRows(container);

    };

    this.fromJson = function(json) {
        if(typeof json === 'string') { json = JSON.parse(json); }
        this.name = json.name||"";
        this.rows = Math.min(Math.max(json.rows||6, 1),6);
        if(json.items) {
            for(var i in json.items) {
var jitem = json.items[i];
                this.items.push(new CustomMenuItem().fromJson(jitem));
            }
        }
        if(json.onClose) {
            this.closeFns = json.onClose;
        }
        if(json.onOpen) {
            this.openFns = json.onOpen;
        }
        if(json.data) {
            this.filldata = json.data;
        }
        if(json.meta) {
            this.meta = json.meta;
        }

        return this;
    };

    this.onClose = function(ev) {
        this.closeFns.push(ev);
    };

    this.onOpen = function(ev){
        this.openFns.push(ev);
    };

    this.getItems = function() {
        return new Collection(this.items);
    };

    this.open = function(player) {
        var container =  player.showChestGui(this.rows);

        MENU_ON_CLOSE = fillObject(objMerge({}, this.closeFns), {});
        handleMenuEvents(player, this.openFns);
        this.populate(player.world, container);
        return container;
    };

    this.update = function(){
        this.getItems().do("each",function(item){item.update();});
    };

    this.populate = function(w, container) {
        container.setName(parseEmotes(ccs(this.name)));
        var items = this.items;
        for(var i in this.items) {
var citem = this.items[i];

            container.setSlot(36+citem.slot, citem.toItemStack(w));
        }
    };
}

function CustomMenuItem(id, damage, count) {
	if(typeof(damage) == typeof(undefined) || damage === null) { damage = 0; }
	if(typeof(count) == typeof(undefined) || count === null) { count = 1; }
    this.id = id;
    this.lore = [];
    this.slot = 0;
    this.count = count;
    this.damage = damage;
    this.nbt = null;
    this.nbtstring = null;
    this.classes = [];
    this.name = null;
    this.takeable = false;

    this.toJsonString = function(){
        var json = {
            "id": this.id,
            "lore": this.lore,
            "damage": this.damage,
            "count": this.count,
            "slot": this.slot,
            "classes": this.classes,
            "takeable": this.takeable
        };
        if(this.nbt) { json.nbt = this.nbt; }
        if(this.name) { json.name = this.name }

        return JSON.stringify(json);
    };

    this.fromJson = function(json){
        if(typeof json === 'string') { json = JSON.parse(json); }
        this.id=json.id;
        if("name" in json) {
            this.name = json.name;
        }
        this.lore = json.lore||[];
        this.damage = json.damage||0;
        this.count = json.count||1;
        this.nbt = json.nbt||null;
        this.classes = json.classes||[];
        this.takeable = json.takeable||false;
        this.slot = json.slot||0;
        this.onClickFuncs = json.onClick||[];

        return this;
    };

    this.onClickFuncs = [];

    this.onClick = function(type, meta){
        this.onClickFuncs.push(objMerge({
            "type": type,
        }, meta));
    };

    this.fromItemStack = function(stack) {
        this.id = stack.getName();
        this.damage = stack.getItemDamage();
        this.count = stack.getStackSize();
        this.lore = stack.getLore()||[];
        if(stack.hasCustomName()) {
            this.name = stack.getDisplayName().replace("§", "&");
        }
        if(stack.hasNbt()) {
            var snbt = stack.getNbt();
            this.classes = nbtGetList(snbt, "classes")||[];
            var clickActions = (nbtGetList(snbt, "onClick")||[]);
            this.onClick = [];
            for(var c in clickActions) {
var ca = clickActions[c];
                this.onClick.push(JSON.stringify(ca));
            }
            //print(nbtGetList(snbt, "onClick")||[]);
            this.takeable = snbt.getBoolean("takeable")||false;


            var setNbt = nbtCopy(snbt);
            setNbt.remove("classes");
            setNbt.remove("onClick");
            setNbt.remove("takeable");
            setNbt.remove("display");

            this.nbtstring = setNbt.toJsonString();
        }


        return this;
    };
    this.toItemStack = function(w){
        var item = w.createItem(this.id, this.damage, this.count);
        if(this.nbt) {
            //item.getNbt().merge(API.stringToNbt(JSON.stringify(this.nbt)));
        }
        var newLore = this.lore;
        item.setLore(newLore);
        if(this.name) {
            item.setCustomName(parseEmotes(ccs(this.name||""), [], false));
        }
        var inbt = item.getNbt();
        inbt.setList("classes", (Java.from(inbt.getList("classes", inbt.getListType("classes")))||[]).concat.apply([], [this.classes]));
        inbt.setList("onClick", (Java.from(inbt.getList("onClick", inbt.getListType("onClick")))||[]).concat.apply([], [this.onClickFuncs.map(function(f){return JSON.stringify(f);})]));
        inbt.setBoolean("takeable", this.takeable);



        if(this.nbtstring) {
            inbt.merge(API.stringToNbt(this.nbtstring));
        }
        return item;
    };
}







var PERMISSION_REGEX = /permission_([\w.\-]+)/g;

//Superfunction (extendable)
//Used to add permission requirements to datahandlers.
function Permittable(permDomain) {
	this.permDomain = permDomain||this.type;
	//Requires DataHandler
	this.getPermission = function(){
		return new Permission(this.getPermissionId());
	};
	this.getPermissionId = function(){
		return this.permDomain+'.'+this.name;
	};
	this.onRemove(function(self, data) {
		self.getPermission().remove(data); //Removes permission when DataHandler gets removed

	});
	this.onSave(function(self, data){
		var perm = self.getPermission();
		if(!perm.exists(data)) {
			//Create permission of permittable if not exists
			perm.save(data); //this will run Permission onSave functions
		}
	});
}



//Unstable, use money pouch for taking money
function takeMoneyFromPlayer(player, amount, pnbt) {
	if(typeof(pnbt) == typeof(undefined) || pnbt === null) { pnbt = null; }
    if(pnbt == null) { pnbt = player.getEntityNbt(); }
    var w = player.world;
    if(getMoneyItemCount(pnbt, w) >= amount) {
        var pmitems = getPlayerInvFromNbt(pnbt, w, function(item, inbt, w){
            return isItemMoney(item, w);//Get only money items
        }).sort(function(r,s){
            return getItemMoney(r, w)-getItemMoney(s, w);//Sort by money
        });

        for(var pm in pmitems) {
var pmitem = pmitems[pm];
            var pval = getItemMoney(pmitem, w);

            for(var i = 1; i <= pmitem.getStackSize(); i++) {
                if(amount > 0) {
                    pmitem.setStackSize(pmitem.getStackSize()-1);
                    amount -= pval;
                } else {
                    break;
                }
            }
        }
        tellPlayer(player, "Amount: "+amount);
        if(amount < 0) {
            var cmoney = genMoney(w, Math.abs(amount));
            givePlayerItems(player, cmoney, pnbt)
        }
    }

}
//Returns amount of money in player inv
function getMoneyItemCount(pnbt, w) {
  var am = 0;
  for(var itemvalue in _COINITEMS) {
var ci = _COINITEMS[itemvalue];
    var coinItems = genMoney(w, getCoinAmount(itemvalue));
    for(var _cii in coinItems) {
var _coin = coinItems[_cii];
      am += getInvItemCount(pnbt, _coin, w, false)*getCoinAmount(itemvalue);
    }

  }
  return am;
}



function getItemMoney(stack, w) {
    for(var ival in _COINITEMS) {
var ci = _COINITEMS[ival];
        var cm = genMoney(w, getCoinAmount(ival))[0]||null;
        if(cm != null) {
            if(isItemEqual(stack, cm)) {
                return getCoinAmount(ival);
            }
        }
    }
    return 0;
}

function isItemMoney(stack, w) {
    return getItemMoney(stack, w) > 0;
}


//



























function genMoney(w, amount) {
	var am = amount
	var coinams = Object.keys(_COINITEMS);
	var nmItems = [];
	for(var i = coinams.length-1; i >= 0; i--) {
		var coincount = 0;
		var coinval = getCoinAmount(coinams[i]);
		if(coinval > 0) {
			while(am >= coinval) {
				coincount++;
				am -= coinval;
			}
		}
		if(coincount > 0) {
			var coinitem = w.createItem(_COINITEMS[coinams[i]], 0, coincount);
			coinitem.setCustomName(ccs(_COINITEMNAME));
			coinitem.setLore([
				ccs(_COINITEM_PREFIX+coinams[i].toUpperCase())
			]);
			nmItems.push(coinitem);
		}
	}


	return nmItems;

}

function getPlayerMessage(player, message, w, pname, fullraw, allowed) {
	if(typeof(pname) == typeof(undefined) || pname === null) { pname = null; }
	if(typeof(fullraw) == typeof(undefined) || fullraw === null) { fullraw = true; }
	if(typeof(allowed) == typeof(undefined) || allowed === null) { allowed = []; }
	if(pname == null) {pname = player.getName();}
	var data = w.getStoreddata();
	var plo = new Player(player.getName()).init(data);
	var sb = w.getScoreboard();
	var ts = sb.getTeams();
	var t = sb.getPlayerTeam(pname);
	var notifySound = pick([
		'animania:cluck3',
		'animania:combo',
		'animania:crow3',
		'animania:moo2',
		'animania:ooooohh',
		'animania:reeee',
		'immersiveengineering:birthdayparty',
	]);
	var pcol = '';
	var pteam = '';
	var tcol = '';
	var teff = '';
	var colls = Object.keys(_RAWCOLORS);
	var effs = Object.keys(_RAWEFFECTS);
	if(t != null) {
		var ct = new Team(t.getName()).init(data);
		if(ct.data.chatcolor != null) {
			if(colls.indexOf(ct.data.chatcolor) > -1) {
				tcol = '&'+getColorId(ct.data.chatcolor);
			}
		}
		if(ct.data.chateffect != null) {
			if(effs.indexOf(ct.data.chateffect) > -1) {
				teff = '&'+getColorId(ct.data.chateffect);
			}
		}
		if(t.getColor() != null) {
			pcol = '&'+getColorId(t.getColor());
		}
		pteam = pcol+"&o"+t.getDisplayName()+" &r"+pcol;
	}

	//Override player specific
	if(plo.data.chatcolor != null) {
		tcol = '&'+getColorId(plo.data.chatcolor);
	}
	//var timestr = '';
	//var now = new Date();
	//timestr = '&l[&r'+pcol+now.getHours().toString().append('0', 2)+':'+now.getMinutes().toString().append('0', 2)+'&l]&r';

	//var newmsg = pcol+timestr+pcol+'&l[&r'+pteam+pname+'&r'+pcol+'&l] -> &r'+tcol+teff;
	var newmsg = pcol+'&l[&r'+pteam+pname+'&r'+pcol+'&l] -> &r'+tcol+teff;
	if(!fullraw) {
		newmsg = ccs(newmsg, allowed);
	}
	newmsg += message.rangeUpper(0, 1); //Concat message contents

	var plr = w.getAllPlayers();
	var mrx = /@(\w+)/g;
	var mplr = newmsg.match(mrx) || [];

	for(var k in mplr) {
		var mtc = mplr[k].replace(mrx, '$1');
		var pmtc = null;
		for(var p in plr) {
			if(occurrences(plr[p].getName().toLowerCase(), mtc.toLowerCase()) > 0) {
				pmtc = plr[p].getName();
				break;
			}
		}
		if(pmtc != null) {
			executeCommand(player, "/playsound "+notifySound+" hostile "+pmtc, pmtc);
			newmsg = ccs(newmsg.replace('@'+mtc, '&9&o&l@'+pmtc+'&r'));
		}
	}

	var trx = /\$(\w+)/g;
	var tlr = newmsg.match(trx) || [];
	var apl = (function(w){
		var pnames = [];
		var ps = w.getAllPlayers();
		for(var psi in ps) {
var iplayr = ps[psi];
			pnames.push(iplayr.getName());
		}

		return pnames;
	})(w);
	for(var t in tlr) {
		var tc = tlr[t].replace(trx, '$1');
		for(var tt in ts) {
var sbt = ts[tt];
			if(occurrences(sbt.getDisplayName().toLowerCase(), tc.toLowerCase()) > 0) {
				//Team select
				var spl = sbt.getPlayers();
				var scol = sbt.getColor();
				var sscol = '&f';
				var stn = sbt.getDisplayName();
				if(scol != null) {
					sscol = "&"+getColorId(scol);
				}

				for(var sp in spl) {
var splayr = spl[sp];
					if(apl.indexOf(splayr) > -1) {
						executeCommand(player, '/playsound '+notifySound+' hostile '+splayr, splayr);
					}
				}
				newmsg = ccs(newmsg.replace('$'+tc, sscol+'&l'+"$"+stn+'&r'));
			}
		}
	}

	return newmsg;
}



//Converts int to string
function getAmountCoin(amount) {
	var rstr = '';
	var ams = sign(amount);
	if(ams == -1) { rstr = '-'; }
	amount = Math.abs(amount);
	var ckeys = Object.keys(_COINTABLE);
	for(var i = ckeys.length-1; i >= 0; i--) {

		var add = 0;
		while(amount >= _COINTABLE[ckeys[i]]) {
			add++;
			amount -= _COINTABLE[ckeys[i]];
		}
		if(add > 0) {
			rstr += add.toString()+ckeys[i].toUpperCase();
		}
	}

	if(rstr == '') { rstr = '0G'; }
	return rstr;
}
//converts string to int
function getCoinAmount(str) {
	var arx = /([\d]+)([a-zA-Z]+)/g;
	var amounts = str.match(arx) || [];
	var amount = 0;
	var sgn = 1;
	if(str.substr(0, 1) == '-') { sgn = -1; }

	for(var a in amounts) {
var _am = amounts[a];
		var _amnum = parseInt(_am.replace(arx, '$1'));
		var _amunit = _am.replace(arx, '$2').toLowerCase();
		var coinkeys = Object.keys(_COINTABLE);
		if(coinkeys.indexOf(_amunit) > -1) {
			amount += _amnum*_COINTABLE[_amunit];
		}
	}
	return amount*sgn;
}


var ReskillableRegistry = (hasMCMod("reskillable") ? Java.type('codersafterdark.reskillable.api.ReskillableRegistries') : null);







function random_ranges(min, max, amount) {
	var a = 0;
	for(var i = 0; i < amount; i++) { a += random_range(min, max); }
	return a;
}

function rrandom_ranges(min, max, amount) {
	var a = 0;
	for(var i = 0; i < amount; i++) { a += rrandom_range(min, max); }
	return a;
}

function pickchance(a, amount) {
	var aa = [];
	for(var e in a) {
		if(!isArray(a[e])) {
			aa[aa.length] = a[e];
		} else {
			for(var i = 0; i < a[e][1]; i++) {
				aa[aa.length] = a[e][0];
			}
		}
	}

	return pick(aa, amount);
}

function rrandom_range(min, max) { return Math.round(random_range(min, max)); }

function random_range(_min, _max) {
	var min = Math.min(_min, _max);
	var max = Math.max(_min, _max);

	var diff = max - min;

	return (min + (Math.random() * diff));
}

function pickwhere(a, fn, amount) {
	return pick(array_filter(a, fn), amount);
}

function genName(name) {
	var p = [
    'Amazing',
    'Awesome',
    'Blithesome',
    'Excellent',
    'Fabulous',
    'Fantastic',
    'Favorable',
    'Gorgeous',
    'Incredible',
    'Outstanding',
    'Perfect',
    'Propitious',
    'Remarkable',
    'Rousing',
    'Spectacular',
    'Splendid',
    'Stellar',
    'Super',
    'Upbeat',
    'Unbelievable',
    'Wondrous',
	'Tempered',
	'Legendary',
	'Magical'
	];
	var s = [
		'Destruction',
		'Slaughter',
		'Starlight',
		'Heroism',
		'Bonebreaking',
		'The Fallen',
		'Silence',
		'Spellkeeping',
		'Massacre',
		'Sanity',
		'Insanity',
		'Remorse',
		'Fury'
	];

	return pick(p) + ' ' + name + ' of ' + pick(s);
}

function pick(a, amount) {
	if(typeof(amount) == typeof(undefined) || amount === null) { amount = 1; }
	var index = Math.floor(Math.random() * a.length);
	amount = Math.min(a.length, amount);
	if(amount == 1) {
		return a[index];
	} else {
		var picks = [];

		while(picks.length < amount) {
			index = Math.floor(Math.random() * a.length);
			if(picks.indexOf(a[index]) == -1) { picks.push(a[index]); }
		}

		return picks;
	}
}

function lengthdir_x(length, angle) {
	return length * Number(Math.cos(toRadians(angle))).toFixed(2) * -1;
}

function lengthdir_z(length, angle) {
	return length * Number(Math.sin(toRadians(angle))).toFixed(2);
}

function toRadians(angle) {
  return angle * (Math.PI / 180);
}

//Get angle between two points (2-dimensional)
function getPosAngle(x1, y1, x2, y2) {
	return Math.atan2(y2-y1, x2-x1) *(180/Math.PI);
}

function roundByNum(num, rounder, mode) {
	var m = 1/(rounder||1);
	var mode = mode||"round";

	return Math[mode](num*m)/m;
}


function sign(num) {
	if(typeof(num) == typeof(undefined) || num === null) { num = 0; }
	if(num > 0) { return 1; }
	if(num < 0) { return -1; }
	return 0;
}

function roundDec(num, dec) {
	if(typeof(dec) == typeof(undefined) || dec === null) { dec = 1; }
  	var mult = Math.pow(10, dec);

  	return Math.round(num*mult)/mult;
}

function fixAngle(angle) {
	return Number((Math.abs(angle) % 360) * sign(angle)).toFixed(2);
}

function posdir(pos, dir, pitch, len, flying) {
	if(typeof(dir) == typeof(undefined) || dir === null) { dir = 0; }
	if(typeof(pitch) == typeof(undefined) || pitch === null) { pitch = 0; }
	if(typeof(len) == typeof(undefined) || len === null) { len = 1; }
	if(typeof(flying) == typeof(undefined) || flying === null) { flying = false; }
	var x = pos.getX();
	var y = pos.getY();
	var z = pos.getZ();
	var xdir = getQuartRotation(dir);
	var zdir = getQuartRotation(dir-90);
	x += Math.round(len*(Math.abs(xdir)/90)*sign(xdir));
	z += Math.round(len*(Math.abs(zdir)/90)*sign(zdir));
	if(flying) {
		y += (len)*(Math.abs(pitch)/90)*-sign(pitch);
	}
	return {x:x,y:y,z:z};
}

function lengthpitch_y(pitch, length) {
	return Math.round(pitch/-90)*length;
}

function getQuartRotation(dir) {
	dir = getHalfRotation(dir);

	if(Math.abs(dir) > 90) {
		dir = (180-Math.abs(dir))*sign(dir);
	}

	return dir;
}

function getHalfRotation(angle) {
	angle = fixAngle(angle);
	if(angle <= 180) { return angle; } else { return -(180-(angle-180)); }
}



////

var stats = {
	"level": 1,
};

function init(e) {
	

	data_register(stats, e.npc.getStoreddata());-
}

function tick(e) {
	
    //
    updateNpc(e.npc);

}

function calcMaxHp(lvl) {
	return Math.round(10+((lvl-1)*2));
}

function calcDamage(lvl) {
	return roundByNum(3+(lvl/5), .5);
}

npcSettings.Stats = objMerge(npcSettings.Stats, {
	"MaxHealth": calcMaxHp(1)
});
