
//==Reallife date handler for hiring regions etc
var msTable = {
	'y': 31556926000,
	'mon': 2629743830,
	'w': 604800000,
	'd': 86400000,
	'h': 3600000,
	'min': 60000,
	's': 1000,
	'ms': 1
};

Date.prototype.addTime = function(addTime) {
	this.setTime(this.getTime()+addTime);
};

Date.prototype.hasPassed = function(passDate) {
	return (this.getTime() >= passDate.getTime());
};

//Converts TimeString to number
function getStringTime(timeString) {
	//0y4mon3d 6h 8min3s 800ms
	var reg = /([\d]+)([a-zA-Z]+)/g;
	var _m = timeString.match(reg);
	var newTime = 0;
	var _tk = Object.keys(msTable);
	
	for(m in _m) {
		var fm = _m[m];
		var nm = fm.replace(reg, '$1').cInt();
		var om = fm.replace(reg, '$2');
		if(nm != null) {
			if(_tk.indexOf(om) != -1) {
				newTime += nm * (msTable[_tk[_tk.indexOf(om)]]);
			} else { newTime += nm; }
		}
	}
	
	return newTime;
}
//Converts number to TimeString
function getTimeString(stringTime, excludes) {
	if(typeof(excludes) == typeof(undefined)) { excludes = []; }
	var newTime = parseInt(stringTime);
	var newStr = '';
	for(ms in msTable) {
		if(excludes.indexOf(ms) == -1) {
			var msnum = 0;
			while(newTime >= msTable[ms]) {
				msnum++;
				newTime -= msTable[ms];
			}
			if(msnum > 0) {
				newStr += msnum.toString()+ms;
			}
		}
	}
	
	
	return newStr;
}function getFnArgs(fn) {
	var fnrgx = /function[\s]+([\w]+)\(([\w,\s]+)\)/;
	var fnstr = fn.toString();
	var fnargs = [];
	var m = fnstr.match(fnrgx);
	if(m != null) {
		
      	m[2].split(',').forEach(function(a){
        	fnargs.push(a.trim());
        });
      	
      	return fnargs;
	}
	
	return fnargs;
}
String.prototype.allMatch = function(regx) {
	var m = this.match(regx);
	var rr = [];
	for(mm in m) {
		var mt = m[mm];
		var rx = regx.exec(this);
		rr.push(rx);
	}
	
	return rr;
};


String.prototype.cmatch = function(regx) {
	return (this.match(regx) || []).length;
};

String.prototype.rangeUpper = function(min, max) {
	var str = '';
	for(var i = 0; i < this.length; i++) {
		var c = this.substring(i, i+1); //curchar
		if(i >= min && i < max) {
			c=c.toUpperCase();
		}
		str+=c.toString();
	}
	return str;
};

String.prototype.pad = function(character, len) {
	var n = this.toString();
	for(var i = n.length; i < len; i++) {
		n += character.toString();
	}
	return n;
};

String.prototype.padMiddle = function(character, len) {
	
	var n = this.toString();
	var sc = Math.floor((len-n.length)/2);
	var ns = '';
	for(var i = 0; i < sc; i++) {
		ns += character.toString();
	}
	ns+=n;
	for(i = 0; i < sc; i++) {
		ns += character.toString();
	}
	return ns;
};

String.prototype.cInt = function() {
	return (isNaN(parseInt(this)) ? null : parseInt(this));
};

String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

String.prototype.append = function(ch, amount) {
	var new_str = this.toString();
  	for(var i = 0; i < amount; i++) {
    	if(i >= new_str.length) {
        	new_str += ch.toString();
        }
    }
  
  return new_str;
};

String.prototype.prepend = function(ch, amount) {
	var new_str = this.toString();
  	for(var i = 0; i < amount; i++) {
    	if(i >= new_str.length) {
        	new_str = ch.toString()+new_str;
        }
    }
  
  return new_str;
};

var ASSET_MOD_ID = "adventureassets";

function objMerge(obj1,obj2){
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
    return obj3;
}

function getHalfRotation(angle) {
	angle = fixAngle(angle);
	if(angle <= 180) { return angle; } else { return -(180-(angle-180)); }
}

function UUIDLM() { return rrandom_range(1, 99999); }

function getQuartRotation(dir) {
	dir = getHalfRotation(dir);
	
	if(Math.abs(dir) > 90) {
		dir = (180-Math.abs(dir))*sign(dir);
	}
	
	return dir;
}

function playerIsOnline(world, player) {
	var isOnline = false;
	var pl = world.getAllPlayers();
	for(p in pl) {
		if(pl[p].getName() == player.toString()) {
			isOnline = true;
			break;
		}
	}
	return isOnline;
}

function getHandItem(player) {
	return player.getMainhandItem() || player.getOffhandItem();
}
function uniqid() {
	var id = '';
	for(var i = 0; i <= 3; i++) {
		id+=Math.random().toString(36).substr(2, 9);
	}
	return id;
}

function arrayOccurs(string, subArray, allowOverlapping) {
	if(typeof(allowOverlapping) == typeof(undefined)) { allowOverlapping = false; }
	var occ = 0;
	for(i in subArray) {
var sel = subArray[i];
		occ += occurrences(string, sel, allowOverlapping);
	}
	
	return occ;
}

function occurrences(string, subString, allowOverlapping) {
	if(typeof(allowOverlapping) == typeof(undefined)) { allowOverlapping = false; }
    string += "";
    subString += "";
	
    if (subString.length <= 0) return (string.length + 1);

    var n = 0,
        pos = 0,
        step = allowOverlapping ? 1 : subString.length;

    while (true) {
        pos = string.indexOf(subString, pos);
        if (pos >= 0) {
            ++n;
            pos += step;
        } else break;
    }
    return n;
}

function arrayTakeRange(arr, start, end) {
	if(typeof(end) == typeof(undefined)) { end = null; }
	if(end == null) { end = arr.length; }
	var a = [];
	var _end = Math.min(end, arr.length);
	var _start = Math.min(start, _end);
	for(var i = _start; i < Math.min(end, arr.length); i++) {
		if(typeof(arr[i]) != typeof(undefined)) {
			a.push(arr[i]);
		}
	}
	return a;
}


function sign(num) {
	if(typeof(num) == typeof(undefined)) { num = 0; }
	if(num > 0) { return 1; }
	if(num < 0) { return -1; }
	return 0;
}

function g(obj, grp_props) {
	for(j in grp_props) {
		var props = grp_props[j];
		for(i in props[0]) {
			if(obj != null) {
				if(typeof(obj[props[0][i]]) != typeof(undefined)) {
					obj = obj[props[0][i]];
					
					break;
				}
			}
		}
	}
	
	
	return obj;
}

function httpGetAsync(theUrl, callback)
{
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() { 
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
            callback(xmlHttp.responseText);
    }
    xmlHttp.open("GET", theUrl, true); // true for asynchronous 
    xmlHttp.send(null);
}

function getAllFuncs(obj) {
    var props = [];

    do {
        props = props.concat(Object.getOwnPropertyNames(obj));
    } while (obj = Object.getPrototypeOf(obj));

    return props.sort().filter(function(e, i, arr) { 
       if (e!=arr[i+1] && typeof obj[e] == 'function') return true;
    });
}

function removeFromArray(arr, vals) {
	if(typeof(vals) == 'string') { vals = [vals]; }
	var a = arr;
	for(v in vals) {
var val = vals[v];
		array_remove(a, val);
	}
	return a;
}

var _RAWCOLORS = {
	'0': 'black',
	'1': 'dark_blue',
	'2': 'dark_green',
	'3': 'dark_aqua',
	'4': 'dark_red',
	'5': 'dark_purple',
	'6': 'gold',
	'7': 'gray',
	'8': 'dark_gray',
	'9': 'blue',
	'a': 'green',
	'b': 'aqua',
	'c': 'red',
	'd': 'light_purple',
	'e': 'yellow',
	'f': 'white',
};

var _RAWEFFECTS = {
	'o': 'italic',
	'l': 'bold',
	'k': 'magic',
	'm': 'strike',
	'n': 'underline',
	'r': 'reset'
}

var _RAWCODES = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS));
function getColorId(name) {
	for(i in _RAWCOLORS) {
		if(name == _RAWCOLORS[i]) {
			return i;
		}
	}
	for(i in _RAWEFFECTS) {
var re = _RAWEFFECTS[i];
		if(name == re) {
			return i;
		}
	}
	return 'f';
}
function getColorName(id) {
	for(i in _RAWCOLORS) {
var rc = _RAWCOLORS[i];
		if(id == i) {
			return rc;
		}
	}
	for(i in _RAWEFFECTS) {
var re = _RAWEFFECTS[i];
		if(id == i) {
			return re;
		}
	}
	return 'white';
}


function strf(str, toRaw, allowed) {
	if(typeof(toRaw) == typeof(undefined)) { toRaw = false; }
	if(typeof(allowed) == typeof(undefined)) { allowed = null; }
	return strrawformat(str, toRaw, allowed);
}
var trg = /{[\s]*(?:([\w]+)[\s]*\:[\s]*([\w\W\/]+?)|\*)(?:[\s]*\|[\s]*([\w]+)[\s]*\:[\s]*([\w\W\/]+?))?[\s]*}/;
function strrawformat(str, toRaw, allowed) {
	if(typeof(toRaw) == typeof(undefined)) { toRaw = false; }
	if(typeof(allowed) == typeof(undefined)) { allowed = null; }
	var rf = [];
	var txt = '';
	var ri = -1;
	var isCode = false;
	var txtColor = 'white';
	var isItalic = 0;
	var isBold = 0;
	var isStrike = 0;
	var isUnderlined = 0;
	var isObf = 0;
	str = str+'&r ';
	
	for(var i = 0; i < str.length; i++) {
		var c = str.substr(i, 1);
		if(c == '&' || i == str.length-1) {
			//Check if new section has to be made
			if(txt.length > 0) {
				ri++;
				var cmds = [];
				
				
				rf.push([txt, txtColor, isItalic, isBold, isUnderlined, isStrike, isObf]);
				isItalic = false;
				isBold = false;
				isUnderlined = false;
				isStrike = false;
				isObf = false;
				txtColor = 'white';
				txt = '';
			}
			isCode = true;
			continue;
		} else {
			if(!isCode) {
				txt += c.toString();
			} else {
				//Check Colors
				if(typeof(_RAWCOLORS[c]) != typeof(undefined)) {
					txtColor = _RAWCOLORS[c];
				}
				//Check Markup
				switch(c.toString()) {
					case 'o': {
						isItalic = true;
						break;
					}
					case 'l': {
						isBold = true;
						break;
					}
					case 'n': {
						isUnderlined = true;
						break;
					}
					case 'm': {
						isStrike = true;
						break;
					}
					case 'k': {
						isObf = true;
						break;
					}
					case 'r': {
						isItalic = false;
						isBold = false;
						isUnderlined = false;
						isStrike = false;
						isObf = false;
						txtColor = 'white';
						break;
					}
				}
				isCode = false;
			}
		}
	}
	
	return (!toRaw ? rf : rawformat(rf, true, allowed));
}


function rawformat(str_pieces, fullraw, allowed) {
	if(typeof(fullraw) == typeof(undefined)) { fullraw = true; }
	if(typeof(allowed) == typeof(undefined)) { allowed = null; }
	if(allowed == null) {
		allowed = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS));
		allowed.push('x', 'y');
	}
	var txt = '';
	if(fullraw) { txt+='[""'; }
	
	for(i in str_pieces) {
		var p = str_pieces[i];
		var ntext = p[0].replace(/\"/g, '\\"');
		var nm =  ntext.match(trg) || [];
		if(nm.length > 0) {
			p[7] = nm[1];
			p[8] = nm[2];
			p[9] = nm[3];
			p[10] = nm[4];
			ntext = ntext.replace(nm[0], '');
		}
		var pc = '{"text":"'+ntext+'"';
		if(p[1]) {
			if(allowed.indexOf(getColorId(p[1])) == -1) {
				p[1] = 'white';
			}
			
			pc+=',"color":"'+p[1].toString()+'"';
			
		}
		if(p[2]) {
			if(allowed.indexOf('o') > -1) {
				pc+=',"italic":true';
			}
		}
		if(p[3]) {
			if(allowed.indexOf('i') > -1) {
				pc+=',"bold":true';
			}
		}
		if(p[4]) {
			if(allowed.indexOf('n') > -1) {
				pc+=',"underlined":true';
			}
		}
		if(p[5]) {
			if(allowed.indexOf('m') > -1) {
				pc+=',"strikethrough":true';
			}
		}
		if(p[6]) {
			if(allowed.indexOf('k') > -1) {
				pc+=',"obfuscated":true';
			}
		}
		if(p[7]||'' != '' && p[8]||'' != '' && allowed.indexOf('x') > -1) { pc+=',"clickEvent":{"action":"'+p[7]+'","value":"'+p[8]+'"}'; }
		if((p[9]||"") != '' && (p[10]||"") != '' && allowed.indexOf('y') > -1) { pc+=',"hoverEvent":{"action":"'+p[9]+'","value":"'+ccs((p[10]||"").replace('$', '&'),allowed)+'"}'; }
		pc += '}';

		
		txt+=','+pc.toString();
	}
	
	if(fullraw) {
		txt += ']';
	}
	
	return txt;
	

}

function data_get(data, keys) {
	var get = {};
	for(k in keys) {
		//var key = keys[k];
		get[k] = data.get(k);
		if(get[k] == null) { get[k] = keys[k]; }
	}
	
	return get;
}

function data_register(data, vals) {
	for(k in vals) {
		var val = vals[k];
		if(data.get(k) == null) { data.put(k, val); }
	}
}

function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}

function data_overwrite(data, keys, vals) {
	if(typeof(keys) == typeof(undefined)) { keys = []; }
	if(typeof(vals) == typeof(undefined)) { vals = []; }
	if(typeof(keys) == 'string') { keys = [keys]; }
	if(typeof(vals) == 'string') { vals = [vals]; }
	
	for(k in keys) {
		var key = keys[k];
		var val = vals[k];
		data.put(key, val);
	}
}

function posdir(pos, dir, pitch, len, flying) {
	if(typeof(dir) == typeof(undefined)) { dir = 0; }
	if(typeof(pitch) == typeof(undefined)) { pitch = 0; }
	if(typeof(len) == typeof(undefined)) { len = 1; }
	if(typeof(flying) == typeof(undefined)) { flying = false; }
	var x = pos.getX();
	var y = pos.getY();
	var z = pos.getZ();
	var xdir = getQuartRotation(dir);
	var zdir = getQuartRotation(dir-90);
	x += Math.round(len*(Math.abs(xdir)/90)*sign(xdir));
	z += Math.round(len*(Math.abs(zdir)/90)*sign(zdir));
	if(flying) {
		y += (len)*(Math.abs(pitch)/90)*-sign(pitch);
	}
	return {x:x,y:y,z:z};
}


function fixAngle(angle) {
	angle = Math.abs(angle);
	if(angle >= 360) { angle -= 360; }
	return angle;
}

function lengthpitch_y(pitch, length) {
	return Math.round(pitch/-90)*length;
}


function lengthdir_x(angle, length) {
	if(typeof(length) == typeof(undefined)) { length = 1; }
	return Math.round((getQuartRotation(angle)/90)*length);
}

function lengthdir_z(angle, length) {
	if(typeof(length) == typeof(undefined)) { length = 1; }
	angle = fixAngle(angle+270);
	return -lengthdir_x(angle, length);
}

function pick(a, amount) {
	if(typeof(amount) == typeof(undefined)) { amount = 1; }
	var index = Math.floor(Math.random() * a.length);
	amount = Math.min(a.length, amount);
	if(amount == 1) {
		return a[index];
	} else {
		var picks = [];
		
		while(picks.length < amount) {
			index = Math.floor(Math.random() * a.length);
			if(picks.indexOf(a[index]) == -1) { picks.push(a[index]); }
		}
		
		return picks;
	}
}

function escapeNbtJson(json, trim_ends) {
	if(typeof(trim_ends) == typeof(undefined)) { trim_ends = true; }
	json = json.replace(/(?:\\n|\\)/g, '');
	json = json.replace(/(\d) ([fbds]+)/g, "$1$2");
	json = json.replace(/\\("|')/g, "$1");
	if(trim_ends) {
		json = json.slice(1, json.length - 1);
	}
	
	return json;
}


function array_remove(array, element) {
  var index = array.indexOf(element);

  if (index !== -1) {
    array.splice(index, 1);
  }
}

function pickwhere(a, fn, amount) {
	return pick(array_filter(a, fn), amount);
}

function array_dist(a) {
	var b = [];
	for(c in a) {
		if(b.indexOf(a[c]) == -1) {
			b.push(a[c]);
		}
	}
	
	return b;
}

function objArray(obj) {
	var a = [];
	for(i in obj) {
var o = obj[i];
		a.push(o);
	}
	return a;
}

function array_filter(a, fn) {
	var aa = [];
	for(i in a) {
		if(fn(a[i])) { aa.push(a[i]); }
	}
	
	return aa;
}

function escCcs(str, esc_formats) {
	if(typeof(esc_formats) == typeof(undefined)) { esc_formats = null; }
	if(esc_formats == null) {
		esc_formats = _RAWCODES;
	}
	
	return str.replace(new RegExp('&(['+esc_formats.join("")+'])', 'g'), '');
}

function ccs(str, af) {
	if(typeof(af) == typeof(undefined)) { af = null; }
	return colorCodeString(str, af);
}

function colorCodeString(str, allowed_formats) {
	if(typeof(allowed_formats) == typeof(undefined)) { allowed_formats = null; }
	if(allowed_formats == null) {
		allowed_formats = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS));
	}
	allowed_formats = removeFromArray(allowed_formats, ['x', 'y']);
	return str.replace(new RegExp("&(["+allowed_formats.join("")+"])", 'g'), '\u00A7$1').replace(/&\\/g, '&');
}

function genName(name) {
	var p = [
    'Amazing',
    'Awesome',
    'Blithesome',
    'Excellent',
    'Fabulous',
    'Fantastic',
    'Favorable',
    'Gorgeous',
    'Incredible',
    'Outstanding',
    'Perfect',
    'Propitious',
    'Remarkable',
    'Rousing',
    'Spectacular',
    'Splendid',
    'Stellar',
    'Super',
    'Upbeat',
    'Unbelievable',
    'Wondrous',
	'Tempered',
	'Legendary',
	'Magical'
	];
	var s = [
		'Destruction',
		'Slaughter',
		'Starlight',
		'Heroism',
		'Bonebreaking',
		'The Fallen',
		'Silence',
		'Spellkeeping',
		'Massacre',
		'Sanity',
		'Insanity',
		'Remorse',
		'Fury'
	];
	
	return pick(p) + ' ' + name + ' of ' + pick(s);
}

function nbtCopy(nbt, api) {
	return api.stringToNbt(nbt.toJsonString());
}

function getDayTime(time) {
	while(time > 24000) { time -= 24000; }
	return time;
}

function random_ranges(min, max, amount) {
	var a = 0;
	for(var i = 0; i < amount; i++) { a += random_range(min, max); }
	return a;
}

function rrandom_ranges(min, max, amount) {
	var a = 0;
	for(var i = 0; i < amount; i++) { a += rrandom_range(min, max); }
	return a;
}

function pickchance(a, amount) {
	var aa = [];
	for(e in a) {
		if(!isArray(a[e])) {
			aa[aa.length] = a[e];
		} else {
			for(var i = 0; i < a[e][1]; i++) {
				aa[aa.length] = a[e][0];
			}
		}
	}
	
	return pick(aa, amount);
}

function inArray(a, val) {
	for(k in a) { if(a[k] === val) { return true; } }
	return false
}

function rrandom_range(min, max) { return Math.round(random_range(min, max)); }

function random_range(_min, _max) {
	var min = Math.min(_min, _max);
	var max = Math.max(_min, _max);
	
	var diff = max - min;
	
	return (min + (Math.random() * diff));
}

function array_merge(a1, a2) {
	var bb = [];
	for(k in a1) {
		bb[k] = a1[k];
	}
	for(k in a2) {
		bb[k] = a2[k];
	}
	return bb;
}

function isArray(obj) {
	if(typeof(obj) === 'object') {
      for(k in obj) {
      
          if(isNaN(k)) { return false; }
      }
      

      return true;
    } else { return false }
}

function isObject(obj) {
	return ( typeof(obj) === 'object' && !isArray(obj) );
}


function nbtItem(nbt, w, api) {
	if(typeof(nbt) == 'string') { nbt = api.stringToNbt(nbt); }
	var item = w.createItemFromNbt(nbt);
	
	return item;
}




function isLoaded(npc) {
	var d = npc.getStoreddata();
	var loadstate =  d.get('is_loaded');
	return (loadstate == 1);
}

function unload(e, doesReset) {
	e.npc.getStoreddata().put('is_loaded', 0);
	if(typeof(doesReset) == 'undefined' || doesReset == true) {
		e.npc.reset();
	}
	
}



var MARKET_TABLE = [];
var QUEST_TABLE = [];

var merchant_id = '';



function marketSlotAddTrade(slot, cur1, cur2, sold) {
	var exists = false;
	for(i in MARKET_TABLE) {
		var trade = MARKET_TABLE[i];
		if(trade.slot == slot) {
			trade.trades[trade.trades.length] = {
				cur1: cur1,
				cur2: cur2,
				sold: sold,
			};
			exists = true;
		}
	}
	
	if(!exists) {
		MARKET_TABLE[MARKET_TABLE.length] = {
			slot: slot,
			trades: []
		};
		marketSlotAddTrade(slot, cur1, cur2, sold);
	}
}

function genCoinNote(amount, w) {
	var item = w.createItem('minecraft:paper', 0, 1);
	item.setCustomName(ccs("&aCoin Note&l"));
	item.setLore([
		ccs("&7Redeem your coins at a blacksmith!"),
		ccs("&7Value: &e"+amount.toString()+" Coins&r")
	]);
	
	item.getNbt().setInteger("Money", amount);
	return item;
}

function genQuestItem(quest, w, mId) {
	var item = w.createItem('minecraft:paper', 0, 1);
	item.setCustomName(ccs('&9'+quest.action));
	var nbt = item.getNbt();
	var questitems_nbt = [];
	var questrewards_nbt = [];
	
	var lore = [
		ccs('&r'+quest.desc),
		ccs('&7Gather the following items:'),
	];
	for(i in quest.items) {
		var qi = quest.items[i];
		questitems_nbt.push(qi.getItemNbt());
		lore.push(ccs(' &6&l'+qi.getStackSize().toString()+' &8&lX &r'+qi.getDisplayName()));
	}
	nbt.setList('questItems', questitems_nbt);
	nbt.setString('itemType', 'quest');
	nbt.setString('MerchantId', mId);
	
	lore.push(ccs('&7To receive the following items:'));
	for(i in quest.rewards) {
		var qr = quest.rewards[i];
		questrewards_nbt.push(qr.getItemNbt());
		lore.push(ccs(' &6&l'+qr.getStackSize().toString()+' &8&lX &r'+qr.getDisplayName()));
	}
	nbt.setList('questRewards', questrewards_nbt);
	
	item.setLore(lore);
	
	
	
	
	return item;
	
}

function uniqid(length) {
	if(typeof(length) == typeof(undefined)) { length = 10; }
	var _CHARSET = "01234567890abcdefghijklmnopqrstuvwxyz";
	var id = "";
	
	for(var i = 0; i < length; i++) {
		var index = rrandom_range(0, _CHARSET.length-1);
		id += _CHARSET.slice(index, index+1).toString();
	}
	
	
	return id;
}

function redeemMoney(e, money) {
	if(money != null) {
		var nbt = money.getNbt();
		if(nbt.has('Money')) {
			var mn = nbt.getInteger('Money');
			
			var coins = createCoins(mn, e.player.world);
		
			for(i in coins) {
				e.player.dropItem(coins[i]);
			}
		
		}
	}
}

function genQuestToken(type, tags, w, mId) {
	var item = w.createItem('minecraft:paper', 0, 1);
	item.setCustomName(ccs("&9New Quest&r"));
	item.setLore([
		ccs("&7"+type+" Quest&r")
	]);
	item.getNbt().setList('questTags', tags);
	item.getNbt().setString('itemType', 'quest_token');
	item.getNbt().setString('MerchantId', mId);
	return item;
}

function redeemQuest(e, questitem, mId) {
	var nbt = questitem.getNbt();
	var w = e.player.world;
	
	if(!nbt.has('itemType')) {
		return false;
	} else {
		var item_type = nbt.getString('itemType');
		if(typeof(resetMarket) != typeof(undefined)) { resetMarket(e); }
		switch(item_type) {
			case 'quest_token':
				print('ID: "'+mId.toString()+'"');
				if(nbt.getString('MerchantId').toString() == mId) {
					var quest_tags = nbt.getList('questTags', 8);
					if(quest_tags == null) { quest_tags = []; }
					//Array conversion
					var TEMP_quest_tags = quest_tags;
					quest_tags = [];
					for(i in TEMP_quest_tags) { quest_tags[i] = TEMP_quest_tags[i]; }
					
					
					
					e.player.dropItem(genQuestItem(pick(getQuests(quest_tags)), w, mId));
					return true;
				} else {
					e.npc.sayTo(e.player, "Sorry, but this new quest starter belongs to another merchant!");
					return false;
				}
				break;
			
			case 'quest':
				if(nbt.getString('MerchantId') == mId) {
					//Get necessary items
					var questitems = nbt.getList('questItems', 10);
					if(questitems == null) { questitems = []; }
					//Get reward items
					var questrewards = nbt.getList('questRewards', 10);
					if(questrewards == null) { questrewards = []; }
					
					//check if has items
					for(i in questitems) {
						var qi = w.createItemFromNbt(questitems[i]);
						if(e.player.inventoryItemCount(qi) < qi.getStackSize()) {
							e.npc.say("You don't have enough "+qi.getItemName());
							return false;
						}
					}
					//player Has items
					//remove items
					for(i in questitems) {
						var qi = w.createItemFromNbt(questitems[i]);
						if(!e.player.removeItem(qi, qi.getStackSize())) { return false; }
					}
					
					//Give rewards
					for(i in questrewards) {
						var qr = w.createItemFromNbt(questrewards[i]);
						e.player.dropItem(qr);
					}
					
					return true;
					
				} else {
					e.npc.sayTo(e.player, "Sorry, but I did not give you this quest!\nPerhaps another merchant?");
					return false;
				}
				break;
			
			default:
				return false;
				break;
		}
	}
	
	return false;
	
}

function getQuests(groups) {
	var q = [];
	for(var i = 0; i < QUEST_TABLE.length; i++) {
		var qst = QUEST_TABLE[i];
		var add = true;
		
		for(g in groups) {
			if(qst.groups.indexOf(groups[g]) == -1) { add = false; }
		}
		
		if(add) {
			q.push(qst);
		}
		
	}
	
	return q;
}

function addQuest(quest) {
	QUEST_TABLE.push(quest);
	return quest;
}






var tier = 0;
var tier_skins = [
	'minecraft:textures/entity/iron_golem.png',
	'thc:textures/gold_golem.png',
	'thc:textures/diamond_golem.png',
	'thc:textures/emerald_golem.png'
];
var market_cooldown = 24000*7;
var market_cooldown_base = market_cooldown;


function init(e) {
	
	(function(e){
		var pos = e.npc.getPos();
		e.npc.setHome(pos.getX(), pos.getY()-1, pos.getZ());
		e.npc.getAi().setReturnsHome(false);
	})(e);

	(function(e){
		e.npc.getAi().setAttackInvisible(true);
		var stats = e.npc.getStats();
		stats.setImmune(0, true);
		stats.setImmune(1, false);
		stats.setImmune(2, false);
		stats.setImmune(3, true);
		stats.setImmune(4, true);
		stats.setImmune(5, true);
	})(e);

	(function(e){
		var nbt = e.npc.getNbt();
		if(nbt.has('MerchantId')) { merchant_id = nbt.getString('MerchantId'); }
	})(e);

	
	//Handle Standard NBT
	var nbt = e.npc.getNbt();
	if(!nbt.has('Tier')) {
		nbt.setInteger('Tier', 0);
	} else {
		tier = nbt.getInteger('Tier');
		market_cooldown = market_cooldown_base - (tier * (market_cooldown_base / tier_skins.length));
	}
	
}

function tick(e) {
	
	(function(e){
		var d = e.npc.getStoreddata();
		
		var allCreative = (function(e){
			var pl = e.npc.world.getAllPlayers();
			for(ayer in pl) {
				if(pl[ayer].getGamemode() != 1) { return false; }
			}
			return true;
		})(e);
		
		if(!isLoaded(e.npc) && !allCreative) {
			if(typeof(load) != typeof(undefined)) {
				load(e);
			}
			d.put('is_loaded', 1);
		}
	})(e);
	
	

	
	//Check tier skin
	var disp = e.npc.getDisplay();
	if(disp.getSkinTexture() != tier_skins[tier]) {
		disp.setSkinTexture(tier_skins[tier]);
	}
	if(market_cooldown != (market_cooldown_base - (tier * (market_cooldown_base / tier_skins.length)))) {
		market_cooldown = market_cooldown_base - (tier * (market_cooldown_base / (tier_skins.length*2)));
	}
}

function load(e) {
	
	(function(e){
		var nbt = e.npc.getNbt();
		nbt.setInteger('Tier', tier);
		merchant_id = uniqid(50);
		nbt.setString('MerchantId', merchant_id);
	})(e);

	tier = pickchance([
		[0, 8],
		[1, 4],
		[2, 2],
		[3, 1],
	]);
	e.npc.getDisplay().setSkinTexture(tier_skins[tier]);
	var nbt = e.npc.getNbt();
	
	var data = e.npc.getStoreddata();
	nbt.setInteger('Tier', tier);
	merchant_id = uniqid(50);
	nbt.setString('MerchantId', merchant_id);
	
	

	if(typeof(resetQuests) != typeof(undefined)) { resetQuests(e); }
	if(typeof(resetMarket) != typeof(undefined)) { resetMarket(e); }
	
	var m = e.npc.getRole();
	
	
	if(e.npc.getRole().getType() == 1) {
		//Remove old trades
		for(var i = 0; i < 18; i++) { m.remove(i); }
		//Add new Trades
		for(i in MARKET_TABLE) {
			var trade = MARKET_TABLE[i];
			var newTrade = pickchance(trade.trades);
			m.set(trade.slot, newTrade.cur1, newTrade.cur2, newTrade.sold);
		}
	}

	
	data.put('last_market_reset', e.npc.world.getTime());

}

function resetMarket(e) {
	var w = e.npc.world;

	MARKET_TABLE = [
		{
			slot: 0,
			trades: [
				{
	cur1: w.createItem('minecraft:emerald', 0 , 1),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, 16)
},
{
	cur1: w.createItem('minecraft:gold_ingot', 0, 1),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, 8)
},
{
	cur1: w.createItem('aether_legacy:zanite_gemstone', 0 , 1),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, 24)
},
{
	cur1: w.createItem('extragems:ruby', 0 , 1),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, 20)
},
{
	cur1: w.createItem('extragems:sapphire', 0 , 1),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, 19)
},
{
	cur1: w.createItem('extragems:amethyst', 0 , 1),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, 12)
},
{
	cur1: w.createItem('extragems:topaz', 0 , 1),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, 18)
},
{
	cur1: w.createItem('extragems:crystal', 0 , 1),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, 22)
},
			]
		},
		{
			slot: 2, //Sell Items
			trades: [
				{ //Squid beak
	cur1: w.createItem('xreliquary:mob_ingredient', 12, rrandom_range(8, 16)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(2+tier*8, 6+tier*8))
},
{ //Guardian Spike
	cur1: w.createItem('xreliquary:mob_ingredient', 16, rrandom_range(2, 8)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(8+tier*8, 24+tier*8))
},
{ //Chelicerae (Spider drop)
	cur1: w.createItem('xreliquary:mob_ingredient', 2, rrandom_range(4, 12)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(2+tier*8, 8+tier*8))
},
{ //Catalyzing Gland (creeper)
	cur1: w.createItem('xreliquary:mob_ingredient', 3, rrandom_range(2, 8)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(8+tier*8, 24+tier*8))
},
{ //Slime pearl
	cur1: w.createItem('xreliquary:mob_ingredient', 4, rrandom_range(6, 12)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(4+tier*8, 10+tier*8))
},
{ //Bat Wing
	cur1: w.createItem('xreliquary:mob_ingredient', 5, rrandom_range(12, 40)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(4+tier*8, 16+tier*8))
},
{ //Zombie Heart
	cur1: w.createItem('xreliquary:mob_ingredient', 6, rrandom_range(4, 16)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(2+tier*8, 8+tier*8))
},
{ //Molten Core (Blaze/Magma Cube)
	cur1: w.createItem('xreliquary:mob_ingredient', 7, rrandom_range(4, 12)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(12+tier*8, 32+tier*8))
},
{ //Eye of the Storm (Charged Creeper)
	cur1: w.createItem('xreliquary:mob_ingredient', 5, 1),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(8+tier*8, 32+tier*8))
},
{ //Nebulous Heart (Enderman)
	cur1: w.createItem('xreliquary:mob_ingredient', 11, rrandom_range(2, 10)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(8+tier*8, 32+tier*8))
},
{ //Spider eye
	cur1: w.createItem('minecraft:spider_eye', 0, rrandom_range(4, 12)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(2+tier*8, 16+tier*8))
},
{ //Rotten Flesh
	cur1: w.createItem('minecraft:rotten_flesh', 0, rrandom_range(12, 24)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(4+tier*8, 32+tier*8))
},
{ //String
	cur1: w.createItem('minecraft:string', 0, rrandom_range(12, 24)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(4+tier*8, 24+tier*8))
},
{ //Withered Rib
	cur1: w.createItem('xreliquary:mob_ingredient', 1, rrandom_range(2, 12)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(4+tier*8, 32+tier*8))
},
{ //Bone
	cur1: w.createItem('minecraft:bone', 0, rrandom_range(4, 24)),
	cur2: null,
	sold: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(2+tier*8, 16+tier*8))
},
			]
		},
		{
			slot: 3,
			trades: [
				{
					cur1: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(24, 36)),
					cur2: null,
					sold: w.createItem('minecraft:iron_ingot', 0, rrandom_range(3, 8)),
				},
				{
					cur1: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(24, 32)),
					cur2: null,
					sold: w.createItem('forestry:ingot_copper', 0, rrandom_range(2, 10)),
				},
				{
					cur1: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(20, 32)),
					cur2: null,
					sold: w.createItem('forestry:ingot_tin', 0, rrandom_range(2, 10)),
				},
				{
					cur1: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(28, 42)),
					cur2: null,
					sold: w.createItem('forestry:ingot_bronze', 0, rrandom_range(3, 8)),
				},
				{
					cur1: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(16, 28)),
					cur2: null,
					sold: w.createItem('twilightforest:ironwood_ingot', 0, rrandom_range(2, 6)),
				},
				{
					cur1: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(48, 72)),
					cur2: null,
					sold: w.createItem('twilightforest:fiery_ingot', 0, rrandom_range(2, 6)),
				},
				{
					cur1: w.createItem('ordinarycoins:coinbronze', 0, rrandom_range(12, 32)),
					cur2: null,
					sold: w.createItem('minecraft:leather', 0, rrandom_range(12, 20))
				},
			]
		},
	];
	
	
	var pickCost = rrandom_range(512, 2048);
	
	pickCost -= (pickCost / tier_skins.length * tier)/2;
	
	var pickCostS = Math.floor(pickCost / 64);
	var pickCostB = pickCost - (pickCostS * 64);
	//Add random pickaxe
	marketSlotAddTrade(
		6,
		pickCostB > 0 ? w.createItem('ordinarycoins:coinbronze', 0, pickCostB) : null,
		pickCostS > 0 ? w.createItem('ordinarycoins:coinsilver', 0, pickCostS) : null,
		(function(e){
			var w = e.npc.world;
			var ids = [
				['minecraft:stone_pickaxe', 8],
				['minecraft:iron_pickaxe', 6],
				['minecraft:golden_pickaxe', 8],
				['minecraft:diamond_pickaxe', 2],
				['dungeontactics:gilded_pickaxe', 6],
				['dungeontactics:jewelled_pickaxe', 4],
				['extragems:ruby_pickaxe', 3],
				['extragems:sapphire_pickaxe', 3],
				['extragems:amethyst_pickaxe', 4],
				['extragems:topaz_pickaxe', 3],
				['extragems:crystal_pickaxe', 3],
				['extragems:emerald_pickaxe', 2],
				['twilightforest:fiery_pickaxe', 3]
			];
			var ench = [
				[{//Smelting
					id: 'dungeontactics:smelting',
					minlvl: 1,
					maxlvl: 1
				}, 3],
				[{//Efficiency
					id: 'minecraft:efficiency',
					minlvl: 1,
					maxlvl: 5
				}, 12],
				[{//Silk touch
					id: 'minecraft:silk_touch',
					minlvl: 1,
					maxlvl: 1
				}, 1],
				[{//Unbreaking
					id: 'minecraft:unbreaking',
					minlvl: 1,
					maxlvl: 3
				}, 9],
				[{//Fortune
					id: 'minecraft:fortune',
					minlvl: 1,
					maxlvl: 3
				}, 9],
				[{//Mending
					id: 'minecraft:mending',
					minlvl: 1,
					maxlvl: 1
				}, 1],
				[{//Energy Of The Void
					id: 'ffenchants:void_energy',
					minlvl: 1,
					maxlvl: 1,
				}, 2],
			];
			
			var item = w.createItem(pickchance(ids), 0, 1);
			var enchants = rrandom_range(1, 4);
			var hasIds = [];
			var ii = 0;
			while(ii < enchants) {
				var nE = pickchance(ench);
				if(hasIds.indexOf(nE.id) == -1) {
					item.addEnchantment(nE.id.toString(), rrandom_range(nE.minlvl, nE.maxlvl));
					hasIds[hasIds.length] = nE.id;
					ii++;
				}
			}
			item.setCustomName('\u00A7r'+genName(item.getItemName()));
			
			return item;
		})(e)
	);
	
	
	var swordCost = rrandom_range(512, 2048);
	
	swordCost -= (swordCost / tier_skins.length * tier)/2;
	
	var swordCostS = Math.floor(swordCost / 64);
	var swordCostB = swordCost - (swordCostS * 64);
	//Add random sword
	marketSlotAddTrade(
		9,
		swordCostB > 0 ? w.createItem('ordinarycoins:coinbronze', 0, swordCostB) : null,
		swordCostS > 0 ? w.createItem('ordinarycoins:coinsilver', 0, swordCostS) : null,
		(function(e){
	var w = e.npc.world;
	var ids = [
		['minecraft:stone_sword', 8],
		['minecraft:iron_sword', 6],
		['minecraft:golden_sword', 8],
		['minecraft:diamond_sword', 2],
		['dungeontactics:gilded_sword', 6],
		['dungeontactics:jewelled_sword', 4],
		['extragems:ruby_sword', 3],
		['extragems:sapphire_sword', 3],
		['extragems:amethyst_sword', 4],
		['extragems:topaz_sword', 3],
		['extragems:crystal_sword', 3],
		['extragems:emerald_sword', 2],
		['twilightforest:fiery_sword']
	];
	var ench = [
		[{
			id: 'minecraft:sharpness',
			minlvl: 1,
			maxlvl: 5
		}, 12],
		[{
			id: 'minecraft:smite',
			minlvl: 1,
			maxlvl: 5
		}, 12],
		[{
			id: 'minecraft:bane_of_arthropods',
			minlvl: 1,
			maxlvl: 5
		}, 8],
		[{
			id: 'minecraft:knockback',
			minlvl: 1,
			maxlvl: 3
		}, 6],
		[{
			id: 'minecraft:fire_aspect',
			minlvl: 1,
			maxlvl: 2
		}, 3],
		[{
			id: 'minecraft:looting',
			minlvl: 1,
			maxlvl: 5
		}, 6],
		[{
			id: 'dungeontactics:berserking',
			minlvl: 1,
			maxlvl: 1
		}, 5],
		[{
			id: 'minecraft:unbreaking',
			minlvl: 1,
			maxlvl: 3
		}, 8],
		[{
			id: 'ffenchants:vampiric',
			minlvl: 1,
			maxlvl: 2
		}, 5],
		[{
			id: 'ffenchants:bloodlust',
			minlvl: 1,
			maxlvl: 3
		}, 3],
		[{
			id: 'ffenchants:wither_aspect',
			minlvl: 1,
			maxlvl: 3
		}, 3],
		[{
			id: 'ffenchants:extinguish',
			minlvl: 1,
			maxlvl: 1
		}, 6],
		[{
			id: 'ffenchants:poison_aspect',
			minlvl: 1,
			maxlvl: 2
		}, 4],
		
	];
	
	var item = w.createItem(pickchance(ids), 0, 1);
	var enchants = rrandom_range(1, 4);
	var hasIds = [];
	var ii = 0;
	while(ii < enchants) {
		var nE = pickchance(ench);
		if(hasIds.indexOf(nE.id) == -1) {
			item.addEnchantment(nE.id.toString(), rrandom_range(nE.minlvl, nE.maxlvl));
			hasIds[hasIds.length] = nE.id;
			ii++;
		}
	}
	item.setCustomName('\u00A7r'+genName(item.getItemName()));
	
	return item;
})(e)

	);
	
	
	var helmCost = rrandom_range(512, 2048);
	helmCost -= (helmCost / tier_skins.length * tier)/2;
	
	var helmCostS = Math.floor(helmCost / 64);
	var helmCostB = helmCost - (helmCostS * 64);
	//Add random helmet
	marketSlotAddTrade(
		1,
		helmCostB > 0 ? w.createItem('ordinarycoins:coinbronze', 0, helmCostB) : null,
		helmCostS > 0 ? w.createItem('ordinarycoins:coinsilver', 0, helmCostS) : null,
		(function(e){
	var w = e.npc.world;
	var ids = [
		['minecraft:iron_helmet', 7],
		['minecraft:golden_helmet', 8],
		['minecraft:diamond_helmet', 3],
		['dungeontactics:gilded_helmet', 6],
		['dungeontactics:jewelled_helmet', 5],
		['extragems:ruby_helmet', 4],
		['extragems:sapphire_helmet', 4],
		['extragems:amethyst_helmet', 5],
		['extragems:topaz_helmet', 4],
		['extragems:crystal_helmet', 3],
		['extragems:emerald_helmet', 3],
		['twilightforest:fiery_helmet', 4]
	];
	var ench = [
		[{
			id: 'minecraft:unbreaking',
			minlvl: 1,
			maxlvl: 3
		}, 8],
		[{
			id: pick([
				'minecraft:protection',
				'minecraft:fire_protection',
				'minecraft:projectile_protection',
				'minecraft:blast_protection',
			]),
			minlvl: 1,
			maxlvl: 4
		}, 8],
		[{
			id: 'minecraft:respiration',
			minlvl: 1,
			maxlvl: 3
		}, 2],
		[{
			id: 'minecraft:aqua_affinity',
			minlvl: 1,
			maxlvl: 1
		}, 1],
		[{
			id: 'minecraft:mending',
			minlvl: 1,
			maxlvl: 1
		}, 1],
		[{
			id: 'minecraft:thorns',
			minlvl: 1,
			maxlvl: 3
		}, 4],
		[{
			id: 'ffenchants:cursed_body',
			minlvl: 1,
			maxlvl: 1
		}, 1],
		[{
			id: 'ffenchants:gills',
			minlvl: 1,
			maxlvl: 1
		}, 1],
	];
	
	var item = w.createItem(pickchance(ids), 0, 1);
	var enchants = rrandom_range(1, 4);
	var hasIds = [];
	var ii = 0;
	while(ii < enchants) {
		var nE = pickchance(ench);
		if(hasIds.indexOf(nE.id) == -1) {
			item.addEnchantment(nE.id.toString(), rrandom_range(nE.minlvl, nE.maxlvl));
			hasIds[hasIds.length] = nE.id;
			ii++;
		}
	}
	item.setCustomName('\u00A7r'+genName(item.getItemName()));
	
	return item;
})(e)

	);
	
	var chestpCost = rrandom_range(512, 2048);
	
	chestpCost -= (chestpCost / tier_skins.length * tier)/2;
	
	var chestpCostS = Math.floor(chestpCost / 64);
	var chestpCostB = chestpCost - (chestpCostS * 64);
	//Add random chestplate
	marketSlotAddTrade(
		4,
		chestpCostB > 0 ? w.createItem('ordinarycoins:coinbronze', 0, chestpCostB) : null,
		chestpCostS > 0 ? w.createItem('ordinarycoins:coinsilver', 0, chestpCostS) : null,
		(function(e){
	var w = e.npc.world;
	var ids = [
		['minecraft:iron_chestplate', 7],
		['minecraft:golden_chestplate', 8],
		['minecraft:diamond_chestplate', 3],
		['dungeontactics:gilded_chestplate', 6],
		['dungeontactics:jewelled_chestplate', 5],
		['extragems:ruby_chestplate', 4],
		['extragems:sapphire_chestplate', 4],
		['extragems:amethyst_chestplate', 5],
		['extragems:topaz_chestplate', 4],
		['extragems:crystal_chestplate', 3],
		['extragems:emerald_chestplate', 3],
		['twilightforest:fiery_chestplate', 4]
	];
	var ench = [
		[{
			id: 'minecraft:unbreaking',
			minlvl: 1,
			maxlvl: 3
		}, 8],
		[{
			id: pick([
				'minecraft:protection',
				'minecraft:fire_protection',
				'minecraft:projectile_protection',
				'minecraft:blast_protection',
			]),
			minlvl: 1,
			maxlvl: 4
		}, 8],
		[{
			id: 'minecraft:mending',
			minlvl: 1,
			maxlvl: 1
		}, 1],
		[{
			id: 'minecraft:thorns',
			minlvl: 1,
			maxlvl: 3
		}, 4],
		[{
			id: 'ffenchants:cursed_body',
			minlvl: 1,
			maxlvl: 1
		}, 1],
	];
	
	var item = w.createItem(pickchance(ids), 0, 1);
	var enchants = rrandom_range(1, 4);
	var hasIds = [];
	var ii = 0;
	while(ii < enchants) {
		var nE = pickchance(ench);
		if(hasIds.indexOf(nE.id) == -1) {
			item.addEnchantment(nE.id.toString(), rrandom_range(nE.minlvl, nE.maxlvl));
			hasIds[hasIds.length] = nE.id;
			ii++;
		}
	}
	item.setCustomName('\u00A7r'+genName(item.getItemName()));
	
	return item;
})(e)

	);
	
	var leggCost = rrandom_range(512, 2048);
	
	leggCost -= (leggCost / tier_skins.length * tier)/2;
	var leggCostS = Math.floor(leggCost / 64);
	var leggCostB = leggCost - (leggCostS * 64);
	//Add random leggings
	marketSlotAddTrade(
		7,
		leggCostB > 0 ? w.createItem('ordinarycoins:coinbronze', 0, leggCostB) : null,
		leggCostS > 0 ? w.createItem('ordinarycoins:coinsilver', 0, leggCostS) : null,
		(function(e){
	var w = e.npc.world;
	var ids = [
		['minecraft:iron_leggings', 7],
		['minecraft:golden_leggings', 8],
		['minecraft:diamond_leggings', 3],
		['dungeontactics:gilded_leggings', 6],
		['dungeontactics:jewelled_leggings', 5],
		['extragems:ruby_leggings', 4],
		['extragems:sapphire_leggings', 4],
		['extragems:amethyst_leggings', 5],
		['extragems:topaz_leggings', 4],
		['extragems:crystal_leggings', 3],
		['extragems:emerald_leggings', 3],
		['twilightforest:fiery_leggings', 4]
	];
	var ench = [
		[{
			id: 'minecraft:unbreaking',
			minlvl: 1,
			maxlvl: 3
		}, 8],
		[{
			id: pick([
				'minecraft:protection',
				'minecraft:fire_protection',
				'minecraft:projectile_protection',
				'minecraft:blast_protection',
			]),
			minlvl: 1,
			maxlvl: 4
		}, 8],
		[{
			id: 'minecraft:mending',
			minlvl: 1,
			maxlvl: 1
		}, 1],
		[{
			id: 'minecraft:thorns',
			minlvl: 1,
			maxlvl: 3
		}, 4],
		[{
			id: 'ffenchants:cursed_body',
			minlvl: 1,
			maxlvl: 1
		}, 1],
		[{
			id: 'ffenchants:leaping',
			minlvl: 1,
			maxlvl: 3
		}, 1],
	];
	
	var item = w.createItem(pickchance(ids), 0, 1);
	var enchants = rrandom_range(1, 4);
	var hasIds = [];
	var ii = 0;
	while(ii < enchants) {
		var nE = pickchance(ench);
		if(hasIds.indexOf(nE.id) == -1) {
			item.addEnchantment(nE.id.toString(), rrandom_range(nE.minlvl, nE.maxlvl));
			hasIds[hasIds.length] = nE.id;
			ii++;
		}
	}
	item.setCustomName('\u00A7r'+genName(item.getItemName()));
	
	return item;
})(e)

	);
	


	var bootsCost = rrandom_range(512, 2048);
	bootsCost -= (bootsCost / tier_skins.length * tier)/2;
	var bootsCostS = Math.floor(bootsCost / 64);
	var bootsCostB = bootsCost - (bootsCostS * 64);
	//Add random boots
	marketSlotAddTrade(
		10,
		bootsCostB > 0 ? w.createItem('ordinarycoins:coinbronze', 0, bootsCostB) : null,
		bootsCostS > 0 ? w.createItem('ordinarycoins:coinsilver', 0, bootsCostS) : null,
		(function(e){
	var w = e.npc.world;
	var ids = [
		['minecraft:iron_boots', 7],
		['minecraft:golden_boots', 8],
		['minecraft:diamond_boots', 3],
		['dungeontactics:gilded_boots', 6],
		['dungeontactics:jewelled_boots', 5],
		['extragems:ruby_boots', 4],
		['extragems:sapphire_boots', 4],
		['extragems:amethyst_boots', 5],
		['extragems:topaz_boots', 4],
		['extragems:crystal_boots', 3],
		['extragems:emerald_boots', 3],
		['twilightforest:fiery_boots', 4]
	];
	var ench = [
		[{
			id: 'minecraft:unbreaking',
			minlvl: 1,
			maxlvl: 3
		}, 8],
		[{
			id: pick([
				'minecraft:protection',
				'minecraft:fire_protection',
				'minecraft:projectile_protection',
				'minecraft:blast_protection',
			]),
			minlvl: 1,
			maxlvl: 4
		}, 8],
		[{
			id: pick([
				'minecraft:depth_strider',
				'minecraft:frost_walker',
			]),
			minlvl: 1,
			maxlvl: 3
		}, 2],
		[{
			id: 'minecraft:feather_falling',
			minlvl: 1,
			maxlvl: 4
		}, 4],
		
		[{
			id: 'minecraft:mending',
			minlvl: 1,
			maxlvl: 1
		}, 1],
		[{
			id: 'minecraft:thorns',
			minlvl: 1,
			maxlvl: 3
		}, 4],
		[{
			id: 'ffenchants:ascension',
			minlvl: 1,
			maxlvl: 1
		}, 3],
		[{
			id: 'ffenchants:cursed_body',
			minlvl: 1,
			maxlvl: 1
		}, 1],
		
	];
	
	var item = w.createItem(pickchance(ids), 0, 1);
	var enchants = rrandom_range(1, 4);
	var hasIds = [];
	var ii = 0;
	while(ii < enchants) {
		var nE = pickchance(ench);
		if(hasIds.indexOf(nE.id) == -1) {
			item.addEnchantment(nE.id.toString(), rrandom_range(nE.minlvl, nE.maxlvl));
			hasIds[hasIds.length] = nE.id;
			ii++;
		}
	}
	item.setCustomName('\u00A7r'+genName(item.getItemName()));
	
	return item;
})(e)

	);
	
	var shieldCost = rrandom_range(512, 2048);
	shieldCost -= (shieldCost / tier_skins.length * tier)/2;
	var shieldCostS = Math.floor(shieldCost / 64);
	var shieldCostB = shieldCost - (shieldCostS * 64);
	//Add random shield
	marketSlotAddTrade(
		12,
		shieldCostB > 0 ? w.createItem('ordinarycoins:coinbronze', 0, shieldCostB) : null,
		shieldCostS > 0 ? w.createItem('ordinarycoins:coinsilver', 0, shieldCostS) : null,
		(function(e){
	var w = e.npc.world;
	var ids = [
		['minecraft:shield', 12],
		['dungeontactics:stone_shield', 10],
		['dungeontactics:iron_shield', 7],
		['dungeontactics:golden_shield', 8],
		['dungeontactics:diamond_shield', 3],
		['dungeontactics:gilded_shield', 6],
		['dungeontactics:jewelled_shield', 5],
		['dungeontactics:ruby_shield', 4],
		['dungeontactics:sapphire_shield', 4],
		['dungeontactics:amethyst_shield', 5],
		['dungeontactics:topaz_shield', 4],
		['dungeontactics:crystal_shield', 3],
		['dungeontactics:emerald_shield', 3],
	];
	var ench = [
		[{
			id: 'minecraft:unbreaking',
			minlvl: 1,
			maxlvl: 3
		}, 8],

		[{
			id: 'minecraft:mending',
			minlvl: 1,
			maxlvl: 1
		}, 1],
	];
	
	var item = w.createItem(pickchance(ids), 0, 1);
	var enchants = rrandom_range(1, 2);
	var hasIds = [];
	var ii = 0;
	while(ii < enchants) {
		var nE = pickchance(ench);
		if(hasIds.indexOf(nE.id) == -1) {
			item.addEnchantment(nE.id.toString(), rrandom_range(nE.minlvl, nE.maxlvl));
			hasIds[hasIds.length] = nE.id;
			ii++;
		}
	}
	item.setCustomName('\u00A7r'+genName(item.getItemName()));
	
	return item;
})(e)

	);
	
}


function resetQuests(e) {
	var w = e.npc.world;
	//Add Mine quest
	QUEST_TABLE = [];
	var qst_mine = addQuest({action:'Mine ore(s)', items:[], rewards:[], groups:['mine', 'blacksmith'], desc: 'Blacksmith Quest'});
	
	var qst_mine_ore_count = pickchance([
		[1, 4],
		[2, 3],
		[3, 2],
		[4, 1],
	]);
	
	for(var i = 0; i < qst_mine_ore_count; i++) {
		qst_mine.items.push(pick([
			w.createItem('dungeontactics:cluster_iron', 0, rrandom_range(8, 32)),
			w.createItem('dungeontactics:cluster_gold', 0, rrandom_range(1, 8)),
			w.createItem('dungeontactics:cluster_tin', 0, rrandom_range(24, 48)),
			w.createItem('dungeontactics:cluster_copper', 0, rrandom_range(24, 48)),
			w.createItem('minecraft:coal', 0, rrandom_range(24, 48)),
		]));
	}
	var itemIds = [];
	var ii = [];
	for(i in qst_mine.items) {
		if(itemIds.indexOf(qst_mine.items[i].getName()) == -1) {
			ii.push(qst_mine.items[i]);
			itemIds.push(qst_mine.items[i].getName());
		}
	}
	qst_mine.items = ii;

	var qst_mine_coins = rrandom_ranges(12+(tier*16), 48+((tier*16)/2), qst_mine_ore_count);
	qst_mine.rewards = createCoins(qst_mine_coins, w);
	
}


function newDay(e) {
	
}
var coins = [
	'ordinarycoins:coinbronze',
	'ordinarycoins:coinsilver',
	'ordinarycoins:coingold',
	ASSET_MOD_ID+':diamondcoin',
	ASSET_MOD_ID+':emeraldcoin'
];
function createCoins(amount, w) {
	var c = [];
	for(var i = coins.length-1; i >= 0; i--) {
		var icoin = null;
		var icoin_amount = 0;
		
		while(amount >= Math.pow(64, i)) {
			amount -= Math.pow(64, i);
			icoin_amount++;
		}
		
		if(icoin_amount > 0) {
			c.push(w.createItem(coins[i], 0, icoin_amount));
		}
		
	}
	return c;
}

function interact(e) {
	
	
	
	var doesNotify = [
		[true, 1],
		[false, 4],
	];
	
	if(!e.player.isSneaking()) {
		if(pickchance(doesNotify)) {
			var gapple_names = [
				'&e&lGolden Apple&r',
				'&b&lDiamond Apple&r',
				'&a&lEmerald Apple&r',
			];
			
			var notifications = [
				'&lSHIFT+RCLICK&r me with a single OR stack coins to convert!\nLess than a stack will convert back, a stack will convert forward',
				'&lSHIFT+RCLICK&r me without any item to reset the market!',
				'&lSHIFT+RCLICK&r me with a &lName Tag&r and an &litem in offhand&r to rename the item in offhand for &7&l1 silver coin&r!',
				'&lSHIFT+RCLICK&r me with enchanted books in both hands to combine them for &7&l1 silver coin&r',
				'&lSHIFT+RCLICK&r me with an item in offhand and an enchanted book in mainhand to add enchants for &7&l1 silver Coin per enchant&r.'
			];
			if(hasTraits(e.player, 'compatskills.rename_tag')) {
				notifications.push('&lSHIFT+RCLICK&r me with a &lName Tag&r only to rename it with color coding for &6&l16 bronze coins&r!');
			}
			
			//Add tier notification if tier is not max-tier
			if(tier < tier_skins.length-1) {
				notifications.push('Use a '+gapple_names[tier].toString()+' to upgrade tier for faster market resets, better deals and quests!');
			}
			
			e.npc.sayTo(e.player, ccs(pick(notifications)));
		}
	} else {
		//Player sneaks
		var converted = false;
		var data = e.npc.getStoreddata();
		var w = e.npc.world;
		
		
		var heldCoin = e.player.getMainhandItem();
		if(heldCoin != null) {
			if(coins.indexOf(heldCoin.getName()) != -1) {
				
				//Valid Coin
				var size = heldCoin.getStackSize();
				var coinIndex = coins.indexOf(heldCoin.getName());
				
				if(size == 64) {
					if(coinIndex < coins.length-1) { //Can convert forward?
						e.player.removeItem(heldCoin.getName(), 0, 64);
						e.player.dropItem(e.npc.world.createItem(coins[coinIndex+1], 0, 1));
					}
				} else {
					if(coinIndex > 0) {
						e.player.removeItem(heldCoin.getName(), 0, 1);
						e.player.dropItem(e.npc.world.createItem(coins[coinIndex-1], 0, 64));
					}
				}
				converted = true;
			}
		}
		//Has not converted coins?
		if(!converted) {
			//Rename nametag with color
			var heldTag = e.player.getMainhandItem();
			
			if(heldTag != null) {
				if(e.player.getOffhandItem() == null) {
					if(heldTag.getName() == 'minecraft:name_tag') {
						if(hasTraits(e.player, 'compatskills.rename_tag')) {
							if(heldTag.hasCustomName()) {
								if(e.player.removeItem('ordinarycoins:coinbronze', 0, 16)) {
									var newTag = w.createItem('minecraft:name_tag', 0, 1);
									newTag.getNbt().setInteger('RepairCost', 0);
									newTag.setCustomName(ccs('&r'+heldTag.getDisplayName()+'&r'));
									e.player.setMainhandItem(null);
									e.player.dropItem(newTag);
									
								} else {
									e.npc.sayTo(e.player, ccs('You do not have enough money!'));
								}
							} else {
								e.npc.sayTo(e.player, ccs("The name tag does not have a custom name!\nuse &lampersands&r for color coding!"));
							}
						}
						converted = true;
					}
				}
			}
			
		}
		//Has not renamed name tag
		if(!converted) {
			//Rename item
			var heldTag = e.player.getMainhandItem();
			var heldItem = e.player.getOffhandItem();
			var notRenamable = [
				'ordinarycoins:coinbronze',
				'ordinarycoins:coinsilver',
				'ordinarycoins:coingold',
				ASSET_MOD_ID+':emeraldcoin',
				'minecraft:name_tag',
				'minecraft:spawn_egg',
				'sohpisticatedwolves:swdogegg'
			];
			
			//Heeft de speler in beide handen een item
			if(heldTag != null && heldItem != null) {
				if(heldTag.getName() == 'minecraft:name_tag') { //Is het een name tag?
					if(heldTag.hasCustomName()) { //Heeft ie een eigen naam bro
						if(notRenamable.indexOf(heldItem.getName()) == -1) { //Is het een item die je niet kan renamen
							if(e.player.removeItem('ordinarycoins:coinsilver', 0, 1)) { //Moet paye bro
								e.player.setMainhandItem(null);
								heldItem.setCustomName(heldTag.getDisplayName());
							} else {//Je bent echt skeer man
								e.npc.sayTo(e.player, "You don't have enough coins!");
							}
						} else {
							e.npc.sayTo(e.player, "You can't rename this item!");
						}
					} else {
						e.npc.sayTo(e.player, "Nametag does not have a custom name!\nYou can color code a name tag by SHIFT+RCLICKING me with a name tag only!");
					}
					
					
					converted = true;
				}
			}
		}
		//Has not tried to rename item
		if(!converted) {
			//Redeem special paper item
			var item = e.player.getMainhandItem();
			if(item != null) {
				if(item.getName() == 'minecraft:paper') {
					if(item.getStackSize() == 1) {
						if(item.getNbt().has('itemType')) {
							if(item.getNbt().getString('itemType') != 'money') {
								if(redeemQuest(e, item, merchant_id)) { e.player.setMainhandItem(null); }
								resetQuests(e);
								converted = true;
							} else {
								if(redeemMoney(e, money)) { e.player.setMainhandItem(null); }
								converted = true;
							}
						}
						
						if(item.getNbt().has("Money")) {
							var gcoins = createCoins(item.getNbt().getInteger("Money"), e.player.world);
							if(e.player.removeItem(item, 1)) {
								for(i in gcoins) { e.player.dropItem(gcoins[i]); }
								converted = true;
							}
						}
					} else {
						e.npc.sayTo(e.player, "You don't have a single quest in hand!");
					}
				}
			}
		}
		
		if(!converted) {
			//Upgrade tier
			
			var gapples = [
				'minecraft:golden_apple',
				ASSET_MOD_ID+':diamondapple',
				ASSET_MOD_ID+':emeraldapple',
			];
			var gapple = e.player.getMainhandItem();
			
			if(gapple != null) {
				if(gapples.indexOf(gapple.getName()) != -1) {
					var newTier = gapples.indexOf(gapple.getName());
					if(newTier+1 == tier+1) {
						if(e.player.removeItem(gapple.getName(), 0, 1)) {
							tier = newTier+1;
							e.npc.getNbt().setInteger('Tier', newTier);
							

	if(typeof(resetQuests) != typeof(undefined)) { resetQuests(e); }
	if(typeof(resetMarket) != typeof(undefined)) { resetMarket(e); }
	
	var m = e.npc.getRole();
	
	
	if(e.npc.getRole().getType() == 1) {
		//Remove old trades
		for(var i = 0; i < 18; i++) { m.remove(i); }
		//Add new Trades
		for(i in MARKET_TABLE) {
			var trade = MARKET_TABLE[i];
			var newTrade = pickchance(trade.trades);
			m.set(trade.slot, newTrade.cur1, newTrade.cur2, newTrade.sold);
		}
	}

							e.npc.getStoreddata().put('last_market_reset', e.npc.world.getTime());
							e.npc.sayTo(e.player, 'Upgraded tier!');
						}
					} else {
						e.npc.sayTo(e.player, 'This tier is too low/high');
					}
					
					converted = true;
				}
			}
			
		}
		//Has not tried to upgrade tier?
		if(!converted) {
			//Combine enchanted books
			var mbook = e.player.getMainhandItem();
			var obook = e.player.getOffhandItem();
			if(mbook != null && obook != null) {
				if(mbook.getName() == 'minecraft:enchanted_book' && obook.getName() == 'minecraft:enchanted_book') {
					if(e.player.removeItem('ordinarycoins:coinsilver', 0, 1)) {
						var mEnch = mbook.getNbt().getList('StoredEnchantments', 10);
						var oEnch = obook.getNbt().getList('StoredEnchantments', 10);
						
						var newEnch = [];
						for(i in mEnch) {
							newEnch.push(mEnch[i]);
						}
						for(i in oEnch) {
							var ench = oEnch[i];
							var ench_id = parseInt(ench.getShort('id'));
							var ench_lvl = parseInt(ench.getShort('lvl'));
							var shouldAdd = true;
							
							for(j in newEnch) {
								if(j < newEnch.length) {
									var nench = newEnch[j];
									var nench_id = parseInt(nench.getShort('id'));
									var nench_lvl = parseInt(nench.getShort('lvl'));
									
									if(nench_id == ench_id) {
										if(ench_lvl > nench_lvl) {
											array_remove(newEnch, nench);
										} else { shouldAdd = false; }
									}
								}
							}
							
							if(shouldAdd) { newEnch.push(ench); }
						}
						e.player.setMainhandItem(null);
						e.player.setOffhandItem(null);
						var nbook = e.player.world.createItem('minecraft:enchanted_book', 0, 1);
						nbook.getNbt().setList('StoredEnchantments', newEnch);
						e.player.dropItem(nbook);
					} else { e.npc.sayTo(e.player, ccs("You don't have enough money!\nYou need &71 silver coin&r!")); }
					converted = true;
				}
			}
			
		}
		//Has not combined enchanted books
		if(!converted) {
			//Add enchant to item
			var item = e.player.getOffhandItem();
			var book = e.player.getMainhandItem();
			
			if(item != null && book != null) {
				if(item.getName() != 'minecraft:enchanted_book' && book.getName() == 'minecraft:enchanted_book') {
					if(!item.isEnchanted()) {
						//Counting enchants on book
						var enchants = book.getNbt().getList('StoredEnchantments', 10);
						var enchant_count = enchants.length;
						if(e.player.removeItem('ordinarycoins:coinsilver', 0, parseInt(enchant_count))) {
							
							var newItem = item.copy();
							newItem.getNbt().setList('ench', enchants);
							
							e.player.setOffhandItem(null);
							e.player.setMainhandItem(null);
							
							e.player.dropItem(newItem);	
						} else {
							e.npc.sayTo(e.player, 'You don\'t have enough money!');
						}
					} else {
						e.npc.sayTo(e.player, ccs('The item is already enchanted!'));
					}
					converted = true;
				}
			}
		}
		if(!converted) {
			//Market reset
			
			var calc_cooldown = market_cooldown;
			var more_deals = hasTraits(e.player, 'compatskills.more_deals');
			if(more_deals) { calc_cooldown /= 2; }
			
			var canReset = data.get('last_market_reset') == null ? true : (e.npc.world.getTime() >= parseInt(data.get('last_market_reset'))+calc_cooldown);
			if(canReset || e.player.getGamemode() == 1) {
				e.npc.say('The market is reset and a new quest is given');
				

	if(typeof(resetQuests) != typeof(undefined)) { resetQuests(e); }
	if(typeof(resetMarket) != typeof(undefined)) { resetMarket(e); }
	
	var m = e.npc.getRole();
	
	
	if(e.npc.getRole().getType() == 1) {
		//Remove old trades
		for(var i = 0; i < 18; i++) { m.remove(i); }
		//Add new Trades
		for(i in MARKET_TABLE) {
			var trade = MARKET_TABLE[i];
			var newTrade = pickchance(trade.trades);
			m.set(trade.slot, newTrade.cur1, newTrade.cur2, newTrade.sold);
		}
	}

				e.player.dropItem(genQuestToken('Blacksmith', ['blacksmith'], e.player.world, merchant_id));
	
				data.put('last_market_reset', e.npc.world.getTime());
				converted = true;
			} else {
				var timeleft = 0;
				if(data.get('last_market_reset') != null) {
					timeleft = Math.round((calc_cooldown/20)-( e.npc.world.getTime() - parseInt(data.get('last_market_reset')) )/20);
				}
				var _timeleft = timeleft;
				var tm_d = Math.floor(timeleft/60/60/24);
				timeleft -= tm_d*60*60*24;
				var tm_h = Math.floor(timeleft/60/60);
				timeleft -= tm_h*60*60;
				var tm_m = Math.floor(timeleft/60);
				timeleft -= tm_m*60;
				var tm_s = Math.floor(timeleft);
				var timeleftStr = ccs( (more_deals?'&c&l':'')+tm_d.toString()+'d'+tm_h.toString()+'h'+tm_m.toString()+'m'+tm_s.toString()+'s'+(more_deals?'&r':'') );
				
				e.npc.sayTo(e.player, 'Cannot reset market now.'+(_timeleft > 0 ? "\nPlease wait "+timeleftStr+"." : ''));
			}
		}
		//Has not reset market?
		
		
		e.setCanceled(true);
	}
}

