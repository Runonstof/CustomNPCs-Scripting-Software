var SCRIPT_VERSION = '1.1a';

//==Reallife date handler for hiring regions etc
var msTable = {
	'y': 31556926000,
	'mon': 2629743830,
	'w': 604800000,
	'd': 86400000,
	'h': 3600000,
	'min': 60000,
	's': 1000,
	'ms': 1
};

Date.prototype.addTime = function(addTime) {
	this.setTime(this.getTime()+addTime);
};

Date.prototype.hasPassed = function(passDate) {
	return (this.getTime() >= passDate.getTime());
};

//Converts TimeString to number
function getStringTime(timeString) {
	//0y4mon3d 6h 8min3s 800ms
	var reg = /([\d]+)([a-zA-Z]+)/g;
	var _m = timeString.match(reg);
	var newTime = 0;
	var _tk = Object.keys(msTable);
	
	for(m in _m) {
		var fm = _m[m];
		var nm = fm.replace(reg, '$1').cInt();
		var om = fm.replace(reg, '$2');
		if(nm != null) {
			if(_tk.indexOf(om) != -1) {
				newTime += nm * (msTable[_tk[_tk.indexOf(om)]]);
			} else { newTime += nm; }
		}
	}
	
	return newTime;
}
//Converts number to TimeString
function getTimeString(stringTime, excludes) {
	if(typeof(excludes) == typeof(undefined)) { excludes = []; }
	var newTime = parseInt(stringTime);
	var newStr = '';
	for(ms in msTable) {
		if(excludes.indexOf(ms) == -1) {
			var msnum = 0;
			while(newTime >= msTable[ms]) {
				msnum++;
				newTime -= msTable[ms];
			}
			if(msnum > 0) {
				newStr += msnum.toString()+ms;
			}
		}
	}
	
	
	return newStr;
}function getFnArgs(fn) {
	var fnrgx = /function[\s]+([\w]+)\(([\w,\s]+)\)/;
	var fnstr = fn.toString();
	var fnargs = [];
	var m = fnstr.match(fnrgx);
	if(m != null) {
		
      	m[2].split(',').forEach(function(a){
        	fnargs.push(a.trim());
        });
      	
      	return fnargs;
	}
	
	return fnargs;
}
String.prototype.allMatch = function(regx) {
	var m = this.match(regx);
	var rr = [];
	for(mm in m) {
		var mt = m[mm];
		var rx = regx.exec(this);
		rr.push(rx);
	}
	
	return rr;
};


String.prototype.cmatch = function(regx) {
	return (this.match(regx) || []).length;
};

String.prototype.rangeUpper = function(min, max) {
	var str = '';
	for(var i = 0; i < this.length; i++) {
		var c = this.substring(i, i+1); //curchar
		if(i >= min && i < max) {
			c=c.toUpperCase();
		}
		str+=c.toString();
	}
	return str;
};

String.prototype.pad = function(character, len) {
	var n = this.toString();
	for(var i = n.length; i < len; i++) {
		n += character.toString();
	}
	return n;
};

String.prototype.padMiddle = function(character, len) {
	
	var n = this.toString();
	var sc = Math.floor((len-n.length)/2);
	var ns = '';
	for(var i = 0; i < sc; i++) {
		ns += character.toString();
	}
	ns+=n;
	for(i = 0; i < sc; i++) {
		ns += character.toString();
	}
	return ns;
};

String.prototype.cInt = function() {
	return (isNaN(parseInt(this)) ? null : parseInt(this));
};

String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

String.prototype.append = function(ch, amount) {
	var new_str = this.toString();
  	for(var i = 0; i < amount; i++) {
    	if(i >= new_str.length) {
        	new_str += ch.toString();
        }
    }
  
  return new_str;
};

String.prototype.prepend = function(ch, amount) {
	var new_str = this.toString();
  	for(var i = 0; i < amount; i++) {
    	if(i >= new_str.length) {
        	new_str = ch.toString()+new_str;
        }
    }
  
  return new_str;
};

var ASSET_MOD_ID = "adventureassets";

function objMerge(obj1,obj2){
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
    return obj3;
}

function getHalfRotation(angle) {
	angle = fixAngle(angle);
	if(angle <= 180) { return angle; } else { return -(180-(angle-180)); }
}

function UUIDLM() { return rrandom_range(1, 99999); }

function getQuartRotation(dir) {
	dir = getHalfRotation(dir);
	
	if(Math.abs(dir) > 90) {
		dir = (180-Math.abs(dir))*sign(dir);
	}
	
	return dir;
}

function playerIsOnline(world, player) {
	var isOnline = false;
	var pl = world.getAllPlayers();
	for(p in pl) {
		if(pl[p].getName() == player.toString()) {
			isOnline = true;
			break;
		}
	}
	return isOnline;
}

function getHandItem(player) {
	return player.getMainhandItem() || player.getOffhandItem();
}
function uniqid() {
	var id = '';
	for(var i = 0; i <= 3; i++) {
		id+=Math.random().toString(36).substr(2, 9);
	}
	return id;
}

function arrayOccurs(string, subArray, allowOverlapping) {
	if(typeof(allowOverlapping) == typeof(undefined)) { allowOverlapping = false; }
	var occ = 0;
	for(i in subArray) {
var sel = subArray[i];
		occ += occurrences(string, sel, allowOverlapping);
	}
	
	return occ;
}

function occurrences(string, subString, allowOverlapping) {
	if(typeof(allowOverlapping) == typeof(undefined)) { allowOverlapping = false; }
    string += "";
    subString += "";
	
    if (subString.length <= 0) return (string.length + 1);

    var n = 0,
        pos = 0,
        step = allowOverlapping ? 1 : subString.length;

    while (true) {
        pos = string.indexOf(subString, pos);
        if (pos >= 0) {
            ++n;
            pos += step;
        } else break;
    }
    return n;
}

function arrayTakeRange(arr, start, end) {
	if(typeof(end) == typeof(undefined)) { end = null; }
	if(end == null) { end = arr.length; }
	var a = [];
	var _end = Math.min(end, arr.length);
	var _start = Math.min(start, _end);
	for(var i = _start; i < Math.min(end, arr.length); i++) {
		if(typeof(arr[i]) != typeof(undefined)) {
			a.push(arr[i]);
		}
	}
	return a;
}


function sign(num) {
	if(typeof(num) == typeof(undefined)) { num = 0; }
	if(num > 0) { return 1; }
	if(num < 0) { return -1; }
	return 0;
}

function g(obj, grp_props) {
	for(j in grp_props) {
		var props = grp_props[j];
		for(i in props[0]) {
			if(obj != null) {
				if(typeof(obj[props[0][i]]) != typeof(undefined)) {
					obj = obj[props[0][i]];
					
					break;
				}
			}
		}
	}
	
	
	return obj;
}

function httpGetAsync(theUrl, callback)
{
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() { 
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
            callback(xmlHttp.responseText);
    }
    xmlHttp.open("GET", theUrl, true); // true for asynchronous 
    xmlHttp.send(null);
}

function getAllFuncs(obj) {
    var props = [];

    do {
        props = props.concat(Object.getOwnPropertyNames(obj));
    } while (obj = Object.getPrototypeOf(obj));

    return props.sort().filter(function(e, i, arr) { 
       if (e!=arr[i+1] && typeof obj[e] == 'function') return true;
    });
}

function removeFromArray(arr, vals) {
	if(typeof(vals) == 'string') { vals = [vals]; }
	var a = arr;
	for(v in vals) {
var val = vals[v];
		array_remove(a, val);
	}
	return a;
}

var _RAWCOLORS = {
	'0': 'black',
	'1': 'dark_blue',
	'2': 'dark_green',
	'3': 'dark_aqua',
	'4': 'dark_red',
	'5': 'dark_purple',
	'6': 'gold',
	'7': 'gray',
	'8': 'dark_gray',
	'9': 'blue',
	'a': 'green',
	'b': 'aqua',
	'c': 'red',
	'd': 'light_purple',
	'e': 'yellow',
	'f': 'white',
};

var _RAWEFFECTS = {
	'o': 'italic',
	'l': 'bold',
	'k': 'magic',
	'm': 'strike',
	'n': 'underline',
	'r': 'reset'
}

var _RAWCODES = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS));
function getColorId(name) {
	for(i in _RAWCOLORS) {
		if(name == _RAWCOLORS[i]) {
			return i;
		}
	}
	for(i in _RAWEFFECTS) {
var re = _RAWEFFECTS[i];
		if(name == re) {
			return i;
		}
	}
	return 'f';
}
function getColorName(id) {
	for(i in _RAWCOLORS) {
var rc = _RAWCOLORS[i];
		if(id == i) {
			return rc;
		}
	}
	for(i in _RAWEFFECTS) {
var re = _RAWEFFECTS[i];
		if(id == i) {
			return re;
		}
	}
	return 'white';
}


function strf(str, toRaw, allowed) {
	if(typeof(toRaw) == typeof(undefined)) { toRaw = false; }
	if(typeof(allowed) == typeof(undefined)) { allowed = null; }
	return strrawformat(str, toRaw, allowed);
}
var trg = /{[\s]*(?:([\w]+)[\s]*\:[\s]*([\w\W\/]+?)|\*)(?:[\s]*\|[\s]*([\w]+)[\s]*\:[\s]*([\w\W\/]+?))?[\s]*}/;
function strrawformat(str, toRaw, allowed) {
	if(typeof(toRaw) == typeof(undefined)) { toRaw = false; }
	if(typeof(allowed) == typeof(undefined)) { allowed = null; }
	var rf = [];
	var txt = '';
	var ri = -1;
	var isCode = false;
	var txtColor = 'white';
	var isItalic = 0;
	var isBold = 0;
	var isStrike = 0;
	var isUnderlined = 0;
	var isObf = 0;
	str = str+'&r ';
	
	for(var i = 0; i < str.length; i++) {
		var c = str.substr(i, 1);
		if(c == '&' || i == str.length-1) {
			//Check if new section has to be made
			if(txt.length > 0) {
				ri++;
				var cmds = [];
				
				
				rf.push([txt, txtColor, isItalic, isBold, isUnderlined, isStrike, isObf]);
				isItalic = false;
				isBold = false;
				isUnderlined = false;
				isStrike = false;
				isObf = false;
				txtColor = 'white';
				txt = '';
			}
			isCode = true;
			continue;
		} else {
			if(!isCode) {
				txt += c.toString();
			} else {
				//Check Colors
				if(typeof(_RAWCOLORS[c]) != typeof(undefined)) {
					txtColor = _RAWCOLORS[c];
				}
				//Check Markup
				switch(c.toString()) {
					case 'o': {
						isItalic = true;
						break;
					}
					case 'l': {
						isBold = true;
						break;
					}
					case 'n': {
						isUnderlined = true;
						break;
					}
					case 'm': {
						isStrike = true;
						break;
					}
					case 'k': {
						isObf = true;
						break;
					}
					case 'r': {
						isItalic = false;
						isBold = false;
						isUnderlined = false;
						isStrike = false;
						isObf = false;
						txtColor = 'white';
						break;
					}
				}
				isCode = false;
			}
		}
	}
	
	return (!toRaw ? rf : rawformat(rf, true, allowed));
}


function rawformat(str_pieces, fullraw, allowed) {
	if(typeof(fullraw) == typeof(undefined)) { fullraw = true; }
	if(typeof(allowed) == typeof(undefined)) { allowed = null; }
	if(allowed == null) {
		allowed = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS));
		allowed.push('x', 'y');
	}
	var txt = '';
	if(fullraw) { txt+='[""'; }
	
	for(i in str_pieces) {
		var p = str_pieces[i];
		var ntext = p[0].replace(/\"/g, '\\"');
		var nm =  ntext.match(trg) || [];
		if(nm.length > 0) {
			p[7] = nm[1];
			p[8] = nm[2];
			p[9] = nm[3];
			p[10] = nm[4];
			ntext = ntext.replace(nm[0], '');
		}
		var pc = '{"text":"'+ntext+'"';
		if(p[1]) {
			if(allowed.indexOf(getColorId(p[1])) == -1) {
				p[1] = 'white';
			}
			
			pc+=',"color":"'+p[1].toString()+'"';
			
		}
		if(p[2]) {
			if(allowed.indexOf('o') > -1) {
				pc+=',"italic":true';
			}
		}
		if(p[3]) {
			if(allowed.indexOf('l') > -1) {
				pc+=',"bold":true';
			}
		}
		if(p[4]) {
			if(allowed.indexOf('n') > -1) {
				pc+=',"underlined":true';
			}
		}
		if(p[5]) {
			if(allowed.indexOf('m') > -1) {
				pc+=',"strikethrough":true';
			}
		}
		if(p[6]) {
			if(allowed.indexOf('k') > -1) {
				pc+=',"obfuscated":true';
			}
		}
		if(p[7]||'' != '' && p[8]||'' != '' && allowed.indexOf('x') > -1) { pc+=',"clickEvent":{"action":"'+p[7]+'","value":"'+p[8]+'"}'; }
		if((p[9]||"") != '' && (p[10]||"") != '' && allowed.indexOf('y') > -1) { pc+=',"hoverEvent":{"action":"'+p[9]+'","value":"'+ccs((p[10]||"").replace(/\$/g, '\u00A7'),allowed)+'"}'; }
		pc += '}';

		
		txt+=','+pc.toString();
	}
	
	if(fullraw) {
		txt += ']';
	}
	
	return txt;
	

}

function data_get(data, keys) {
	var get = {};
	for(k in keys) {
		//var key = keys[k];
		get[k] = data.get(k);
		if(get[k] == null) { get[k] = keys[k]; }
	}
	
	return get;
}

function data_register(data, vals) {
	for(k in vals) {
		var val = vals[k];
		if(data.get(k) == null) { data.put(k, val); }
	}
}

function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}

function data_overwrite(data, keys, vals) {
	if(typeof(keys) == typeof(undefined)) { keys = []; }
	if(typeof(vals) == typeof(undefined)) { vals = []; }
	if(typeof(keys) == 'string') { keys = [keys]; }
	if(typeof(vals) == 'string') { vals = [vals]; }
	
	for(k in keys) {
		var key = keys[k];
		var val = vals[k];
		data.put(key, val);
	}
}

function posdir(pos, dir, pitch, len, flying) {
	if(typeof(dir) == typeof(undefined)) { dir = 0; }
	if(typeof(pitch) == typeof(undefined)) { pitch = 0; }
	if(typeof(len) == typeof(undefined)) { len = 1; }
	if(typeof(flying) == typeof(undefined)) { flying = false; }
	var x = pos.getX();
	var y = pos.getY();
	var z = pos.getZ();
	var xdir = getQuartRotation(dir);
	var zdir = getQuartRotation(dir-90);
	x += Math.round(len*(Math.abs(xdir)/90)*sign(xdir));
	z += Math.round(len*(Math.abs(zdir)/90)*sign(zdir));
	if(flying) {
		y += (len)*(Math.abs(pitch)/90)*-sign(pitch);
	}
	return {x:x,y:y,z:z};
}


function fixAngle(angle) {
	angle = Math.abs(angle);
	if(angle >= 360) { angle -= 360; }
	return angle;
}

function lengthpitch_y(pitch, length) {
	return Math.round(pitch/-90)*length;
}


function lengthdir_x(angle, length) {
	if(typeof(length) == typeof(undefined)) { length = 1; }
	return Math.round((getQuartRotation(angle)/90)*length);
}

function lengthdir_z(angle, length) {
	if(typeof(length) == typeof(undefined)) { length = 1; }
	angle = fixAngle(angle+270);
	return -lengthdir_x(angle, length);
}

function pick(a, amount) {
	if(typeof(amount) == typeof(undefined)) { amount = 1; }
	var index = Math.floor(Math.random() * a.length);
	amount = Math.min(a.length, amount);
	if(amount == 1) {
		return a[index];
	} else {
		var picks = [];
		
		while(picks.length < amount) {
			index = Math.floor(Math.random() * a.length);
			if(picks.indexOf(a[index]) == -1) { picks.push(a[index]); }
		}
		
		return picks;
	}
}

function escapeNbtJson(json, trim_ends) {
	if(typeof(trim_ends) == typeof(undefined)) { trim_ends = true; }
	json = json.replace(/(?:\\n|\\)/g, '');
	json = json.replace(/(\d) ([fbds]+)/g, "$1$2");
	json = json.replace(/\\("|')/g, "$1");
	if(trim_ends) {
		json = json.slice(1, json.length - 1);
	}
	
	return json;
}


function array_remove(array, element) {
  var index = array.indexOf(element);

  if (index !== -1) {
    array.splice(index, 1);
  }
}

function pickwhere(a, fn, amount) {
	return pick(array_filter(a, fn), amount);
}

function array_dist(a) {
	var b = [];
	for(c in a) {
		if(b.indexOf(a[c]) == -1) {
			b.push(a[c]);
		}
	}
	
	return b;
}

function objArray(obj) {
	var a = [];
	for(i in obj) {
var o = obj[i];
		a.push(o);
	}
	return a;
}

function array_filter(a, fn) {
	var aa = [];
	for(i in a) {
		if(fn(a[i])) { aa.push(a[i]); }
	}
	
	return aa;
}

function escCcs(str, esc_formats) {
	if(typeof(esc_formats) == typeof(undefined)) { esc_formats = null; }
	if(esc_formats == null) {
		esc_formats = _RAWCODES;
	}
	
	return str.replace(new RegExp('&(['+esc_formats.join("")+'])', 'g'), '');
}

function ccs(str, af) {
	if(typeof(af) == typeof(undefined)) { af = null; }
	return colorCodeString(str, af);
}

function colorCodeString(str, allowed_formats) {
	if(typeof(allowed_formats) == typeof(undefined)) { allowed_formats = null; }
	if(allowed_formats == null) {
		allowed_formats = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS));
	}
	allowed_formats = removeFromArray(allowed_formats, ['x', 'y']);
	return str.replace(new RegExp("&(["+allowed_formats.join("")+"])", 'g'), '\u00A7$1').replace(/&\\/g, '&');
}

function genName(name) {
	var p = [
    'Amazing',
    'Awesome',
    'Blithesome',
    'Excellent',
    'Fabulous',
    'Fantastic',
    'Favorable',
    'Gorgeous',
    'Incredible',
    'Outstanding',
    'Perfect',
    'Propitious',
    'Remarkable',
    'Rousing',
    'Spectacular',
    'Splendid',
    'Stellar',
    'Super',
    'Upbeat',
    'Unbelievable',
    'Wondrous',
	'Tempered',
	'Legendary',
	'Magical'
	];
	var s = [
		'Destruction',
		'Slaughter',
		'Starlight',
		'Heroism',
		'Bonebreaking',
		'The Fallen',
		'Silence',
		'Spellkeeping',
		'Massacre',
		'Sanity',
		'Insanity',
		'Remorse',
		'Fury'
	];
	
	return pick(p) + ' ' + name + ' of ' + pick(s);
}

function nbtCopy(nbt, api) {
	return api.stringToNbt(nbt.toJsonString());
}

function getDayTime(time) {
	while(time > 24000) { time -= 24000; }
	return time;
}

function random_ranges(min, max, amount) {
	var a = 0;
	for(var i = 0; i < amount; i++) { a += random_range(min, max); }
	return a;
}

function rrandom_ranges(min, max, amount) {
	var a = 0;
	for(var i = 0; i < amount; i++) { a += rrandom_range(min, max); }
	return a;
}

function pickchance(a, amount) {
	var aa = [];
	for(e in a) {
		if(!isArray(a[e])) {
			aa[aa.length] = a[e];
		} else {
			for(var i = 0; i < a[e][1]; i++) {
				aa[aa.length] = a[e][0];
			}
		}
	}
	
	return pick(aa, amount);
}

function inArray(a, val) {
	for(k in a) { if(a[k] === val) { return true; } }
	return false
}

function rrandom_range(min, max) { return Math.round(random_range(min, max)); }

function random_range(_min, _max) {
	var min = Math.min(_min, _max);
	var max = Math.max(_min, _max);
	
	var diff = max - min;
	
	return (min + (Math.random() * diff));
}

function array_merge(a1, a2) {
	var bb = [];
	for(k in a1) {
		bb[k] = a1[k];
	}
	for(k in a2) {
		bb[k] = a2[k];
	}
	return bb;
}

function isArray(obj) {
	if(typeof(obj) === 'object') {
      for(k in obj) {
      
          if(isNaN(k)) { return false; }
      }
      

      return true;
    } else { return false }
}

function isObject(obj) {
	return ( typeof(obj) === 'object' && !isArray(obj) );
}


function nbtItem(nbt, w, api) {
	if(typeof(nbt) == 'string') { nbt = api.stringToNbt(nbt); }
	var item = w.createItemFromNbt(nbt);
	
	return item;
}
function executeCommand(player, command, as_player) {
	if(typeof(as_player) == typeof(undefined)) { as_player = null; }
	if(as_player == null) { as_player = player.getName(); }
	var API = Java.type('noppes.npcs.api.NpcAPI').Instance();
	var cmd = API.createNPC(player.world.getMCWorld());
	
	return cmd.executeCommand("/execute "+as_player+" ~ ~ ~ "+command);
	
}
function tellPlayer(player, rawtext) {
	if(typeof(rawtext) == 'string') { var rawtext = strf(rawtext); }
	
	return executeCommand(player, "/tellraw "+player.getName()+" "+rawformat(rawtext));
}

function tellPlayerStr(player, text) {
	return executeCommand(player, "/tellraw "+player.getName()+" "+text.toString());
}

function storytellPlayer(player, ar) {
	for(i in ar) {
		//print(ai[i].join('==='));
		tellPlayer(player, ar[i]);
	}
}

/*
function storyte_llPlayer(player, array_rawtext) {
	var tellStr = '[""';
	for(i in array_rawtext) {
		if(tellStr.substr(tellStr.length-1, tellStr.length) != ',' && tellStr.length > 0) {
			tellStr += ',';
		}
		tellStr += rawformat(array_rawtext[i], false).toString();
		if(i < array_rawtext.length-1) {
			tellStr += ',{"text":"\n"}';
		}
	}
	tellStr += ']';
	print(tellStr);
	return tellPlayerStr(player, tellStr);
}*/
var _COMMANDS = [];
function ChatChannel(name) {
	DataHandler.apply(this, ['chatchannel', name]);
	this.data = {
		"displayName": name,
		"players": [],
		"color": "blue",
		"desc": "",
	};
	this.getPermission = function(data) {
		var perm = new Permission(this.type+'.'+this.name);
		perm.load(data);
		if(!perm.exists(data)) { perm.save(data); }
		
		return perm;
	};
	this.addPlayers = function(players){
		for(p in players) {
var player = players[p];
			this.data.players.push(player);
		}
		return this;
	};
	this.getColor = function() {
		return '&'+getColorId(this.data.color);
	};
	this.getName = function() {
		return this.getColor()+this.data.displayName+"&r";
	};
	this.getTag = function(prefix) {
		if(typeof(prefix) == typeof(undefined)) { prefix = ''; }
		return this.getColor()+"&l[#"+this.data.displayName+prefix+"]&r";
	};
	this.removePlayers = function(players) {
		var np = [];
		for(p in this.data.players) {
var player = this.data.players[p];
			if(players.indexOf(player) == -1) {
				np.push(player);
			}
		}
		this.data.players = np;
		return this;
	};
	this.getPlayers = function(world) { //returns all online IPlayers
		var plr = world.getAllPlayers();
		var plrs = [];
		for(p in plr) {
var pl = plr[p];
			if(this.data.players.indexOf(pl.getName()) > -1) {
				plrs.push(pl);
			}
		}
		return plrs;
	};
	this.broadcast = function(w, msg, exc) {
		if(typeof(exc) == typeof(undefined)) { exc = []; }
		var plrs = w.getAllPlayers();
		for(p in plrs) {
var pl = plrs[p];
			if(this.data.players.indexOf(pl.getName()) > -1 && exc.indexOf(pl.getName()) == -1) {
				tellPlayer(pl, msg);
			}
		}
		return this;
	};
}

function getColorPermId(colorId) {
	return 'chat.color.'+getColorName(colorId);
}




function Job(name) {
	DataHandler.apply(this, ['job', name]);
	this.data = {
		"displayName": name,
		"pay": getCoinAmount('5g'),
		"payTime": getStringTime('20min'),
		"isOpen": false,
		"capacity": 10,
		"fireTime": getStringTime('1w'),
		"companyId": null
	};
	
	this.getPlayers = function(data) {
		var pl = [];
		var dkeys = data.getKeys();
		for(d in dkeys) {
var dkey = dkeys[d];
			if(dkey.cmatch(/player_(\w+)/g) == 1) {
				var player = new Player(dkey.replace(/player_(\w+)/g, '$1'));
				player.load(data);
				if(player.hasJob(this.name) && pl.indexOf(player.name) == -1) {
					pl.push(player.name);
				}
			}
		}
		
		return pl;
	};
	
	this.getDisplayName = function(data) {
		if(typeof(data) == typeof(undefined)) {
			return this.data.displayName+'&r';
		} else {
			return this.getStatusColor(data)+this.data.displayName+'&r';
		}
	}
	
	this.getStatusColor = function(data) {
		if(this.data.capacity == -1) {
			return '&a';
		}
		if(this.getPlayers(data).length < this.data.capacity) {
			return '&6';
		}
		return '&c';
	};
}

function Mail(name) {
	this.data = {
		"from": null,
		"to": [],
		"title": "",
		"message": ""
	};
}var PERMISSION_REGEX = /permission_([\w.\-]+)/g;
function getAllPermissionIds(data) {
	var dk = data.getKeys();
	var ids = [];
	for(d in dk) {
var dkey = dk[d];
		if(dkey.cmatch(PERMISSION_REGEX) > 0) {
			var perm_id = dkey.replace(PERMISSION_REGEX, '$1');
			ids.push(perm_id);
		}
	}
	
	return ids;
}

function getParentPermissionIds(data, permId) {
	var pIds = [];
	var idArr = permId.split(".");
	var tid = this.id;
	getAllPermissionIds(data).forEach(function(pId){
		var pIdArr = pId.split(".");
		var isPar = true;
		for(i in pIdArr) {
var _p = pIdArr[i];
			if(_p != idArr[i]) {
				isPar = false;
			}
		}
		
		if(isPar && pIds.indexOf(pId) == -1 && pId != tid) {
			pIds.push(pId);
		}
	});
	
	return pIds;
};

function Permission(name) {
	DataHandler.apply(this, ['permission', name]);
	this.data = {
		"enabled": true,
		"teams": [
			"Owner",
			"Developer"
		],
		"players": [],
		"jobs": [],
		"meta": {}
	};
	
	this.addTeams = function(teams) {
		if(typeof(teams) == 'string') { teams = [teams]; }
		for(t in teams) {
var team = teams[t];
			var teamname = team;
			if(this.data.teams.indexOf(teamname) == -1) {
				this.data.teams.push(teamname);
			}
		}
		
		return this;
	};
	this.removeTeams = function(teams) {
		if(typeof(teams) == 'string') {
			teams = [teams];
		}

		var nteams = [];
		for(t in this.data.teams) {
var team = this.data.teams[t];
			if(teams.indexOf(team) == -1) {
				nteams.push(team);
			}
		}
		this.data.teams = nteams;
		return this;
	};
	this.addPlayers = function(players) {
		if(typeof(players) == 'string') { players = [players]; }
		for(p in players) {
var player = players[p];
			if(this.data.players.indexOf(player) == -1) {
				this.data.players.push(player);
			}
		}
		
		return this;
	};
	this.removePlayers = function(players) {
		if(typeof(players) == 'string') { players = [players]; }
		var nplayers = [];
		for(p in this.data.players) {
var player = this.data.players[p];
			if(players.indexOf(player) == -1) {
				nplayers.push(player);
			}
		}
		this.data.players = nplayers;
		return this;
	}
	this.permits = function(player, sb, data) {
		///String player
		///IScoreboard sb
		///IData data
		var team = sb.getPlayerTeam(player);
		var permitted = false;
		var p = new Player(player);
		p.load(data);
		
		//Check enabled
		if(!this.data.enabled) { return true; }
		
		//Check team
		if(team != null) {
			if(this.data.teams.indexOf(team.getDisplayName()) != -1) {
				permitted = true;
			}
		}
		//Check player
		if(this.data.players.indexOf(player) != -1) {
			permitted = true;
		}
		//Check jobs
		var pjobs = p.getJobs(data);
		for(p in pjobs) {
var pjob = pjobs[p];
			if(this.data.jobs.indexOf(pjob.name) != -1) {
				permitted = true;
			}
		}
		
		
		return permitted;
	};
	
	return this;
}


function Player(name) {
	DataHandler.apply(this, ['player', name]);
	this.data = {
		"lastPayed": 0,
		"pay": getCoinAmount('5g'),
		"payTime": getStringTime('20min'),
		"maxJobs": 2,
		"maxHomes": 1,
		"homes": {},
		"jobs": {},
		"talkchat": null,
		"chatcolor": null,
		"chateffect": null,
		"color": null,
		"firstLogin": new Date().getTime(),
		"lastLogin": 0,
		"color": null,
		"UUID": null,
	};
	this.sync = function(ipl) {
		this.data.UUID = ipl.getUUID();
		this.name = ipl.getName();
		return this;
	};
	this.getChatColorPref = function(sb, data) {
		var pref = '';
		var prefeff = '';
		var t = sb.getPlayerTeam(this.name);
		if(t != null) {
			var td = new Team(t.getName()).init(data);
			if(td.data.chatcolor != null) {
				pref = '&'+getColorId(t.data.chatcolor);
			}
			if(td.data.chateffect != null) {
				prefeff = '&'+getColorId(t.data.chateffect);
			}
		}
		if(this.data.chatcolor != null) {
			pref = '&'+getColorId(this.data.chatcolor);
		}
		if(this.data.chateffect != null) {
			prefeff = '&'+getColorId(this.data.chateffect);
		}
		return pref+prefeff;
	};
	this.getNameTag = function(sb, prefix) {
		var t = sb.getPlayerTeam(this.name);
		var ccol = '';
		var ctm = '';
		if(this.data.color != null) {
			var cId = getColorId(this.data.color);
			ccol = '&'+cId;
		} else if(t != null) {
			ccol = '&'+getColorId(t.getColor());
		}
		
		if(t != null) {
			ctm = ccol+'&o'+t.getDisplayName()+' ';
		}
		return ccol+'&l['+ccol+ctm+'&r'+ccol+this.name+ccol+'&l'+']'+(prefix||'')+'&r';
	};
	
	this.delJob = function(name) {
		if(this.hasJob(name)) {
			delete this.data.jobs[name];
		}
		return this;
	};
	this.getJob = function(name) {
		if(this.hasJob(name)) {
			return this.data.jobs[name];
		}
		return null;
	};
	this.getJobs = function(data) {
		var jobs = [];
		for(i in this.data.jobs) {
var job = this.data.jobs[i];
			pjob = new Job(i);
			if(pjob.load(data)) {
				jobs.push(pjob);
			}
		}
		return jobs;
	};
	this.getJobCount = function() {
		return Object.keys(this.data.jobs).length;
	};
	this.addJob = function(name) {
		this.data.jobs[name] = {
			"lastPayed": 0
		};
		return this;
	};
	this.hasJob = function(name) {
		return Object.keys(this.data.jobs).indexOf(name) > -1;
	};
	this.hasMaxJobs = function() {
		return (this.data.maxJobs != -1 && this.getJobCount() >= this.data.maxJobs);
	};
	this.addHome = function(name, x, y, z) {
		this.data.homes[name] = {
			x: x,
			y: y,
			z: z,
		};
		return this;
	};
	this.delHome = function(name) {
		if(this.data.homes.hasOwnProperty(name)) {
			delete this.data.homes[name];
		}
		return this;
	};
	this.hasHome = function(name) {
		return (this.data.homes.hasOwnProperty(name));
	};
	this.getChats = function(data) {
		var chats = [];
		var dkeys = data.getKeys();
		for(d in dkeys) {
var dkey = dkeys[d];
			if(dkey.cmatch(/chatchannel_([\w]+)/g) > 0) {
				var cc = new ChatChannel(dkey.replace(/chatchannel_([\w]+)/g, "$1"));
				if(cc.load(data)) {
					if(cc.data.players.indexOf(this.name) > -1) {
						chats.push(cc);
					}
				}
			}
		}
		
		return chats;
	}
	this.getAllowedColors = function(data, sb) {
		var ac = [];
		//Check individual colors
		for(i in _RAWCOLORS) {
var rc = _RAWCOLORS[i];
			var cp = new Permission(getColorPermId(getColorId(rc))).init(data);
			if(cp.permits(this.name, sb, data)) {
				ac.push(getColorId(rc));
			}
		}
		for(i in _RAWEFFECTS) {
var rc = _RAWEFFECTS[i];
			var cp = new Permission(getColorPermId(getColorId(rc))).init(data);
			if(cp.permits(this.name, sb, data)) {
				ac.push(getColorId(rc));
			}
		}
		if(new Permission('chat.command').init(data).permits(this.name, sb, data)) {
			ac.push('x');
		}
		if(new Permission('chat.hover').init(data).permits(this.name, sb, data)) {
			ac.push('y');
		}
	
		
		return ac;
	};
	this.can = function(perm) {
		
	};
}





function Region(name) {
	DataHandler.apply(this, ['region', name]);
	
	this.data = {
		"displayName": this.name,
		"positions": [],
		"owner": null,
		"height": 0,
		"rentStartTime": 0,
		"rentCredit": 0,
		"forSale": false,
		"salePrice": 0,
		"rentTime": -1,
		"trusted": [],
	};
	
	
}

function Team(name) {
	DataHandler.apply(this, ['team', name]);
	this.data = {
		"chatcolor": null,
		"chateffect": null,
	};
	this.teamExists = function(sb) {
		return sb.hasTeam(this.name);
	};
}

var _COINTABLE = {
	'c': 1,
	'g': 100,
	'k': 100000,
	'm': 100000000
};

var _COINITEMS = {
	'1c': 'variedcommodities:coin_iron',
	'5c': 'variedcommodities:coin_iron',
	'10c': 'variedcommodities:coin_iron',
	'20c': 'variedcommodities:coin_iron',
	'50c': 'variedcommodities:coin_iron',
	'1g': 'variedcommodities:coin_iron',
	'2g': 'variedcommodities:coin_iron',
	'5g': 'variedcommodities:money',
	'10g': 'variedcommodities:money',
	'20g': 'variedcommodities:money',
	'50g': 'variedcommodities:money',
	'100g': 'variedcommodities:money',
	'200g': 'variedcommodities:money',
	'500g': 'variedcommodities:money',
	'1k': 'variedcommodities:plans',
	'10k': 'variedcommodities:plans',
	'100k': 'variedcommodities:plans',
	'1m': 'variedcommodities:plans',
};


function genMoney(w, amount) {
	var am = amount
	var coinams = Object.keys(_COINITEMS);
	var nmItems = [];
	for(var i = coinams.length-1; i >= 0; i--) {
		var coincount = 0;
		var coinval = getCoinAmount(coinams[i]);
		if(coinval > 0) {
			while(am >= coinval) {
				coincount++;
				am -= coinval;
			}
		}
		if(coincount > 0) {
			var coinitem = w.createItem(_COINITEMS[coinams[i]], 0, coincount);
			coinitem.setCustomName(ccs('&2&lMoney&r'));
			coinitem.setLore([
				ccs('&e'+coinams[i].toUpperCase())
			]);
			nmItems.push(coinitem);
		}
	}
	
	
	return nmItems;
	
}

function getPlayerMessage(player, message, w, pname, fullraw, allowed) {
	if(typeof(pname) == typeof(undefined)) { pname = null; }
	if(typeof(fullraw) == typeof(undefined)) { fullraw = true; }
	if(typeof(allowed) == typeof(undefined)) { allowed = []; }
	if(pname == null) {pname = player.getName();}
	var data = w.getStoreddata();
	var plo = new Player(player.getName()).init(data);
	var sb = w.getScoreboard();
	var ts = sb.getTeams();
	var t = sb.getPlayerTeam(pname);
	var notifySound = pick([
		'animania:cluck3',
		'animania:combo',
		'animania:crow3',
		'animania:moo2',
		'animania:ooooohh',
		'animania:reeee',
		'immersiveengineering:birthdayparty',
	]);
	var pcol = '';
	var pteam = '';
	var tcol = '';
	var teff = '';
	var colls = Object.keys(_RAWCOLORS);
	var effs = Object.keys(_RAWEFFECTS);
	if(t != null) {
		var ct = new Team(t.getName()).init(data);
		if(ct.data.chatcolor != null) {
			if(colls.indexOf(ct.data.chatcolor) > -1) {
				tcol = '&'+getColorId(ct.data.chatcolor);
			}
		}
		if(ct.data.chateffect != null) {
			if(effs.indexOf(ct.data.chateffect) > -1) {
				teff = '&'+getColorId(ct.data.chateffect);
			}
		}
		if(t.getColor() != null) {
			pcol = '&'+getColorId(t.getColor());
		}
		pteam = pcol+"&o"+t.getDisplayName()+" &r"+pcol;
	}
	
	//Override player specific
	if(plo.data.chatcolor != null) {
		tcol = '&'+getColorId(plo.data.chatcolor);
	}
	//var timestr = '';
	//var now = new Date();
	//timestr = '&l[&r'+pcol+now.getHours().toString().append('0', 2)+':'+now.getMinutes().toString().append('0', 2)+'&l]&r';
	
	//var newmsg = pcol+timestr+pcol+'&l[&r'+pteam+pname+'&r'+pcol+'&l] -> &r'+tcol+teff;
	var newmsg = pcol+'&l[&r'+pteam+pname+'&r'+pcol+'&l] -> &r'+tcol+teff;
	if(!fullraw) {
		newmsg = ccs(newmsg, allowed);
	}
	newmsg += message.rangeUpper(0, 1); //Concat message contents
	
	var plr = w.getAllPlayers();
	var mrx = /@(\w+)/g;
	var mplr = newmsg.match(mrx) || [];
	
	for(k in mplr) {
		var mtc = mplr[k].replace(mrx, '$1');
		var pmtc = null;
		for(p in plr) {
			if(occurrences(plr[p].getName().toLowerCase(), mtc.toLowerCase()) > 0) {
				pmtc = plr[p].getName();
				break;
			}
		}
		if(pmtc != null) {
			executeCommand(player, "/playsound "+notifySound+" hostile "+pmtc, pmtc);
			newmsg = ccs(newmsg.replace('@'+mtc, '&9&o&l@'+pmtc+'&r'));
		}
	}
	
	var trx = /\$(\w+)/g;
	var tlr = newmsg.match(trx) || [];
	var apl = (function(w){
		var pnames = [];
		var ps = w.getAllPlayers();
		for(psi in ps) {
var iplayr = ps[psi];
			pnames.push(iplayr.getName());
		}
		
		return pnames;
	})(w);
	for(t in tlr) {
		var tc = tlr[t].replace(trx, '$1');
		for(tt in ts) {
var sbt = ts[tt];
			if(occurrences(sbt.getDisplayName().toLowerCase(), tc.toLowerCase()) > 0) {
				//Team select
				var spl = sbt.getPlayers();
				var scol = sbt.getColor();
				var sscol = '&f';
				var stn = sbt.getDisplayName();
				if(scol != null) {
					sscol = "&"+getColorId(scol);
				}
				
				for(sp in spl) {
var splayr = spl[sp];
					if(apl.indexOf(splayr) > -1) {
						executeCommand(player, '/playsound '+notifySound+' hostile '+splayr, splayr);
					}
				}
				newmsg = ccs(newmsg.replace('$'+tc, sscol+'&l'+"$"+stn+'&r'));
			}
		}
	}
	
	return newmsg;
}

function getDropChance(npcnbt, slot) {
	var dropC = npcnbt.getList('DropChance', 10);
	var dropChance = parseInt(dropC[slot].getInteger('Integer'));
	
	
	return dropChance;
}

//Converts int to string
function getAmountCoin(amount) {
	var rstr = '';
	var ams = sign(amount);
	if(ams == -1) { rstr = '-'; }
	amount = Math.abs(amount);
	var ckeys = Object.keys(_COINTABLE);
	for(var i = ckeys.length-1; i >= 0; i--) {
		
		var add = 0;
		while(amount >= _COINTABLE[ckeys[i]]) {
			add++;
			amount -= _COINTABLE[ckeys[i]];
		}
		if(add > 0) {
			rstr += add.toString()+ckeys[i].toUpperCase();
		}
	}
	
	if(rstr == '') { rstr = '0G'; }
	return rstr;
}
//converts string to int
function getCoinAmount(str) {
	var arx = /([\d]+)([a-zA-Z]+)/g;
	var amounts = str.match(arx) || [];
	var amount = 0;
	var sgn = 1;
	if(str.substr(0, 1) == '-') { sgn = -1; }
	
	for(a in amounts) {
var _am = amounts[a];
		var _amnum = parseInt(_am.replace(arx, '$1'));
		var _amunit = _am.replace(arx, '$2').toLowerCase();
		var coinkeys = Object.keys(_COINTABLE);
		if(coinkeys.indexOf(_amunit) > -1) {
			amount += _amnum*_COINTABLE[_amunit];
		}
	}
	return amount*sgn;
}

var REGISTRY = Java.type('net.minecraftforge.fml.common.registry.ForgeRegistries');








function DataHandler(type, name) {
	this.type = type;
	this.name = name;
	this.data = this.data || {};
	
	this.dkeyrgx = new RegExp(this.type+'_([\\w]+)', 'g');
	
	//Gets all data IDS
	this.getAllDataIds = function(data) {
		var dkeys = data.getKeys();
		var ids = [];
		for(d in dkeys) {
var dkey = dkeys[d];
			if(dkey.cmatch(this.dkeyrgx) > 0) {
				ids.push(dkey.replace(this.dkeyrgx, '$1'));
			}
		}
		
		return ids;
	};
	
	this.getDataId = function() {
		return this.type+'_'+this.name;
	}
	this.exists = function(data) {
		return data.get(this.getDataId()) != null;
	};
	this.save = function(data) {
		data.put(this.getDataId(), this.toJson());
		return this;
	};
	this.load = function(data) {
		if(this.exists(data)) {
			var ndata = data.get(this.getDataId());
			this.data = objMerge(this.data, JSON.parse(ndata));
			return true;
		}
		return false;
	};
	this.remove = function(data) {
		if(this.exists(data)) {
			data.remove(this.getDataId());
			return true;
		}
		return false;
	};
	this.init = function(data, initdata) {
		this.data = objMerge(this.data, (initdata||{}));
		if(!this.exists(data)) {
			this.save(data);
		}
		this.load(data);
		
		return this;
	};
	this.toJson = function() {
		return JSON.stringify(this.data);
	};
}

function registerXCommand(commandMatch, callback, perm, rules) {
	if(typeof(rules) == typeof(undefined)) { rules = []; }
	_COMMANDS.push({
		usage: commandMatch,
		callback: callback,
		perm: perm,
		rules: rules
	});
}

function getCommandNoArg(cmdstr) {
	return cmdstr.match(/![\w\s]+/)[0];
}

function registerXCommands(cmds) {
	for(c in cmds) {
		registerXCommand(cmds[c][0], cmds[c][1], cmds[c][2], cmds[c][3] || []);
	}
}

function parseUsageRgx(command, str) {
	if(typeof(str) == typeof(undefined)) { str = null; }//Converts command usage to Regex, and gathers info about command
	//!perms\s+manage\s+add((?:\s+[\w]+))((?:\s+[\w]+)*)
	//+ == <...vars> //multiple args, minimal one required
	//* == [...vars] //multiple args, optional
	//  == <var> //arg, required
	//? == [var] // arg, optional
	
	var argrx = [];
	var cmdMatch = command.usage
	.replace(/(\w)\s+(\w)/g, "$1\\s+$2")
	.replace(/(\w|>|\])\s+(\w|<|\[)/g, "$1$2");//fic whitespace
	var req_regx = /<([.]{3})*([\w]+)>/g;//Required arg regex
	var opt_regx = /\[([.]{3})*([\w]+)\]/g;//Optional arg recalc
	var rm = cmdMatch.allMatch(req_regx);
	for(i in rm) {//required args
		var rmcode = rm[i][0];
		var rmmulti = (rm[i][1] != null);
		var rmname = rm[i][2];
		var rmpart = "((?:\\s+\\S+)"+(rmmulti?"+":"")+")";
		if(str != null) {
			argrx.push([
				command.usage.indexOf(rmcode),
				rmname,
				rmmulti
			]);
		}
		cmdMatch = cmdMatch.replace(rmcode, rmpart);
	}
	var om = cmdMatch.allMatch(opt_regx);
	for(i in om) {//optional args
		var omcode = om[i][0];
		var ommulti = (om[i][1] != null);
		var omname = om[i][2];
		var ompart = "((?:\\s+\\S+)"+(ommulti?"*":"?")+")";
		if(str != null) {
			argrx.push([
				command.usage.indexOf(omcode),
				omname,
				ommulti
			]);
		}
		cmdMatch = cmdMatch.replace(omcode, ompart);
	}
	
	var capt_names = [];
	var cids = [];
	
	while(argrx.length > 0) {
		var hid = 0;
		for(var i in argrx)  {
			if(argrx[i][0] > hid) {
				hid = argrx[i][0];
			}
		}
		for(var i in argrx)  {
			if(argrx[i][0] == hid) {
				capt_names.push([argrx[i][1], argrx[i][2]]);
				argrx.splice(i, 1);
				break;
			}
		}
	}
	capt_names.reverse();
	return [cmdMatch, capt_names];
}

function executeXCommand(str, player) {
	var data = player.world.getStoreddata();
	var sb = player.world.getScoreboard();
	for(c in _COMMANDS) {
		var cmd = _COMMANDS[c];
		var cmdm = parseUsageRgx(cmd, str);
		
		var argrgx = cmdm[0];
		var rgx = new RegExp(argrgx, 'g');
		if( (str.match(rgx) || []).length == 1) {
			if(str.indexOf(str.match(rgx)[0]) == 0 && str.replace(rgx, '') == '') {
				var argnames = cmdm[1];
				var cg = 1;
				var args = {};
				for(a in argnames) {
					var argname = argnames[a][0];
					var ismulti = argnames[a][1];
					if(typeof(args[argname]) == typeof(undefined)) {
						args[argname] = (ismulti ? [] : null)
					}
					var argval = str.replace(rgx, '$'+cg.toString());
					if(ismulti) {
						args[argname] = argval.split(' ');
						args[argname] = args[argname].filter(function(el){
							return el.toString().length > 0;
						});
					} else {
						args[argname] = (argval.trim() == "" ? null : argval.trim());
					}
					
					
					cg++;
				}
				
				var cmdperm = new Permission(cmd.perm);
				if(!cmdperm.exists(data)) {
					cmdperm.save(data);
				}
				cmdperm.load(data);
				if(cmdperm.permits(player.getName(), sb, data)) {
					//Check arguments
					for(a in args) {
var arg = args[a];
						for(b in cmd.rules) {
var rule = cmd.rules[b];
							
							if(!"argname" in rule) { continue; }
							if(rule.argname != a) { continue; }
							var rulename = rule.argname.toString();
							if('type' in rule) {//Check Arg Type
								switch(rule.type) {
									case 'id': {
										if(arg.replace(/([A-Za-z0-9_])/g, '') != '') {
											tellPlayer(player, "&c'"+rulename+"' is not a valid id/name (A-Za-z0-9_)!");
											return false;
										}
										//Run case 'string'
									}
									case 'string': {
										if('minlen' in rule) {
											if(arg.toString().length < rule.minlen) {
												tellPlayer(player, "&c'"+rulename+"' is too short! (Min. "+rule.minlen+" characters)");
												return false;
											}
										}
										if('maxlen' in rule) {
											if(arg.toString().length < rule.maxlen) {
												tellPlayer(player, "&c'"+rulename+"' is too long! (Min. "+rule.minlen+" characters)");
												return false;
											}
										}
										break;
									}
									case 'currency': 
									case 'time':
									case 'number': {
										var num = NaN;
										if(rule.type == 'number') {
											num = parseInt(arg);
										} else if(rule.type == 'currency') {
											num = getCoinAmount(arg);
										} else {
											num = getStringTime(arg);
										}
										
										if(isNaN(num)) {
											tellPlayer(player, "&c'"+rulename+"' is not a number!");
											return false;
										}
										if('max' in rule) {
											if(num > rule.max) {
												tellPlayer(player, "&c'"+rulename+"' cannot be greater than "+rule.max.toString());
												return false;
											}
										}
										if('min' in rule) {
											if(num < rule.min) {
												tellPlayer(player, "&c'"+rulename+"' cannot be less than "+rule.min.toString());
												return false;
											}
										}
									}
									case 'datahandler': {
										if('datatype' in rule) {
											var dh = new DataHandler(rule.datatype, arg);
											if('exists' in rule) {
												var exists = dh.exists(data);
												if(rule.exists && !exists) {
													//Hasto exists but does not
													tellPlayer(player, "&c"+dh.type.rangeUpper(0,1)+" '"+dh.name+"' does not exist!");
													return false;
												}
												if(!rule.exists && exists) {
													//Has not to exists but does
													tellPlayer(player, "&c"+dh.type.rangeUpper(0,1)+" '"+dh.name+"' already exists!");
													return false;	
												}
											}
										}
										break;
									}
									case 'color': {
										if(objArray(_RAWCOLORS).indexOf(arg) == -1) {
											tellPlayer(player, "&cColor must be one of the following: "+objArray(_RAWCOLORS).join(', ')+'!');
											return false;
										}
										break;
									}
									case 'coloreffect': {
										if(objArray(_RAWEFFECTS).indexOf(arg) == -1) {
											tellPlayer(player, "&cChat effects must be one of the following: "+objArray(_RAWEFFECTS).join(', ')+'!');
											return false;
										}
										break;
									}
									
								}
								
							}
						}
					}
					
					return (cmd.callback(player, args, data) || false);
				} else {
					tellPlayer(player, "&cYou don't have permission to this command!");
					return false;
				}
			}
		}
	}
	//No valid command given
	var usg = [];
	var aa = str.split(" ");
	
	while(aa.length > 0) {
		var saa = aa.join(" ");
		if(usg.length == 0) {
			for(c in _COMMANDS) {
var cmd = _COMMANDS[c];
				if(occurrences(cmd.usage, saa) > 0) {
					var lcp = new Permission(cmd.perm);
					lcp.load(data);
					if(lcp.permits(player.getName(), sb, data)) {
						usg.push(cmd.usage);
					}
				}
			}
		}
		aa.splice(-1,1);
	}
	
	if(usg.length > 0) {
		tellPlayer(player, "&eDid you mean:");
		for(u in usg) {
			tellPlayer(player, "&e - &c"+usg[u]+"{suggest_command:"+getCommandNoArg(usg[u])+"}");
		}
	} else {
		tellPlayer(player, "&cCould not find this command!");
	}
	return false;
	
}



//Register commands

	//REGISTER CHAT CHANNEL COMMANDS
	
	registerXCommands([
		//['', function(pl, args){}, ''],
		['!chat create <name>', function(pl, args){
			var data = pl.world.getStoreddata();
			var cc = new ChatChannel(args.name);
			if(!cc.exists(data)) {
				var ccp = cc.getPermission(data);
				ccp.data.enabled = false;
				ccp.save(data);
				cc.save(data);
				tellPlayer(pl, "&aCreated chat channel '"+cc.name+"'!");
			} else {
				tellPlayer(pl, "&cChat channel '"+cc.name+"' already exists!")
			}
			return false;
		}, 'chat.create', [
			{
				"argname": "name",
				"type": "id",
				"minlen": 3
			},
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": false,
			}
		]],
		['!chat remove <name>', function(pl, args){
			var data = pl.world.getStoreddata();
			var cc = new ChatChannel(args.name);
			cc.remove(data);
			tellPlayer(pl, "&aRemoved chat channel '"+cc.name+"'!");
			
			return false;
		}, 'chat.remove', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			}
		]],
		['!chat list [...matches]', function(pl, args, data){
			var cids = new ChatChannel().getAllDataIds(data);
			tellPlayer(pl, "&l[=======] &6&lGramados Chat Channels&r &l[=======]");
			for(ci in cids) {
var cid = cids[ci];
				var cc = new ChatChannel(cid);
				if(args.matches.length == 0 || arrayOccurs(cid, args.matches) > 0) {
					if(cc.load(data) && cc.getPermission(data).permits(pl.getName(), pl.world.getScoreboard(), data)) {
						var opttxt = (cc.data.players.indexOf(pl.getName()) > -1 ? "&c&nLeave{run_command:!chat leave "+cc.name+"}&r":"&a&nJoin{run_command:!chat join "+cc.name+"}&r");
						tellPlayer(pl, cc.getTag()+"&r ("+cc.name+") "+opttxt);
					}
				}
			}
			return false;
		}, 'chat.list'],
		['!chat setColor <name> <color>', function(pl, args, data){
			var cc = new ChatChannel(args.name);
			cc.load(data);
			cc.data.color = args.color.toLowerCase();
			cc.save(data);
			tellPlayer(pl, '&aSet color of chatchannel '+cc.getName()+'&a to '+cc.data.color+'!');
			return true;
		}, 'chat.setColor', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			},
			{
				"argname": "color",
				"type": "color",
			}
		]],
		['!chat setDisplayName <name> <...displayName>', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);
			cc.data.displayName = args.displayName.join(' ');
			cc.save(data);
			tellPlayer(pl, '&aSet display name to: '+cc.getName());
			return true;
		}, 'chat.setDisplayName', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			},
		]],
		['!chat setDesc <name> [...desc]', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);
			cc.data.desc = args.desc.join(' ');
			cc.save(data);
			tellPlayer(pl, '&aSet description of '+cc.getName()+'&r&a to: '+cc.data.desc);
			return true;
		}, 'chat.setDisplayName', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			},
		]],
		['!chat join <name>', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);
			var plo = new Player(pl.getName()).init(data);
			if(cc.getPermission(data).permits(pl.getName(), pl.world.getScoreboard(), data)) {
				if(cc.data.players.indexOf(pl.getName()) == -1) {
					cc.data.players.push(pl.getName());
					plo.data.talkchat = cc.name;
					plo.save(data);
					cc.save(data);
					cc.broadcast(pl.world, plo.getNameTag(pl.world.getScoreboard())+"&r &ehas joined "+cc.getName(), [pl.getName()]);
					tellPlayer(pl, "&eJoined chat-channel "+cc.getTag()+(cc.data.desc != '' ? "&r\n&e"+cc.data.desc:""));
					return true;
				} else {
					tellPlayer(pl, "&cYou are already in this chat!");
				}
				
				
			} else {
				tellPlayer(pl, "&cYou are not allowed to join this channel!");
			}
			return false;
		}, 'chat.join', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			}
		]],
		['!chat leave <name>', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);
			var plo = new Player(pl.getName()).init(data);
			
			if(cc.data.players.indexOf(pl.getName()) > -1) {
				cc.data.players = removeFromArray(cc.data.players, pl.getName());
				cc.save(data);
				tellPlayer(pl, "&eLeaved channel "+cc.getName());
				cc.broadcast(pl.world, plo.getNameTag(pl.world.getScoreboard())+"&r &ehas left "+cc.getName(), [pl.getName()]);
				return true;
			} else {
				tellPlayer(pl, "&cYou can't leave a channel that you're not in!");
			}
			return false;
		}, 'chat.leave', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			}
		]],
	]);

	registerXCommands([
		['!renameLore <slot> [...lore]', function(pl, args){
			var mItem = pl.getMainhandItem();
			
			if(!mItem.isEmpty()) {
				var newLoreStr = args.lore.join(' ');
				var newLore = objArray(mItem.getLore());
				var s = parseInt(args.slot) || 0;
				if(s < newLore.length) {
					newLore[s] = ccs(newLoreStr);
				} else {
					newLore.push(ccs(newLoreStr));
				}
				mItem.setLore(newLore);
				tellPlayer(pl, "&aRenamed lore!");
			} else {
				tellPlayer(pl, "&cYou don't have anything in your hand!");
			}
			
			return false;
		}, 'renameLore'],
		['!renameItem <...name>', function(pl, args){
			var mItem = pl.getMainhandItem();
			
			if(!mItem.isEmpty()) {
				var newName = args.name.join(' ');
				mItem.setCustomName(ccs(newName));
				return true;
			} else {
				tellPlayer(pl, "&cYou don't have anything in your hand!");
			}
			
			return false;
		}, 'renameItem'],
	]);

	registerXCommands([
		['!jobs add <name> [...display_name]', function(pl, args){
			var job = new Job(args.name);
			var dname = args.display_name.join(' ');
			var data = pl.world.getStoreddata();
			if(!job.exists(data)) {
				if(dname != "") {
					job.data.displayName = dname;
				}
				tellPlayer(pl, "&aJob '"+job.getDisplayName(data)+"&a' created!");
				job.save(data);
				return true;
			} else {
				tellPlayer(pl, "&cJob '"+job.getDisplayName(data)+"&c' already exists!");
			}
			return false;
		}, 'jobs.add'],
		['!jobs remove <name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(job.exists(data)) {
				job.remove(data);
				tellPlayer(pl, "&aRemoved job '"+job.getDisplayName(data)+"&a'!");
				return true;
			} else {
				tellPlayer(pl, "&cJob '"+job.getDisplayName(data)+"&c' does not exists!");
			}
			return false;
		}, 'jobs.add'],
		['!jobs setPay <name> <amount>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(job.exists(data)) {
				job.load(data);
				var amount = getCoinAmount(args.amount);
				job.data.pay = amount;
				job.save(data);
				tellPlayer(pl, "&aSet the salary of job '"+job.getDisplayName(data)+"&a' to "+getAmountCoin(amount)+"!");
			} else {
				tellPlayer(pl, "&cJob '"+job.getDisplayName(data)+"&a' does not exists!");
			}
		}, 'jobs.setPay'],
		['!jobs setPayTime <name> <time>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(job.exists(data)) {
				job.load(data);
				var time = getStringTime(args.time);
				job.data.payTime = time;
				job.save(data);
				tellPlayer(pl, "&aSet the paytime of job '"+job.getDisplayName(data)+"&a' to "+getTimeString(time)+"!");
				return true;
			} else {
				tellPlayer(pl, "&cJob '"+job.getDisplayName(data)+"&a' does not exists!");
			}
			return false;
		}, 'jobs.setPayTime'],
		['!jobs setOpen <name> <open>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(args.open == 'true' || args.open == 'false') {
				if(job.exists(data)) {
					job.load(data);
					
					job.data.isOpen = (args.open == 'true');
					
					job.save(data);
					tellPlayer(pl, "&aSet if job '"+job.getDisplayName(data)+"&a' is open to "+args.open);
				} else {
					tellPlayer(pl, "&cJob '"+job.getDisplayName(data)+"&c' does not exists!");
				}
			} else {
				tellPlayer(pl, "&c<open> can only be &ntrue&r&c or &nfalse&r&c!");
			}
		}, 'jobs.setOpen'],
		['!jobs setDisplayName <name> <...display_name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(job.exists(data)) {
				job.load(data);
				
				job.data.displayName = args.display_name.join(' ');
				
				job.save(data);
				tellPlayer(pl, "&aSet the display of job_id '"+job.name+"' to '"+job.getDisplayName(data)+"&a'!");
			} else {
				tellPlayer(pl, "&cJob '"+job.getDisplayName(data)+"' does not exists!");
			}
		}, 'jobs.setDisplayName'],
		['!jobs list [...matches]', function(pl, args){
			var data = pl.world.getStoreddata();
			var dkeys = data.getKeys();
			tellPlayer(pl, "&l[=======]&r&6&lGramados Job List&r&l[=======]");
			for(d in dkeys) {
var dkey = dkeys[d];
				if( ( dkey.match(/job_(\w.)/g) || [] ).length > 0 ) {
					var job = new Job(dkey.replace(/job_(\w.)/g, '$1'));
					var isMatch = false;
					args.matches.forEach(function(mt){
						if(occurrences(mt, job.name) > 0 || occurrences(mt, job.getDisplayName(data)) > 0) {
							isMatch = true;
						}
					});
					
					if(args.matches.length == 0 || isMatch) {
						job.load(data);
						tellPlayer(pl, "&e - &r"+job.getStatusColor(data)+escCcs(job.getDisplayName())+"&r (&9&o"+job.name+"&r)");
					}
					
				}
			}
			return true;
		}, 'jobs.list'],
		['!jobs info <name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(job.exists(data)) {
				job.load(data);
				tellPlayer(pl, "&l[=======]&r&6&lGramados Job Info&r&l[=======]");
				tellPlayer(pl, "&eName: &9&o"+job.name);
				tellPlayer(pl, "&eDisplay Name: &r"+job.getStatusColor(data)+escCcs(job.getDisplayName()));
				tellPlayer(pl, "&eCompany: &c"+job.data.companyId);
				tellPlayer(pl, "&eIncome: "+getAmountCoin(job.data.pay)+' per '+getTimeString(job.data.payTime));
				tellPlayer(pl, "&eIs Open: "+(job.data.isOpen ? '&atrue':'&cfalse'));
				tellPlayer(pl, "&ePlaces taken: "+job.getStatusColor(data)+job.getPlayers(data).length+"/"+(job.data.capacity > -1 ? job.data.capacity : 'UNLIMITED'));
				tellPlayer(pl, "&eFire Time: &6"+getTimeString(job.data.fireTime));
				return true;
			} else {
				tellPlayer(pl, "&cJob '"+job.getDisplayName(data)+"&c' does not exists!");
			}
			return false;
		}, 'jobs.info'],
		['!jobs playerList <name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(job.exists(data)) {
				job.load(data);
				tellPlayer(pl, "&l[=======] &r&6&lGramados Job Player List &r&l[=======]");
				tellPlayer(pl, "&eJob: &9&o"+args.name);
				var pls = job.getPlayers(data);
				for(p in pls) {
var plr = pls[p];
					tellPlayer(pl, "&e - &r"+plr);
				}
			} else {
				tellPlayer(pl, "&cJob '"+job.getDisplayName(data)+"&a' does not exists!");
			}
		}, 'jobs.playerList'],
		['!jobs addPlayers <name> <...player_names>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(job.exists(data)) {
				job.load(data);
				for(p in args.player_names) {
var apl = args.player_names[p];
					var apo = new Player(apl);
					if(apo.load(data)) {
						apo.addJob(job.name);
						apo.save(data);
					}
				}
				tellPlayer(pl, "&aAdded "+args.player_names.length+" player(s) to job '"+job.name+"'");
			} else {
				tellPlayer(pl, "&cJob '"+job.getDisplayName(data)+"&a' does not exists!");
			}
		}, 'jobs.addPlayers'],
		['!jobs setPlaces <name> <amount>', function(pl, args){
			var am = parseInt(args.amount) || 10;
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(job.load(data)) {
				job.data.capacity = am;
				tellPlayer(pl, "&aSet max players of job '"+job.name+"' to "+am+'!');
				job.save(data);
			} else {
				tellPlayer(pl, "&cJob '"+job.name+"' does not exists!");
			}
		}, 'jobs.setPlaces'],
		['!jobs setFireTime <name> <time>', function(pl, args){
			var time = getStringTime(args.time);
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(job.load(data)) {
				job.data.fireTime = time;
				tellPlayer(pl, "&aSet fire time of job '"+job.name+"' to "+getTimeString(time)+"!");
				job.save(data);
			} else {
				tellPlayer(pl, "&cJob '"+job.name+"' does not exists!");
			}
		}, 'jobs.setFireTime'],
		['!jobs removePlayers <name> <...players>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			if(job.load(data)) {
				for(p in args.players) {
var apl = args.players[p];
					var apo = new Player(apl);
					if(apo.load(data)) {
						apo.delJob(job.name);
						apo.save(data);
					}
				}
				tellPlayer(pl, "&aRemoved "+args.players.length+" player(s) from job '"+job.name+"'");
			} else {
				tellPlayer(pl, "&cJob '"+job.name+"' does not exists!");
			}
		}, 'jobs.removePlayers'],
		['!jobs reload', function(pl, args){
			var data = pl.world.getStoreddata();
			var dkeys = data.getKeys();
			var jc = 0;
			for(d in dkeys) {
var dkey = dkeys[d];
				if(dkey.cmatch(/job_(\w+)/g)) {
					var job = new Job(dkey.replace(/job_(\w+)/g, '$1'));
					if(job.load(data)) {
						job.save(data);
					}
					jc++;
				}
			}
			tellPlayer(pl, "&aReloaded "+jc+" job(s)!");
		}, 'jobs.reload']
	]);

	//REGISTER PERMISSION COMMANDS
	registerXCommands([
		['!perms setEnabled <permission_id> <value>', function(pl, args){
			var perm = new Permission(args.permission_id);
			var data = pl.world.getStoreddata();
			if(perm.exists(data)) {
				if(args.value == 'true' || args.value == 'false') {
					perm.data.enabled = (args.value == 'true');
					perm.save(data);
					tellPlayer(pl, "&a"+(args.value == 'true' ? 'Enabled' : 'Disabled')+" permission '"+args.permission_id+"'!");
				} else {
					tellPlayer(pl, "&c<value> must be &ntrue&r&c or &nfalse&r&c!");
				}
			} else {
				tellPlayer(pl, "&c"+args.permission_id+" does not exists!");
			}
		}, 'perms.setEnabled'],
		['!perms addTeams <permission_id> <...teams>', function(pl, args){
			var w = pl.world;
			var data = w.getStoreddata();
			var p = new Permission(args.permission_id);
			if(p.load(data)) {
				p.addTeams(args.teams).save(data);
				tellPlayer(pl, "&aAdded teams \""+args.teams.join(", ")+"\" to "+p.name+"!");
				return true;
			} else {
				tellPlayer(pl, "&c"+args.permission_id+" does not exists!");
			}
			return false;
		}, 'perms.addTeams'],
		['!perms removeTeams <permission_id> <...teams>', function(pl, args){
			var w = pl.world;
			var data = w.getStoreddata();
			var p = new Permission(args.permission_id);
			if(p.load(data)) {
				p.removeTeams(args.teams).save(data);
				tellPlayer(pl, "&aRemoved teams \""+args.teams.join(", ")+"\" to "+p.name+"!");
				return true;
			} else {
				tellPlayer(pl, "&c"+args.permission_id+" does not exists!");
			}
			return false;
		}, 'perms.removeTeams'],
		['!perms addPlayers <permission_id> <...players>', function(pl, args){
			var w = pl.world;
			var data = w.getStoreddata();
			var p = new Permission(args.permission_id);
			if(p.load(data)) {
				p.addPlayers(args.players).save(data);
				tellPlayer(pl, "&aAdded players \""+args.players.join(", ")+"\" to "+p.name+"!");
				return true;
			} else {
				tellPlayer(pl, "&c"+args.permission_id+" does not exists!");
			}
			return false;
		}, 'perms.addPlayers'],
		['!perms removePlayers <permission_id> <...players>', function(pl, args){
			var w = pl.world;
			var data = w.getStoreddata();
			var p = new Permission(args.permission_id);
			if(p.load(data)) {
				p.removePlayers(args.players).save(data);
				tellPlayer(pl, "&aRemoved players \""+args.players.join(", ")+"\" to "+p.name+"!");
				return true;
			} else {
				tellPlayer(pl, "&c"+args.permission_id+" does not exists!");
			}
			return false;
		}, 'perms.removePlayers'],
		['!perms remove <permission_id>', function(pl, args){
			var data = pl.world.getStoreddata();
			var p = new Permission(args.permission_id);
			if(p.load(data)) {
				if(p.remove(data)) {
					tellPlayer(pl, "&aRemoved "+p.name+"!");
					return true;
				} else {
					tellPlayer(pl, "&cCould not remove "+p.name+"!");
					return false;
				}
			}
		}, "perms.remove"],
		['!perms add <permission_id>', function(pl, args){
			var w = pl.world;
			var data = w.getStoreddata();
			var p = new Permission(args.permission_id);
			if(!p.exists(data)) {
				tellPlayer(pl, "&aSaved new permission "+p.name);
				p.save(data);
			} else {
				tellPlayer(pl, "&cPermission already exists!");
			}
			
			return true;
		}, 'perms.add'],
		['!perms list [...matches]', function(pl, args){
			var w = pl.world;
			var data = w.getStoreddata();
			var ids = getAllPermissionIds(data);
			if(ids.length > 0) {
				tellPlayer(pl, "&l<-====- &6&lGramados Permission Ids&r&l -====->");
				for(i in ids) {
var id = ids[i];
					isMatch = false;
					args.matches.forEach(function(el){
						if(occurrences(id, el) > 0) { isMatch = true; }
					});
					if(args.matches.length == 0 || isMatch) {
						tellPlayer(pl, "&e - &9&l"+id);
					}
				}
			} else {
				tellPlayer(pl, "&cThere are no registered permissions");
			}
			return true;
		}, ['perms.list']],
		['!perms info <permission_id>', function(pl, args){
			var w = pl.world;
			var data = w.getStoreddata();
			var p = new Permission(args.permission_id);
			if(p.load(data)) {
				tellPlayer(pl, "&l[=======] &6&lGramados Permission Info&r&l [=======]");
				tellPlayer(pl, "&eID: &9&o"+p.name)
				tellPlayer(pl, "&eEnabled: &r"+(p.data.enabled ? '&atrue' : '&cfalse'))
				tellPlayer(pl, "&ePermitted Teams:");
				for(i in p.data.teams) {
var team = p.data.teams[i];
					tellPlayer(pl, "&e - &r&o"+team);
				}
				tellPlayer(pl, "&ePermitted Players:");
				for(i in p.data.players) {
var player = p.data.players[i];
					tellPlayer(pl, "&e - &r&o"+player);
				}
			} else {
				tellPlayer(pl, "&cCould not find any info for "+args.permission_id);
			}
		}, 'perms.info']
	]);

	//REGISTER PLAYER COMMANDS
	registerXCommands([
		//PLAYER MANAGE
		['!player setPay <player> <amount>', function(pl, args){
			var am = getCoinAmount(args.amount);
			var p = new Player(args.player);
			var data = pl.world.getStoreddata();
			
			if(p.load(data)) {
				p.data.pay = am;
				p.save(data);
			}
			tellPlayer(pl, "&aSet pay amount of player '"+p.name+"' to "+getAmountCoin(am)+'!');
		
			return true;
		}, 'player.setPay', [
			{
				"argname": "amount",
				"type": "currency",
				"min": 0
			}
		]],
		['!player setPayTime <player> <time>', function(pl, args){
			var am = getStringTime(args.time);
			var p = new Player(args.player);
			var data = pl.world.getStoreddata();
			
			p.load(data);
			p.data.payTime = am;
			p.save(data);
			tellPlayer(pl, "&aSet pay time of player '"+p.name+"' to "+getTimeString(am)+'!');
		
			return true;
		}, 'player.setPayTime'],
		['!player setMaxJobs <player> <amount>', function(pl, args){
			var p = new Player(args.player);
			var data = pl.world.getStoreddata();
			
			p.load(data);
			p.data.maxJobs = parseInt(args.amount) || 1;
			p.save(data);
			
			tellPlayer(pl, "&aSet maxhomes of player '"+p.name+"' to "+(parseInt(args.amount) || 1)+'!');
			return true;
		
		}, 'player.setMaxJobs'],		
		['!player setMaxHomes <player> <amount>', function(pl, args){
			var p = new Player(args.player);
			var data = pl.world.getStoreddata();
			
			p.load(data);
			p.data.maxHomes = parseInt(args.amount) || 1;
			p.save(data);
			
			tellPlayer(pl, "&aSet maxhomes of player '"+p.name+"' to "+(parseInt(args.amount) || 1)+'!');
			return true;
		
		}, 'player.setMaxHomes'],
		['!player setChatColor <player> <color>', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.chatcolor = args.color;
			plo.save(data);
			tellPlayer(pl, "&aChanged chatcolor to "+args.color+"!");
			return true;
		}, 'player.setChatColor', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "color",
				"type": "color"
			}
		]],
		['!player setChatEffect <player> <effect>', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.chatcolor = args.effect;
			plo.save(data);
			tellPlayer(pl, "&aChanged chateffect to "+args.effect+"!");
			return true;
		}, 'player.setChatColor', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "effect",
				"type": "coloreffect"
			}
		]],
		['!player income <player>', function(pl, args, data){
			var p = new Player(args.player).init(data);
			var sb = pl.world.getScoreboard();
			tellPlayer(pl, "&l[=======] &r&6&lGramados Income&r &l[=======]");
			tellPlayer(pl, "&ePlayer: &r"+p.getNameTag(sb));
			tellPlayer(pl, "&eBasic income: &6&o"+getAmountCoin(p.data.pay)+"&r&e per &6&o"+getTimeString(p.data.payTime));
			var tleft = (p.data.lastPayed+p.data.payTime) - new Date().getTime();
			tellPlayer(pl, "&6&o"+getTimeString(tleft, ['ms'])+"&r&e until next pay.");
			var pjobs = p.getJobs(data);
			
			if(pjobs.length > 0) {
				for(pj in pjobs) {
var pjob = pjobs[pj];
					tellPlayer(pl, "&eJob income for &r"+pjob.getDisplayName(data));
					tellPlayer(pl, "&e - Job salary: &6&o"+getAmountCoin(pjob.data.pay));
					var jleft = (p.getJob(pjob.name).lastPayed+pjob.data.payTime) - new Date().getTime();
					tellPlayer(pl, "&e - &6&o"+getTimeString(jleft, ['ms'])+"&r&e until next pay for &r"+pjob.getDisplayName(data));
				}
			}
			
			
			//print(p.toJson());
			return true;
		}, 'player.income', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			}
		]],
		['!player info <player>', function(pl, args, data){
			var p = new Player(args.player).init(data);
			var sb = pl.world.getScoreboard();
			tellPlayer(pl, "&e&lPlayer Info For: &r"+p.getNameTag(sb));
			var now = new Date().getTime();
			tellPlayer(pl, "&eFirst Login: &6&o"+getTimeString(now - p.data.firstLogin, ['ms'])+"&r &eago.");
			tellPlayer(pl, "&eLast Login: &6&o"+getTimeString(now - p.data.lastLogin, ['ms'])+"&r &eago.");
			return true;
		}, 'player.info', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			}
		]],
		//PLAYER UTILITY
		['!myIncome', function(pl, args){
			var p = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			p.load(data);
			tellPlayer(pl, "&l[=======] &r&6&lGramados Income&r &l[=======]");
			tellPlayer(pl, "&eBasic income: &6&o"+getAmountCoin(p.data.pay)+"&r&e per &6&o"+getTimeString(p.data.payTime));
			var tleft = (p.data.lastPayed+p.data.payTime) - new Date().getTime();
			tellPlayer(pl, "&6&o"+getTimeString(tleft, ['ms'])+"&r&e until next pay.");
			var pjobs = p.getJobs(data);
			
			if(pjobs.length > 0) {
				for(pj in pjobs) {
var pjob = pjobs[pj];
					tellPlayer(pl, "&eJob income for &r"+pjob.getDisplayName(data));
					tellPlayer(pl, "&e - Job salary: &6&o"+getAmountCoin(pjob.data.pay));
					var jleft = (p.getJob(pjob.name).lastPayed+pjob.data.payTime) - new Date().getTime();
					tellPlayer(pl, "&e - &6&o"+getTimeString(jleft, ['ms'])+"&r&e until next pay for &r"+pjob.getDisplayName(data));
				}
			}
			
			
			//print(p.toJson());
			return true;
			
		}, 'myIncome'],
		['!setHome <name>', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			var ppos = pl.getPos();
			plo.load(data);
		
			if(plo.data.maxHomes == -1 || Object.keys(plo.data.homes).length < plo.data.maxHomes) {
				plo.addHome(args.name, ppos.getX(), ppos.getY(), ppos.getZ());
				tellPlayer(pl, "&aAdded home '"+args.name+"'!");
				plo.save(data);
				return true;
			} else {
				tellPlayer(pl, "&cYou have reached maximum amount of homes! ("+plo.data.maxHomes+")");
			}
		
			return false;
		}, 'setHome'],
		['!delHome <name>', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			var ppos = pl.getPos();
			plo.load(data);
			if(plo.hasHome(args.name)) {//remove home
				plo.delHome(args.name);
				tellPlayer(pl, "&aRemoved home '"+args.name+"'!");
				plo.save(data);
				return true;
			} else {//Add new home
				tellPlayer(pl, "&cHome '"+args.name+"' does not exist!");
			}
			return false;
		}, 'delHome'],
		['!listHomes', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			plo.load(data);
			if(Object.keys(plo.data.homes).length > 0) {
				tellPlayer(pl, "&l[=======] &6&lGramados Homes &r&l[=======]");
				for(i in plo.data.homes) {
var home = plo.data.homes[i];
					tellPlayer(pl, "&e - &9&o"+i+"{run_command:!home "+i+"}&r&e (X: &c"+home.x+"&e,Y: &c"+home.y+"&e,Z: &c"+home.z+"&e)&r");
				}
				return true;
			} else {
				tellPlayer(pl, "&cYou don't have any homes!");
			}
			
			return false;
		}, 'listHomes'],
		['!home <name>', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			var ppos = pl.getPos();
			plo.load(data);
			if(plo.hasHome(args.name)) {
				var h = plo.data.homes[args.name];
				pl.setPosition(h.x, h.y, h.z);
			} else {
				tellPlayer(pl, "&cHome '"+args.name+"' does not exist!");
			}
			return false;
		}, 'home'],
		['!heal', function(pl, args){
			pl.setHealth(parseFloat(pl.getMaxHealth()));
			pl.setHunger(20);
			tellPlayer(pl, "&aYou have been healed!");
		}, 'heal'],
	]);

	//REGISTER REGION COMMANDS
	registerXCommands([
		//['', function(pl, args){}, ''],
		['!region add <name> [...display_name]', function(pl, args){
			var region = new Region(args.name);
			var data = pl.world.getStoreddata();
			if(!region.exists(data)) {
				var dname = args.display_name.join(" ");
				if(dname != "") {
					region.data.displayName = dname;
				}
				region.save(data);
				tellPlayer(pl, "&aAdded region '"+args.name+"'!");
				return true;
			} else {
				tellPlayer(pl, "&cRegion '"+args.name+"' already exists!");
			}
			
			return false;
		}, 'region.add'],
		['!region list [...matches]', function(pl, args){
			var data = pl.world.getStoreddata();
			var dkeys = data.getKeys();
			
			tellPlayer(pl, "&l[=======] &6&lGramados Regions&r &l[=======]");
			for(d in dkeys) {
var dkey = dkeys[d];
				if(dkey.cmatch(/region_(\w)/g) > 0) {
					var region = new Region(dkey.replace(/region_(\w)/g, '$1'));
					region.load(data);
					if(args.matches.length == 0 || arrayOccurs(region.name, args.matches) > 0) {
						tellPlayer(pl, "&e - &b"+region.name);
					}
				}
			}
			
			return false;
		}, 'region.list'],
		['!region info <region_name>', function(pl, args){
			var data = pl.world.getStoreddata();
			var region = new Region(args.region_name);
			if(region.load(data)) {
				tellPlayer(pl, "&l[=======]&r &6&lGramados Region Info&r &l[=======]");
				tellPlayer(pl, "&eRegion name: &b"+region.name);
				tellPlayer(pl, "&eDisplay name: &r"+region.data.displayName);
				var rown = (region.data.owner == null ? '&6&lGramados' : region.data.owner);
				tellPlayer(pl, "&eOwner: &6"+rown);
				tellPlayer(pl, "&l[=======] &e&lRegion Property Info &r&l[=======]");
				tellPlayer(pl, "&eSale Price (Economy Value): &6"+getAmountCoin(region.data.salePrice));
				var rti = region.data.rentTime > -1 ? getTimeString(region.data.rentTime) : "-1 (BUY)";
				
				tellPlayer(pl, "&eRent Time: &6&o"+rti);
				var fs = region.data.forSale;
				tellPlayer(pl, "&eFor Sale: &"+(fs?'a':'c')+fs.toString());
				
			} else {
				tellPlayer(pl, "&cRegion '"+region.name+"' does not exists!");
			}
			
			return false;
		}, 'region.info'],

	]);

	//REGISTER TEAM COMMANDS
	registerXCommands([
		['!teams set chatcolor <team_name> [color]', function(pl, args){
			var w = pl.world;
			var sb = w.getScoreboard();
			var t = new Team(args.team_name);
			var data = w.getStoreddata();
			if(t.teamExists(sb)) {
				if(args.color != null) {
					args.color = args.color.toLowerCase();
				}
				var acols = objArray(_RAWCOLORS);
				if(acols.indexOf(args.color) > -1) {
					t.data.chatcolor = args.color;
					t.save(data);
					tellPlayer(pl, "&aSet chatcolor for team ");
				} else {
					tellPlayer(pl, "&c'"+args.color+"' is not a valid value. Use one of the following: &o"+acols.join(', '));
				}
				
			} else {
				tellPlayer(pl, "&cTeam '"+args.teamname+"' does not exist!");
				t.remove(data);
			}
		}, 'teams.set.chatcolor']
	]);

	//REGISTER UTIL COMMANDS
	registerXCommands([
		['!debug', function(pl, args, data){
			var w = pl.world;
			var mcw = w.getMCWorld();
			//print(dump(mcw));
			mcw.logInfo('This is an info message by Runonstof');
		}, 'debug', []],
		['!fakeleave [...players]', function(pl, args){
			var pcol = '&f';
			var sb = pl.world.getScoreboard();
			var spl = (args.players.length > 0 ? args.players : [pl.getName()]);
			for(ss in spl) {
var sp = spl[ss];
				var t = sb.getPlayerTeam(sp);
				if(t != null) {
					var tc = t.getColor();
					if(tc != null) {
						pcol = '&'+getColorId(tc);
					}
				}
				
				executeCommand(pl, '/tellraw @a '+strf(pcol+sp+' &r&eleft the game', true));
			}
		}, 'fakeleave'],
		['!fakejoin [...players]', function(pl, args){
			var pcol = '&f';
			var sb = pl.world.getScoreboard();
			var spl = (args.players.length > 0 ? args.players : [pl.getName()]);
			for(ss in spl) {
var sp = spl[ss];
				var t = sb.getPlayerTeam(sp);
				if(t != null) {
					var tc = t.getColor();
					if(tc != null) {
						pcol = '&'+getColorId(tc);
					}
				}
				
				executeCommand(pl, '/tellraw @a '+strf(pcol+sp+' &r&ejoined the game', true));
			}
		}, 'fakejoin'],
		['!entity makeInvulnerable', function(pl, args, data){
			
		}, 'entity.makeInvulnerable'],
		['!version', function(pl, args){
			tellPlayer(pl, '&l[=======] &6&lRun\'s Server Software&r &l[=======]');
			tellPlayer(pl, '&e&lGramados Version: &c&l'+SCRIPT_VERSION);
			tellPlayer(pl, '&e&lSubscription: &9&lOriginal Edition');
			tellPlayer(pl, '&e&lProgrammed by: &r&lRunonstof');
			tellPlayer(pl, '&e&lMade by: &r&lTheOddlySeagull&r&e and &r&lRunonstof');
			tellPlayer(pl, '&6Contact Runonstof for further questions.');
		}, 'version'],
		['!listEnchants [...matches]', function(pl, args){
			var ENCHANTS = REGISTRY.ENCHANTMENTS.getValues();
			tellPlayer(pl, "&l[=======] &r&aAll Registered Enchantments&r &l[=======]");
			for(i in ENCHANTS) {
var ench = ENCHANTS[i];
				var ename = REGISTRY.ENCHANTMENTS.getKey(ench);
				var eid = REGISTRY.ENCHANTMENTS.getID(ench);
				if(args.matches.length == 0 || arrayOccurs(ename, args.matches)) {
					tellPlayer(pl, "&e - &b"+ename+"&r (ID: "+eid+")");
				}
			}
		}, 'listEnchants'],
		['!listPotions [...matches]', function(pl, args){
			var POTIONS = REGISTRY.POTIONS.getValues();
			tellPlayer(pl, "&l[=======] &r&aAll Registered Potion Effects&r &l[=======]");
			for(i in POTIONS) {
var pot = POTIONS[i];
				var pname = REGISTRY.POTIONS.getKey(pot);
				var pid = REGISTRY.POTIONS.getID(pot);
				if(args.matches.length == 0 || arrayOccurs(pname, args.matches) > 0) {
					tellPlayer(pl, "&e - &b"+pname+"&r (ID: "+pid+")");
				}
			}
		}, 'listPotions'],
		['!listBiomes [...matches]', function(pl, args){
			var BIOMES = REGISTRY.BIOMES.getValues();
			tellPlayer(pl, "&l[=======] &r&aAll Registered Biomes&r &l[=======]");
			for(i in BIOMES) {
var bio = BIOMES[i];
				var bname = REGISTRY.BIOMES.getKey(bio);
				var bid = REGISTRY.BIOMES.getID(bio);
				if(args.matches.length == 0 || arrayOccurs(bname, args.matches) > 0) {
					tellPlayer(pl, "&e - &b"+bname+"&r (ID: "+bid+")");
				}
			}
		}, 'listBiomes'],
		['!listEntities [...matches]', function(pl, args){
			var ENTITIES = REGISTRY.ENTITIES.getValues();
			tellPlayer(pl, "&l[=======] &r&aAll Registered Entities&r &l[=======]");
			for(i in ENTITIES) {
var ent = ENTITIES[i];
				var bname = REGISTRY.ENTITIES.getKey(ent);
				var bid = REGISTRY.ENTITIES.getID(ent);
				if(args.matches.length == 0 || arrayOccurs(bname, args.matches) > 0) {
					tellPlayer(pl, "&e - &b"+bname+"&r (ID: "+bid+")");
				}
			}
		}, 'listEntities'],
		['!tellraw <player> <...message>', function(pl, args){
			var msg = args.message.join(' ');
			executeCommand(pl, '/tellraw '+args.player+' '+strf(msg, true));
			return true;
		}, 'tellraw'],
		['!setMagAmmo <amount>', function(pl, args){
			var mItem = pl.getMainhandItem();
			var am = parseInt(args.amount) || 0;
			if(!mItem.isEmpty()) {
				var mnbt = mItem.getNbt();
				if(mnbt.has('Ammo')) {
					mnbt.setInteger('Ammo', am);
					//Item.setNbt(mnbt);
					tellPlayer(pl, "&aSet ammo to "+am+"!");
					return true;
				}
			}
			tellPlayer(pl, "&cYou don't have an magazine in your hand!");
			
			return false;
		}, 'setMagAmmo'],
		['!convertNpcLoot <radius>', function(pl, args){
			var w = pl.world;
			var ents = w.getNearbyEntities(pl.getPos(), parseInt(args.radius) || 4, 2);
			for(ee in ents) {
var ent = ents[ee];
				if(ent.getType() == 2) {//Is NPC
					var entnbt = ent.getEntityNbt();
					var entinv = ent.getInventory();
					for(var i = 0; i < 9; i++) {
						var dc = getDropChance(entnbt, i);
						var di = entinv.getDropItem(i);
						if(di != null) {
							var diLore = di.getLore();
							if(diLore.length > 0) {
								var diAmount = getCoinAmount(diLore[0].replace(/\s+/g, ''));
								if(diAmount > 0) {
									di.setCustomName(ccs("&2&lMoney&r"));
									di.setLore([ccs('&e'+getAmountCoin(diAmount))]);
									
									entinv.setDropItem(i, di, dc);
								}
							}
						}
					}
				}
			}
			tellPlayer(pl, "&aAffected "+ents.length+" entities.");
			return true;
		}, 'convertNpcLoot'],
		['!convertTrader <amount>', function(pl, args){
			var amount = parseInt(args.amount) || null;
			var ppos = pl.getPos();
			if(amount != null) {
				if(amount >= 4 && amount <= 32) {
					var ents = pl.world.getNearbyEntities(ppos, amount, 2);
					for(en in ents) {
var ent = ents[en];
						print(ent.getPos().normalize());
						if(ent.getType() == 2) {//Is NPC
							var entrole = ent.getRole();
							if(entrole != null) {
								if(entrole.getType() == 1) {//Is Trader
									//Loop sellItems
									var newTrades = [];
									for(var i = 0; i < 18; i++) {
										var newTrade = [
											entrole.getCurrency1(i),
											entrole.getCurrency2(i),
											entrole.getSold(i),
										];
										
										entrole.remove(i);
									}
									for(var i = 0; i < 18; i++) {
										print('SLOT: '+i);
										
										
										for(ii in newTrade) {
var nItem = newTrade[ii];
											if(!nItem.isEmpty()) {
												var nLore = nItem.getLore();
												if(nLore.length > 0) {
													var nAmount = getCoinAmount(nLore[0].replace(/\s+/g, ''));
													if(nAmount > 0) {
														nItem.setCustomName(ccs('&2&lMoney&r'));
														nItem.setLore([ccs('&e'+getAmountCoin(nAmount))]);
													}
												}
											}
											newTrade[ii] = nItem;
										}
										newTrade.forEach(function(nt){
											print(nt.getItemNbt().toJsonString());
										});
										entrole.set(
											i,
											newTrade[0].isEmpty() ? null : newTrade[0],
											newTrade[1].isEmpty() ? null : newTrade[1],
											newTrade[2].isEmpty() ? null : newTrade[2]
										);
									}
									
								}
							}
						}
					}
					if(ents.length == 0) {
						tellPlayer(pl, "&cNo NPC Traders found in a radius of "+amount+" blocks.");
					}
				} else {
					tellPlayer(pl, "&cYou have a minimum of 4 blocks and a maximum of 32 block!");
				}
			} else {
				tellPlayer(pl, "&c<amount> is not a valid number!");
			}
			return false;
		}, 'convertTrader'],
		['!convertMoney', function(pl, args){
			var mItem = pl.getMainhandItem();
			if(!mItem.isEmpty()) {
				var mL = mItem.getLore();
				if(mL.length > 0) {
					var cAm = getCoinAmount(mL[0].replace(/\s/g, ''));
					if(cAm > 0) {
						mItem.setCustomName(ccs('&2&lMoney&r'));
						mItem.setLore([
							ccs('&e'+getAmountCoin(cAm))
						]);
						tellPlayer(pl, "&aConverted money!");
						return true;
					}
				}
				tellPlayer(pl, "&cYou don't have valid money in hand!");
			} else {
				tellPlayer(pl, "&cYou don't have anything in your hand!");
			}
			
			return false;
		}, 'convertMoney'],
		['!giveMoney <amount> [...players]', function(pl, args){
			var w = pl.world;
			var plrs = [];
			objArray(w.getAllPlayers()).forEach(function(wp){
				plrs.push(wp.getName());
			});
			var am = getCoinAmount(args.amount);
			if(args.players.length == 0) { args.players = [pl.getName()]; }
			var mn = genMoney(w, am);
			
			for(i in args.players) {
var apl = args.players[i];
				if(plrs.indexOf(apl) > -1) {
					for(m in mn) {
var mi = mn[m];
						w.getPlayer(apl).giveItem(mi);
					}
				}
			}
			
			tellPlayer(pl, "&aGave "+getAmountCoin(am)+" to players: '"+args.players.join(', ')+"'");
			
			return true;
			
		}, 'giveMoney'],
		['!sayas <player> <...message>', function(pl, args, data){
			var w = pl.world;
			var ap = args.player;
			var apo = new Player(ap);
			apo.load(data);
			var msg = args.message.join(" ");
			var nmsg = getPlayerMessage(pl, msg, w, ap, true);
			executeCommand(pl, "/tellraw @a "+strf(nmsg, true, apo.getAllowedColors(data, w.getScoreboard())));
			return true;
			
		}, 'sayas'],
	]);



/*
Bridge between Reskillable-Compatskills mod and Custom NPCs
*/

var _SKILLS = [
	/*'compatskills.archery',
	'compatskills.trading',
	'compatskills.woodcutting',
	'compatskills.enchanting',*/
	'reskillable.attack',
	'reskillable.defense',
	'reskillable.farming',
	'reskillable.magic',
	'reskillable.mining',
	'reskillable.agility',
	'reskillable.building',
	'reskillable.gathering',
];

var _TRAITS = [
	//'compatskills.rename_tag',
	//'compatskills.more_deals',
];

//add xp objectives
var xp_stats = [];
var skill_names = [];
for(s in _SKILLS) {
	xp_stats[s] = _SKILLS[s].replace(/[\w]+\.([\w]+)/g, "$1_xp"); //Converts 'reskillable.mining' to 'mining_xp'
	skill_names[s] = _SKILLS[s].replace(/[\w]+\.([\w]+)/g, "$1").rangeUpper(0,1); //Converts 'reskillable.mining' to 'Mining'
}

function getXpStatFromSkill(skill_id) {
	return skill_id.replace(/[\w]+\.([\w]+)/g, "$1_xp");
}


function getSkillNameFromSkill(skill_id) {
	return skill_id.replace(/[\w]+\.([\w]+)/g, "$1").rangeUpper(0, 1);
}

function getRawSkillString(skillname, level, xp) {
	var skn = [];
	var pxp = xp;
	var mxp = getMaxXp(level);
	if(level < 99) {
		var pcol = 'red';
		var xpprog = Math.round(100/mxp*pxp);
		
		if(xpprog >= 75) {
			pcol = 'blue';
		} else if(xpprog >= 50) {
			pcol = 'green';
		} else if(xpprog >= 25) {
			pcol = 'gold';
		}
		
		skn.push([skillname, 'blue', 0, 1]);
		skn.push([' - Level: ', 'yellow', 0, 1]);
		skn.push([level.toString()+' ', 'red']);
		skn.push(['- XP: ', 'yellow', 0, 1]);
		skn.push([pxp.toString()+'/'+mxp.toString()+' ', pcol, 0, 0]);
		skn.push([' [', 'white']);
		
		var progdone = '';
		var progtodo = '';
		
		for(var j = 0; j < Math.round(20/100*xpprog); j++) {
			progdone += '|';
		}
		
		for(var j = 0; j < Math.round(20/100*(100-xpprog)); j++) {
			progtodo += '|';
		}
		
		skn.push([progdone, 'green']);
		skn.push([progtodo, 'red']);
		skn.push(['] ', 'white']);
		//skn.push(['- Progress: ', 'yellow', 0, 1]);
		skn.push([xpprog.toString()+'%', pcol, 0, 1]);
	} else {
		skn.push([skillname, 'blue', 0, 1]);
		skn.push([' - Max Level (Total XP: ', 'green', 0, 1]);
		skn.push([pxp.toString(), 'gold', 0, 1]);
		skn.push([')', 'green', 0, 1]);
	}
	return skn;
}

function hasTraits(player, traits) {
	
	if(typeof(traits) == 'string') { traits = [traits]; }
	var s = getSkills(player, null, traits);
	var t = 0;
	for(k in s) {
		var skill = s[k];
		for(u in skill.unlockables) {
			if(traits.indexOf(skill.unlockables[u]) > -1) {
				t++;
			}
		}
	}
	
	return t == traits.length;
}


function getMaxXp(lvl) {
	return 10+(Math.max(lvl-1, 0)*(2*Math.max(lvl, 1)));
}

function getSkillArray(player, skills, traits) {
	if(typeof(skills) == typeof(undefined)) { skills = null; }
	if(typeof(traits) == typeof(undefined)) { traits = null; }
	var s = getSkills(player, skills, traits);
	var a = [];
	for(n in s) { a.push(n); }
	return a;
}

function getSkills(player, skills, traits) {
	if(typeof(skills) == typeof(undefined)) { skills = null; }
	if(typeof(traits) == typeof(undefined)) { traits = null; }
	
	if(skills == null) {
		skills = _SKILLS;
	}
	if(traits == null) {
		traits = _TRAITS;
	}
	var pskills = {};
	var nbt = player.getNbt();
	var w = player.world;
	var sb = w.getScoreboard();
	var pp = nbt.getCompound('PlayerPersisted');
	var sk = pp.getCompound('SkillableData').getCompound('SkillLevels');
	for(k in skills) {
		var skill = sk.getCompound(skills[k]);
		var unlocks = [];
		var unl = skill.getCompound('unlockables');
		var sxp = 0;
		var sxp_obj = sb.getObjective(getXpStatFromSkill(skills[k]));
		if(sxp_obj != null) {
			var sxp_sc = sxp_obj.getScore(player.getName());
			if(sxp_sc != null) {
				sxp = sxp_sc.getValue();
			}
		}
		for(u in traits) {
			if(parseInt(unl.getByte(traits[u])) == 1) {
				unlocks.push(traits[u]);
			}
		}
		
		pskills[skills[k]] = {
			id: skills[k],
			level: skill.getInteger('level'),
			xp: sxp,
			skillPoints: skill.getInteger('skillPoints'),
			unlockables: unlocks
		};
		//print(skills[k]+': '+pskills[skills[k]].level.toString());
	}
	
	return pskills;
}



function init(e) {
	
	
	//GEN PLAYER PERMISSIONS
	(function(e){
		var w = e.player.world;
		var data = w.getStoreddata();
		var playerperms = [
			"chat",
			"chat.color",
			"chat.command",
			"chat.hover",
		];
		for(i in _RAWCOLORS) {
var rawc = _RAWCOLORS[i];
			playerperms.push('chat.color.'+rawc);
		}
		for(i in _RAWEFFECTS) {
var rawc = _RAWEFFECTS[i];
			playerperms.push('chat.color.'+rawc);
		}
		//Register if not exists
		for(p in playerperms) {
var plperm = playerperms[p];
			var pperm = new Permission(plperm);
			if(!pperm.exists(data)) {
				pperm.save(data);
			}
		}
		
	})(e);
	
	//END GEN PLAYER PERMISSIONS

	(function(e){
		var pl = e.player;
		var plo = new Player(pl.getName());
		var data = pl.world.getStoreddata();
		
		if(!plo.exists(data)) {
			plo.save(data);
		}
		plo.load(data);
		
		var pchats = plo.getChats(data);
		if(pchats.length == 0) {
			tellPlayer(pl, "[&6&lGramados&r] &eYou are not in a chatchannel yet! &6&nClick here{run_command:!chat list|show_text:$6!chat list}&r&e to join one!");
		} else {
			var tellchannels = "";
			pchats.forEach(function(pc){
				tellchannels += pc.getTag('{run_command:!chat leave '+pc.name+'|show_text:$eClick to leave channel.}')+'&r ';
			});
			
			tellPlayer(pl, "[&6&lGramados&r] &eYou are talking in channels: &r"+tellchannels);
		}
		
		plo.data.lastLogin = new Date().getTime();
		plo.save(data);
	})(e);


	var w = e.player.world;
	var sb = w.getScoreboard();
	var t = sb.getPlayerTeam(e.player.getName());
	if(t == null && sb.hasTeam('Player')) {
		sb.getTeam('Player').addPlayer(e.player.getName());
	}
	
	tellPlayer(e.player, "[&6&lGramados&r] &9Make sure to join our &n&9Discord{open_url:https://discord.gg/zcjyXxK}&r &9server!");
}

function interact(e) {
	
	(function(e){
		//Create a 'build'-event for player scripts
		if(e.type == 2) {
			var place_block = e.player.getMainhandItem();
			if( (place_block == null ? true : !place_block.isBlock()) ) { //If placeblock is null or not a block at all
				place_block = e.player.getOffhandItem(); //Try the offhand item
			}
			if( !(place_block == null ? true : !place_block.isBlock()) ) { //Is place_block not null and is a block?
				//Build event can be executed, check if it exists though
				if(typeof(build) != typeof(undefined)) {
					build(e, place_block);
				}
			}
		}
	})(e);

}

function keyPressed(e) {
	
}

function build(e, placeblock) { //Custom event
	
}

function kill(e) {
	
}

function login(e) {
	
}

function logout(e) {
	
}

function pickedUp(e) {
	
}

function rangedLaunched(e) {
	
}

function timer(e) {
	
}

function toss(e) {
	
}

function tick(e) {
	
	
	//CHECK MONEY PAY
	(function(e){
		var pl = e.player;
		var plo = new Player(pl.getName());
		var data = pl.world.getStoreddata();
		plo.load(data);
		
		if(new Date().getTime() > (plo.data.lastPayed+plo.data.payTime)) {
			if(plo.data.pay > 0) {
				var pm = genMoney(pl.world, plo.data.pay);
				for(p in pm) {
var pii = pm[p];
					pl.giveItem(pii);
				}
				tellPlayer(pl, "&aYou have earned "+getAmountCoin(plo.data.pay)+"!");
				plo.data.lastPayed = new Date().getTime();
				plo.save(data);
			}
		}
		
		//CHECK JOB PAY
		for(j in plo.data.jobs) {
var pjob = plo.data.jobs[j];
			var job = new Job(j);
			if(!job.exists(data)) {
				plo.delJob(j);
				plo.save(data);
				continue;
			}
			job.load(data);
			var jobpay = job.data.pay;
			var jobpayTime = job.data.payTime;
			var joblastPayed = pjob.lastPayed;
			var now = new Date().getTime();
			if(now >= joblastPayed+jobpayTime) {
				var pm = genMoney(pl.world, jobpay);
				for(p in pm) {
var pii = pm[p];
					pl.giveItem(pii);
				}
				tellPlayer(pl, "&aYou have earned "+getAmountCoin(jobpay)+" from job '"+job.getDisplayName(data)+"'&r&a!");
				plo.data.jobs[j].lastPayed = now;
				plo.save(data);
			}
		}
		
		
	})(e);


}

function attack(e) {
	
}

function broken(e) {
	
}

function chat(e) {
	
	if(e.message.substr(0, 1) == '!') {
		executeXCommand(e.message, e.player);
		e.setCanceled(true);
		return true;
	}

	var w = e.player.world;
	var data = w.getStoreddata();
	var sb = w.getScoreboard();
	
	var dpl = new Player(e.player.getName()).init(data);
	var allwdcolors = dpl.getAllowedColors(data, sb);
	var esccolors = removeFromArray(_RAWCODES, allwdcolors);
	
	var newmsg = dpl.getNameTag(sb, ' -> ')+dpl.getChatColorPref(sb, data)+escCcs(e.message.toString(), esccolors);

	var chats = dpl.getChats(data);
	print('CHAT COUNT OF '+e.player.getName()+": "+chats.length)
	if(chats.length > 0) {
		var toldPlayers = [];
		var wp = w.getAllPlayers();
		for(c in chats) {
var ch = chats[c];
			for(ww in wp) {
var wpl = wp[ww];
				if(toldPlayers.indexOf(wpl.getName()) == -1 && ch.data.players.indexOf(wpl.getName()) > -1) {
					var wchats = [];
					new Player(wpl.getName()).init(data).getChats(data).forEach(function(wchat){
						wchats.push(wchat.getTag());
					});
					var ccpref = '&9&l[***]{*|show_text:'+wchats.join("\n")+'}&r ';
					executeCommand(wpl, "/tellraw "+wpl.getName()+" "+strf(ccpref+newmsg, true));
					toldPlayers.push(wpl.getName());
				}
			}
		}
		
		
	} else {
		executeCommand(e.player, "/tellraw @a "+strf(newmsg, true));
	}
	//executeCommand(e.player, "/tellraw @a "+strf(newmsg, true)); //Send 'fake' messages
	//You can loop through players in an array, get their timezone and show them different message
	e.setCanceled(true); //<-- Cancel Sending REAL message
}

function containerOpen(e) {
	
}

function containerClose(e) {
	
}

function damaged(e) {
	
}

function died(e) {
	
}

function factionUpdate(e) {
	
}