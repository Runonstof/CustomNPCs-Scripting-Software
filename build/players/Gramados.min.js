
//Currency settings
var _COINITEMNAME = '&2&lMoney&r';//Custom name of currency
var _COINITEM_PREFIX = '&e'; //Prefix showing before money value lore (used for color coding)

//Configure your own currency units
//Units of currency, with own names, with lowest unit being 1
var _COINTABLE = {//MUST BE FROM LOW TO HIGH
	'c': 1,
	'g': 100,
	'k': 100000,
	'm': 100000000,
	'b': 100000000000,
}; //With this setup, the syntax for 223503 would be 2k235g3c (case-INSensitive)

//Your money items, and their values in money syntax
//"value": "item_id",
var _COINITEMS = { //MUST BE FROM LOW TO HIGH
	'1c': 'variedcommodities:coin_iron',
	'5c': 'variedcommodities:coin_iron',
	'10c': 'variedcommodities:coin_iron',
	'20c': 'variedcommodities:coin_iron',
	'50c': 'variedcommodities:coin_iron',
	'1g': 'variedcommodities:coin_iron',
	'2g': 'variedcommodities:coin_iron',
	'5g': 'variedcommodities:money',
	'10g': 'variedcommodities:money',
	'20g': 'variedcommodities:money',
	'50g': 'variedcommodities:money',
	'100g': 'variedcommodities:money',
	'200g': 'variedcommodities:money',
	'500g': 'variedcommodities:money',
	'1k': 'variedcommodities:plans',
	'10k': 'variedcommodities:plans',
	'100k': 'variedcommodities:plans',
	'1m': 'variedcommodities:plans',
	'10m': 'variedcommodities:plans',
	'100m': 'variedcommodities:plans',
	'1b': 'variedcommodities:plans',
};
//===== CONFIG
var SERVER_NAME = "Gramados";
var SERVER_PREFIX = "&6&l"; //Color for output
var SERVER_BAR_OPEN = "&r&l<-=======] &r"; //For output
var SERVER_BAR_CLOSE = "&r&l [=======->&r";
var BAR_OPEN = "&l[";
var BAR_CLOSE = "&l]";

var DEFAULT_TEAMS = [ //Default scoreboard teams that gets added when permission is created
	"Owner",
	"Developer"
];
var DEFAULT_PLAYERS = [ //Default players that gets added when permission is created

];
//Team that player autojoins when player has no team
//set to null to disable
var DEFAULT_TEAM_JOIN = "Player";
//var DEFAULT_TEAM_JOIN = null;

//Configure your own time units!
var msTable = {
	//Reallife time
	'y': 31556926000, //365.25 days for taking leap years into account
	'mon': 2629743830, //
	'w': 604800000,
	'd': 86400000,
	'h': 3600000,
	'min': 60000,
	's': 1000,
	'ms': 1,
};




//LANGUAGE settings
var _MSG = {

	"cmdNotFound": "&cCould not find this command!",
	"cmdNoPerm": "&cYou don't have permission to this command!",
	"argNotValid": "&c'{argName}' is not a valid id/name! It can only contain: &o{allowed}",
	"argToShort": "&c'{argName}' is too short! (Min. {allowed} characters)",
	"argToShort": "&c'{argName}' is too long! (Max. {allowed} characters)",
	"argNoColor": "&c'{argName}' cannot contain colorcoding!",
	"argEnum": "&c'{argName}' must be one of the following: &o{allowed}!",
	"argNaN": "&c'{argName}' is not a number!",
	"argMax": "&c'{argName}' cannot be bigger than {allowed}!",
	"argMin": "&c'{argName}' cannot be smaller than {allowed}!",
	"argNotExists": "&c{dataType} '{argVal}' does not exists!",
	"argExists": "&c{dataType} '{argVal}' already exists!",
	"argColor": "&cColors must be one of the following: {allowed}!",
	"argColorEffect": "&cChat effects must be one of the following: {allowed}!",
	"argItemAttr": "&cItem attributes must be one of these {allowed}!",
	"argBool": "&c{dataType} must be true or false!",
	"undoBtnText": "&5&lUNDO",
};


//===== END CONFIG, DO NOT EDIT BELOW, UNLESS YOU KNOW WHAT TO DO


var SERVER_TITLE = SERVER_PREFIX+SERVER_NAME;
var SERVER_TAG = BAR_OPEN+"&r"+SERVER_TITLE+"&r"+BAR_CLOSE;

//==Reallife date handler for hiring regions etc

Date.prototype.addTime = function(addTime) {
	this.setTime(this.getTime()+addTime);
};

Date.prototype.hasPassed = function(passDate) {
	return (this.getTime() >= passDate.getTime());
};

//Converts TimeString to number
function getStringTime(timeString) {
	//0y4mon3d 6h 8min3s 800ms
	var reg = /([\d]+)([a-zA-Z]+)/g;
	var _m = timeString.match(reg);
	var newTime = 0;
	var _tk = Object.keys(msTable);

	for(m in _m) {
		var fm = _m[m];
		var nm = fm.replace(reg, '$1').cInt();
		var om = fm.replace(reg, '$2');
		if(nm != null) {
			if(_tk.indexOf(om) != -1) {
				newTime += nm * (msTable[_tk[_tk.indexOf(om)]]);
			} else { newTime += nm; }
		}
	}

	return newTime;
}
//Converts number to TimeString
function getTimeString(stringTime, excludes) {
	if(typeof(excludes) == typeof(undefined)) { excludes = []; }
	var newTime = parseInt(stringTime);
	var newStr = '';
	for(ms in msTable) {
		if(excludes.indexOf(ms) == -1) {
			var msnum = 0;
			while(newTime >= msTable[ms]) {
				msnum++;
				newTime -= msTable[ms];
			}
			if(msnum > 0) {
				newStr += msnum.toString()+ms;
			}
		}
	}


	return newStr;
}
function getFnArgs(fn) {
	var fnrgx = /function[\s]+([\w]+)\(([\w,\s]+)\)/;
	var fnstr = fn.toString();
	var fnargs = [];
	var m = fnstr.match(fnrgx);
	if(m != null) {
		
      	m[2].split(',').forEach(function(a){
        	fnargs.push(a.trim());
        });
      	
      	return fnargs;
	}
	
	return fnargs;
}
String.prototype.allMatch = function(regx) {
	var m = this.match(regx);
	var rr = [];
	for(mm in m) {
		var mt = m[mm];
		var rx = regx.exec(this);
		rr.push(rx);
	}

	return rr;
};


String.prototype.cmatch = function(regx) {
	return (this.match(regx) || []).length;
};

String.prototype.rangeUpper = function(min, max) {
	var str = '';
	for(var i = 0; i < this.length; i++) {
		var c = this.substring(i, i+1); //curchar
		if(i >= min && i < max) {
			c=c.toUpperCase();
		}
		str+=c.toString();
	}
	return str;
};
String.prototype.rangeLower = function(min, max) {
	var str = '';
	for(var i = 0; i < this.length; i++) {
		var c = this.substring(i, i+1); //curchar
		if(i >= min && i < max) {
			c=c.toLowerCase();
		}
		str+=c.toString();
	}
	return str;
};

String.prototype.pad = function(character, len) {
	var n = this.toString();
	for(var i = n.length; i < len; i++) {
		n += character.toString();
	}
	return n;
};

String.prototype.fill = function(payload) {
	str = this.toString();
	for(p in payload) {
var payl = payload[p];
		str = str.split("{"+p+"}").join(payl);
	}
	return str;
}

String.prototype.padMiddle = function(character, len) {

	var n = this.toString();
	var sc = Math.floor((len-n.length)/2);
	var ns = '';
	for(var i = 0; i < sc; i++) {
		ns += character.toString();
	}
	ns+=n;
	for(i = 0; i < sc; i++) {
		ns += character.toString();
	}
	return ns;
};

String.prototype.cInt = function() {
	return (isNaN(parseInt(this)) ? null : parseInt(this));
};


String.prototype.append = function(ch, amount) {
	var new_str = this.toString();
  	for(var i = 0; i < amount; i++) {
    	if(i >= new_str.length) {
        	new_str += ch.toString();
        }
    }

  return new_str;
};

String.prototype.prepend = function(ch, amount) {
	var new_str = this.toString();
  	for(var i = 0; i < amount; i++) {
    	if(i >= new_str.length) {
        	new_str = ch.toString()+new_str;
        }
    }

  return new_str;
};

String.prototype.replaceAll = function(search, replacement) {
    var target = this.toString();
    if(typeof(search) == 'string') { search = [search]; }
		for(s in search) {
var sr = search[s];
			target = target.split(sr).join(replacement);
		}
		return target;
};


var ASSET_MOD_ID = "adventureassets";

//Java import
var API = Java.type('noppes.npcs.api.NpcAPI').Instance();
var UItem = Java.type("brad16840.common.UniqueItem");
var UItemInv = Java.type('brad16840.common.UniqueItemInventory');

function objMerge(obj1,obj2){
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
    return obj3;
}

function getHalfRotation(angle) {
	angle = fixAngle(angle);
	if(angle <= 180) { return angle; } else { return -(180-(angle-180)); }
}
//UUIDLeast-Most
function UUIDLM() { return rrandom_range(1, 99999); }

function getQuartRotation(dir) {
	dir = getHalfRotation(dir);

	if(Math.abs(dir) > 90) {
		dir = (180-Math.abs(dir))*sign(dir);
	}

	return dir;
}

function compare(val1, comp, val2, asString) {
	if(typeof(asString) == typeof(undefined)) { asString = true; }

    return false;
}

function getDropChance(npcnbt, slot) {
	var dropC = npcnbt.getList('DropChance', 10);
	var dropChance = parseInt(dropC[slot].getInteger('Integer'));


	return dropChance;
}


function progressBar(value, max, length, fillColor, leftColor){
	if(typeof(fillColor) == typeof(undefined)) { fillColor = "&a"; }
	if(typeof(leftColor) == typeof(undefined)) { leftColor = "&c"; }
	var skillBar = '&r&l[&r';
	var progress = Math.floor((value/max)*length);
	var proc = Math.round(value/max*100);
	for(var i = 0; i < length; i++) {
		if(i < progress) skillBar += "&a\u2B1B";
		if(i >= progress) skillBar += "&c\u2B1B";
	}
	return skillBar += "&r&l]";
}

function playerIsOnline(world, player) {
	var isOnline = false;
	var pl = world.getAllPlayers();
	for(p in pl) {
		if(pl[p].getName() == player.toString()) {
			isOnline = true;
			break;
		}
	}
	return isOnline;
}

//===================ItemStack Array Utils===================

//Used to get backpack IInventory (to get/set items array you can use `getBackpackInv(pl, items).items` )
function getBackpackInv(pl, item){
	//If backpack item wasn't been opened yet
	if(UItem.hasIdentifier(item.getMCItemStack()))
		return UItemInv.getInventory(pl.getMCEntity(), UItem.getIdentifier(item.getMCItemStack()));
	return;
}

function givePlayerItems(player, stacks, pnbt) {
	if(typeof(pnbt) == typeof(undefined)) { pnbt = null; }
    var w = player.world;
    if(pnbt == null) {
        pnbt = player.getEntityNbt();//Dont over-use this one
    }
    var invcnt = getPlayerInvCount(pnbt, w);
    for(s in stacks) {
var stack = stacks[s];
        if(invcnt < 36) {
            //Player inv not full
            player.giveItem(stack);
            invcnt++;
        } else {
            player.dropItem(stack);
        }
    }
}

//Made for givePlayerItems (does not include armor and offhand)
function getPlayerInvCount(pnbt, w) {
    return getPlayerInvFromNbt(pnbt, w, function(item, itnbt){
        //Exclude armor slots and offhand
        return ["-106", "100", "101", "102", "103"].indexOf(itnbt.getByte('Slot').toString()) == -1;
    }).length;
}

function getPlayerInvFromNbt(pnbt, w, filterFn) {
	if(typeof(filterFn) == typeof(undefined)) { filterFn = null; }
	var pinv = pnbt.getList('Inventory', pnbt.getListType('Inventory'));
	var pitems = [];
	for(p in pinv) {
var pin = pinv[p];
		var pitm = w.createItemFromNbt(API.stringToNbt(pin.toJsonString()));
        //pin (INbt) contains key "Slot"
        //pitm.getItemNbt() does not, thats why pin is passed
        if( (filterFn == null ? true : filterFn(pitm, pin, w)) ) {
            pitems.push(pitm);
        }
	}

	return pitems;
}

function getInvItemCount(pnbt, itemstack, w, ignoreNbt) {
	return getArrItemCount(getPlayerInvFromNbt(pnbt, w), itemstack, ignoreNbt);
}

//Unstable, use money pouch for taking money
function takeMoneyFromPlayer(player, amount, pnbt) {
	if(typeof(pnbt) == typeof(undefined)) { pnbt = null; }
    if(pnbt == null) { pnbt = player.getEntityNbt(); }
    var w = player.world;
    if(getMoneyItemCount(pnbt, w) >= amount) {
        var pmitems = getPlayerInvFromNbt(pnbt, w, function(item, inbt, w){
            return isItemMoney(item, w);//Get only money items
        }).sort(function(r,s){
            return getItemMoney(r, w)-getItemMoney(s, w);//Sort by money
        });

        for(pm in pmitems) {
var pmitem = pmitems[pm];
            var pval = getItemMoney(pmitem, w);

            for(var i = 1; i <= pmitem.getStackSize(); i++) {
                if(amount > 0) {
                    pmitem.setStackSize(pmitem.getStackSize()-1);
                    amount -= pval;
                } else {
                    break;
                }
            }
        }
        tellPlayer(player, "Amount: "+amount);
        if(amount < 0) {
            var cmoney = genMoney(w, Math.abs(amount));
            givePlayerItems(player, cmoney, pnbt)
        }
    }

}
//Returns amount of money in player inv
function getMoneyItemCount(pnbt, w) {
  var am = 0;
  for(itemvalue in _COINITEMS) {
var ci = _COINITEMS[itemvalue];
    var coinItems = genMoney(w, getCoinAmount(itemvalue));
    for(_cii in coinItems) {
var _coin = coinItems[_cii];
      am += getInvItemCount(pnbt, _coin, w, false)*getCoinAmount(itemvalue);
    }

  }
  return am;
}

function getItemMoney(stack, w) {
    for(ival in _COINITEMS) {
var ci = _COINITEMS[ival];
        var cm = genMoney(w, getCoinAmount(ival))[0]||null;
        if(cm != null) {
            if(isItemEqual(stack, cm)) {
                return getCoinAmount(ival);
            }
        }
    }
    return 0;
}

function isItemMoney(stack, w) {
    return getItemMoney(stack, w) > 0;
}

function isNbtEqual(nbt, otherNbt) {
    return nbt.toJsonString() == otherNbt.toJsonString();
}

function isItemEqual(stack, other, ignoreNbt){
	if(typeof(ignoreNbt) == typeof(undefined)) { ignoreNbt = false; }
	if (!other || other.isEmpty()) {
		return false;
	}

	stackNbt = stack.getItemNbt();
	stackNbt.remove('Count');
	otherNbt = other.getItemNbt();
	otherNbt.remove('Count');

	if(ignoreNbt) {
		if(stackNbt.getString("id") == otherNbt.getString("id")) {
			return true;
		}
	} else {
		if(isNbtEqual(stackNbt, otherNbt)) {
			return true;
		}
	}

	return false;
}

//How much items in array
function getArrItemCount(array, itemstack, ignoreNbt) {
	if(typeof(ignoreNbt) == typeof(undefined)) { ignoreNbt = false; }
	var icount = 0;
	for(pi in array) {
var pitem = array[pi];
		pinbt = pitem.getItemNbt();
		var scount = parseInt(pinbt.getByte('Count'));
		if(isItemEqual(itemstack, pitem, ignoreNbt))
			icount += scount;
	}

	return icount;
}

//Remove certain amount of ItemStack item from ItemStack[] array
function arrayItemRemove(array, item, amount){
	var count = getArrItemCount(array, item);
	if (amount > count) {
		return false;
	}
	if (count == amount) {
		return arrayAllItemsRemove(array, item);
	} else {
		for (var i = 0; i < array.length; ++i) {
			if (!array[i] || !isItemEqual(item, array[i])) continue;
			if (amount >= array[i].getStackSize()) {
				//EmptyItemStack
				array[i] = API.getIItemStack(Java.type('net.minecraft.item.ItemStack').field_190927_a);
				amount -= array[i].getStackSize();
				continue;
			}
			array[i].setStackSize(array[i].getStackSize() - amount);
			break;
		}
	}
	return array;
}

//Remove all items like ItemStack item from ItemStack[] array
function arrayAllItemsRemove(array, item){
	for (var i = 0; i < array.length; ++i) {
		if (!array[i] || !isItemEqual(item, array[i])) continue;
		//EmptyItemStack
		array[i] = API.getIItemStack(Java.type('net.minecraft.item.ItemStack').field_190927_a);
	}
	return array;
}

//Convert MCItemStack[] to IItemStack[]
function getIItemStackArray(array){
	var newArr = [];
	for (var i = 0; i < array.length; ++i) {
		newArr[i] = API.getIItemStack(array[i]);
	}
	return newArr;
}

//Convert IItemStack[] to MCItemStack[]
function getMCItemStackArray(array){
	var newArr = [];
	for (var i = 0; i < array.length; ++i) {
		newArr[i] = array[i].getMCItemStack();
	}
	return newArr;
}


function getHandItem(player) {
	return player.getMainhandItem() || player.getOffhandItem();
}
//===========================================================

function uniqid() {
	var id = '';
	for(var i = 0; i <= 3; i++) {
		id+=Math.random().toString(36).substr(2, 9);
	}
	return id;
}

function arrayOccurs(string, subArray, allowOverlapping, caseSensitive) {
	if(typeof(allowOverlapping) == typeof(undefined)) { allowOverlapping = false; }
	if(typeof(caseSensitive) == typeof(undefined)) { caseSensitive = true; }
	var occ = 0;
	for(i in subArray) {
var sel = subArray[i];
		occ += occurrences(string, sel, allowOverlapping, caseSensitive);
	}

	return occ;
}

function occurrences(string, subString, allowOverlapping, caseSensitive) {
	if(typeof(allowOverlapping) == typeof(undefined)) { allowOverlapping = false; }
	if(typeof(caseSensitive) == typeof(undefined)) { caseSensitive = true; }
    string = string.toString()
    subString = subString.toString()

	if(!caseSensitive) {
		string = string.toLowerCase();
		subString = subString.toLowerCase();
	}

    if (subString.length <= 0) return (string.length + 1);

    var n = 0,
        pos = 0,
        step = allowOverlapping ? 1 : subString.length;

    while (true) {
        pos = string.indexOf(subString, pos);
        if (pos >= 0) {
            ++n;
            pos += step;
        } else break;
    }
    return n;
}

function arrayTransform(arr, elfn) {
	var newa = [];
	for(a in arr) {
var arri = arr[a];
		newa.push(elfn(arri, a, arr));
	}
	return newa;
}

function arrayTakeRange(arr, start, end) {
	if(typeof(end) == typeof(undefined)) { end = null; }
	if(end == null) { end = arr.length; }
	var a = [];
	var _end = Math.min(end, arr.length);
	var _start = Math.min(start, _end);
	for(var i = _start; i < Math.min(end, arr.length); i++) {
		if(typeof(arr[i]) != typeof(undefined)) {
			a.push(arr[i]);
		}
	}
	return a;
}


function sign(num) {
	if(typeof(num) == typeof(undefined)) { num = 0; }
	if(num > 0) { return 1; }
	if(num < 0) { return -1; }
	return 0;
}

function g(obj, grp_props) {
	for(j in grp_props) {
		var props = grp_props[j];
		for(i in props[0]) {
			if(obj != null) {
				if(typeof(obj[props[0][i]]) != typeof(undefined)) {
					obj = obj[props[0][i]];

					break;
				}
			}
		}
	}


	return obj;
}

function httpGetAsync(theUrl, callback)
{
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() {
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
            callback(xmlHttp.responseText);
    }
    xmlHttp.open("GET", theUrl, true); // true for asynchronous
    xmlHttp.send(null);
}

function getAllFuncs(obj) {
    var props = [];

    do {
        props = props.concat(Object.getOwnPropertyNames(obj));
    } while (obj = Object.getPrototypeOf(obj));

    return props.sort().filter(function(e, i, arr) {
       if (e!=arr[i+1] && typeof obj[e] == 'function') return true;
    });
}

function removeFromArray(arr, vals) {
	if(typeof(vals) == 'string') { vals = [vals]; }
	var a = arr;
	for(v in vals) {
var val = vals[v];
		array_remove(a, val);
	}
	return a;
}
function removeFromArrayByKey(arr, keys) {
	var narr = [];
	for(k in keys) {
var key = keys[k];
		keys[k] = parseInt(key);
	}
	for(i in arr) {
var ari = arr[i];
		if(keys.indexOf(i) > -1) {
			narr.push(ari);
		}
	}
	return narr;
}

var _ITEMATTR = [
	'generic.attackDamage',
	'generic.followRange',
	'generic.maxHealth',
	'generic.followRange',
	'generic.knockbackResistance',
	'generic.movementSpeed',
	'generic.armor',
	'generic.armorToughness',
	'generic.attackSpeed',
	'generic.luck',
	'generic.attackKnockback',
	'generic.flyingSpeed',
	'generic.luck',

];


var _RAWCOLORS = {
	'0': 'black',
	'1': 'dark_blue',
	'2': 'dark_green',
	'3': 'dark_aqua',
	'4': 'dark_red',
	'5': 'dark_purple',
	'6': 'gold',
	'7': 'gray',
	'8': 'dark_gray',
	'9': 'blue',
	'a': 'green',
	'b': 'aqua',
	'c': 'red',
	'd': 'light_purple',
	'e': 'yellow',
	'f': 'white',
};

var _RAWEFFECTS = {
	'o': 'italic',
	'l': 'bold',
	'k': 'magic',
	'm': 'strike',
	'n': 'underline',
	'r': 'reset'
}

var _RAWCODES = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS));
function getColorId(name) {
	for(i in _RAWCOLORS) {
		if(name == _RAWCOLORS[i]) {
			return i;
		}
	}
	for(i in _RAWEFFECTS) {
var re = _RAWEFFECTS[i];
		if(name == re) {
			return i;
		}
	}
	return 'f';
}
function getColorName(id) {
	for(i in _RAWCOLORS) {
var rc = _RAWCOLORS[i];
		if(id == i) {
			return rc;
		}
	}
	for(i in _RAWEFFECTS) {
var re = _RAWEFFECTS[i];
		if(id == i) {
			return re;
		}
	}
	return 'white';
}

function parseEmotes(str, allwd) {
	if(typeof(allwd) == typeof(undefined)) { allwd = []; }

  str = str.replaceAll(objArray(CHAT_EMOTES), '');
	for(ce in CHAT_EMOTES) {
var chatemote = CHAT_EMOTES[ce];
    if(allwd.length == 0  || allwd.indexOf(ce) > -1) {
		    str = str.replaceAll(':'+ce+':', chatemote);
		    str = str.replaceAll(':/'+ce+'/:', ':'+ce+':');
    }
	}
	return str;
}


function strf(str, toRaw, allowed) {
	if(typeof(toRaw) == typeof(undefined)) { toRaw = true; }
	if(typeof(allowed) == typeof(undefined)) { allowed = null; }
	return strrawformat(str, toRaw, allowed);
}
var trg = /{[\s]*(?:([\w]+)[\s]*\:[\s]*([\w\W\/]+?)|\*)(?:[\s]*\|[\s]*([\w]+)[\s]*\:[\s]*([\w\W\/]+?[\s]*))?}/;


function strrawformat(str, toRaw, allowed) {
	if(typeof(toRaw) == typeof(undefined)) { toRaw = false; }
	var rf = [];
	var txt = '';
	var ri = -1;
	var isCode = false;
	var txtColor = 'white';
	var isItalic = false;
	var isBold = false;
	var isStrike = false;
	var isUnderlined = false;
	var isObf = false;
	str = str+'&r ';

	for(var i = 0; i < str.length; i++) {
		var c = str.substr(i, 1);
		if(c == '&' || i == str.length-1) {
			//Check if new section has to be made
			if(txt.length > 0) {
				ri++;
				var cmds = [];


				rf.push([txt, txtColor, isItalic, isBold, isUnderlined, isStrike, isObf]);
				isItalic = false;
				isBold = false;
				isUnderlined = false;
				isStrike = false;
				isObf = false;
				txtColor = 'white';
				txt = '';
			}
			isCode = true;
			continue;
		} else {
			if(!isCode) {
				txt += c.toString();
			} else {
				//Check Colors
				if(typeof(_RAWCOLORS[c]) != typeof(undefined)) {
					txtColor = _RAWCOLORS[c];
				}
				//Check Markup
				switch(c.toString()) {
					case 'o': {
						isItalic = true;
						break;
					}
					case 'l': {
						isBold = true;
						break;
					}
					case 'n': {
						isUnderlined = true;
						break;
					}
					case 'm': {
						isStrike = true;
						break;
					}
					case 'k': {
						isObf = true;
						break;
					}
					case 'r': {
						isItalic = false;
						isBold = false;
						isUnderlined = false;
						isStrike = false;
						isObf = false;
						txtColor = 'white';
						break;
					}
				}
				isCode = false;
			}
		}
	}

	return (!toRaw ? rf : rawformat(rf, true));
}


function rawformat(str_pieces, fullraw, allowed) {
	if(typeof(fullraw) == typeof(undefined)) { fullraw = true; }
	if(typeof(allowed) == typeof(undefined)) { allowed = null; }
	if(allowed == null) {
		allowed = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS)).concat(['x', 'y']);

	}
	var txt = '';
	if(fullraw) { txt+='[""'; }

	for(i in str_pieces) {
		var p = str_pieces[i];
		var ntext = p[0].replace(/\"/g, '\\"');
		var nm =  ntext.match(trg) || [];
		if(nm.length > 0) {
			p[7] = nm[1];
			p[8] = nm[2];
			p[9] = nm[3];
			p[10] = nm[4];
			ntext = ntext.replace(nm[0], '');
		}
		var pc = '{"text":"'+ntext+'"';
		if(p[1]) {
			if(allowed.indexOf(getColorId(p[1])) == -1) {
				p[1] = 'white';
			}

			pc+=',"color":"'+p[1].toString()+'"';

		}
		if(p[2]) {
			if(allowed.indexOf('o') > -1) {
				pc+=',"italic":true';
			}
		}
		if(p[3]) {
			if(allowed.indexOf('l') > -1) {
				pc+=',"bold":true';
			}
		}
		if(p[4]) {
			if(allowed.indexOf('n') > -1) {
				pc+=',"underlined":true';
			}
		}
		if(p[5]) {
			if(allowed.indexOf('m') > -1) {
				pc+=',"strikethrough":true';
			}
		}
		if(p[6]) {
			if(allowed.indexOf('k') > -1) {
				pc+=',"obfuscated":true';
			}
		}

		if(p[7] && p[8]) { pc+=',"clickEvent":{"action":"'+p[7]+'","value":"'+p[8]+'"}'; }
		if(p[9] && p[10]) { pc+=',"hoverEvent":{"action":"'+p[9]+'","value":"'+ccs((p[10]||"").replace(/\$/g, '\u00A7'),allowed)+'"}'; }
		pc += '}';


		txt+=( fullraw ? ',' : '' )+pc.toString();
	}

	if(fullraw) {
		txt += ']';
	}

	return txt;


}

function data_get(data, keys) {
	var get = {};
	for(k in keys) {
		//var key = keys[k];
		get[k] = data.get(k);
		if(get[k] == null) { get[k] = keys[k]; }
	}

	return get;
}

function data_register(data, vals) {
	for(k in vals) {
		var val = vals[k];
		if(data.get(k) == null) { data.put(k, val); }
	}
}

function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}

function data_overwrite(data, keys, vals) {
	if(typeof(keys) == typeof(undefined)) { keys = []; }
	if(typeof(vals) == typeof(undefined)) { vals = []; }
	if(typeof(keys) == 'string') { keys = [keys]; }
	if(typeof(vals) == 'string') { vals = [vals]; }

	for(k in keys) {
		var key = keys[k];
		var val = vals[k];
		data.put(key, val);
	}
}

function posdir(pos, dir, pitch, len, flying) {
	if(typeof(dir) == typeof(undefined)) { dir = 0; }
	if(typeof(pitch) == typeof(undefined)) { pitch = 0; }
	if(typeof(len) == typeof(undefined)) { len = 1; }
	if(typeof(flying) == typeof(undefined)) { flying = false; }
	var x = pos.getX();
	var y = pos.getY();
	var z = pos.getZ();
	var xdir = getQuartRotation(dir);
	var zdir = getQuartRotation(dir-90);
	x += Math.round(len*(Math.abs(xdir)/90)*sign(xdir));
	z += Math.round(len*(Math.abs(zdir)/90)*sign(zdir));
	if(flying) {
		y += (len)*(Math.abs(pitch)/90)*-sign(pitch);
	}
	return {x:x,y:y,z:z};
}


function fixAngle(angle) {
	angle = Math.abs(angle);
	if(angle >= 360) { angle -= 360; }
	return angle;
}

function lengthpitch_y(pitch, length) {
	return Math.round(pitch/-90)*length;
}


function lengthdir_x(angle, length) {
	if(typeof(length) == typeof(undefined)) { length = 1; }
	return Math.round((getQuartRotation(angle)/90)*length);
}

function lengthdir_z(angle, length) {
	if(typeof(length) == typeof(undefined)) { length = 1; }
	angle = fixAngle(angle+270);
	return -lengthdir_x(angle, length);
}

function pick(a, amount) {
	if(typeof(amount) == typeof(undefined)) { amount = 1; }
	var index = Math.floor(Math.random() * a.length);
	amount = Math.min(a.length, amount);
	if(amount == 1) {
		return a[index];
	} else {
		var picks = [];

		while(picks.length < amount) {
			index = Math.floor(Math.random() * a.length);
			if(picks.indexOf(a[index]) == -1) { picks.push(a[index]); }
		}

		return picks;
	}
}

function escapeNbtJson(json, trim_ends) {
	if(typeof(trim_ends) == typeof(undefined)) { trim_ends = true; }
	json = json.replace(/(?:\\n|\\)/g, '');
	json = json.replace(/(\d) ([fbds]+)/g, "$1$2");
	json = json.replace(/\\("|')/g, "$1");
	if(trim_ends) {
		json = json.slice(1, json.length - 1);
	}

	return json;
}


function array_remove(array, element) {
  var index = array.indexOf(element);

  if (index !== -1) {
    array.splice(index, 1);
  }
}

function pickwhere(a, fn, amount) {
	return pick(array_filter(a, fn), amount);
}

function array_dist(a) {
	var b = [];
	for(c in a) {
		if(b.indexOf(a[c]) == -1) {
			b.push(a[c]);
		}
	}

	return b;
}

function objArray(obj) {
	var a = [];
	for(i in obj) {
var o = obj[i];
		a.push(o);
	}
	return a;
}

function array_filter(a, fn) {
	var aa = [];
	for(i in a) {
		if(fn(a[i])) { aa.push(a[i]); }
	}

	return aa;
}

function escCcs(str, esc_formats) {
	if(typeof(esc_formats) == typeof(undefined)) { esc_formats = null; }
	if(esc_formats == null) {
		esc_formats = _RAWCODES;
	}

	return str.replace(new RegExp('&(['+esc_formats.join("")+'])', 'g'), '');
}

function ccs(str, af) {
	if(typeof(af) == typeof(undefined)) { af = null; }
	return colorCodeString(str, af);
}

function colorCodeString(str, allowed_formats) {
	if(typeof(allowed_formats) == typeof(undefined)) { allowed_formats = null; }
	if(allowed_formats == null) {
		allowed_formats = Object.keys(_RAWCOLORS).concat(Object.keys(_RAWEFFECTS));
	}
	allowed_formats = removeFromArray(allowed_formats, ['x', 'y']);
	return str.replace(new RegExp("&(["+allowed_formats.join("")+"])", 'g'), '\u00A7$1').replace(/&\\/g, '&');
}

function genName(name) {
	var p = [
    'Amazing',
    'Awesome',
    'Blithesome',
    'Excellent',
    'Fabulous',
    'Fantastic',
    'Favorable',
    'Gorgeous',
    'Incredible',
    'Outstanding',
    'Perfect',
    'Propitious',
    'Remarkable',
    'Rousing',
    'Spectacular',
    'Splendid',
    'Stellar',
    'Super',
    'Upbeat',
    'Unbelievable',
    'Wondrous',
	'Tempered',
	'Legendary',
	'Magical'
	];
	var s = [
		'Destruction',
		'Slaughter',
		'Starlight',
		'Heroism',
		'Bonebreaking',
		'The Fallen',
		'Silence',
		'Spellkeeping',
		'Massacre',
		'Sanity',
		'Insanity',
		'Remorse',
		'Fury'
	];

	return pick(p) + ' ' + name + ' of ' + pick(s);
}

function nbtCopy(nbt, api) {
	return api.stringToNbt(nbt.toJsonString());
}

function getDayTime(time) {
	while(time > 24000) { time -= 24000; }
	return time;
}

function random_ranges(min, max, amount) {
	var a = 0;
	for(var i = 0; i < amount; i++) { a += random_range(min, max); }
	return a;
}

function rrandom_ranges(min, max, amount) {
	var a = 0;
	for(var i = 0; i < amount; i++) { a += rrandom_range(min, max); }
	return a;
}

function pickchance(a, amount) {
	var aa = [];
	for(e in a) {
		if(!isArray(a[e])) {
			aa[aa.length] = a[e];
		} else {
			for(var i = 0; i < a[e][1]; i++) {
				aa[aa.length] = a[e][0];
			}
		}
	}

	return pick(aa, amount);
}

function inArray(a, val) {
	for(k in a) { if(a[k] === val) { return true; } }
	return false
}

function rrandom_range(min, max) { return Math.round(random_range(min, max)); }

function random_range(_min, _max) {
	var min = Math.min(_min, _max);
	var max = Math.max(_min, _max);

	var diff = max - min;

	return (min + (Math.random() * diff));
}

function array_merge(a1, a2) {
	var bb = [];
	for(k in a1) {
		bb[k] = a1[k];
	}
	for(k in a2) {
		bb[k] = a2[k];
	}
	return bb;
}

function isArray(obj) {
	if(typeof(obj) === 'object') {
      for(k in obj) {

          if(isNaN(k)) { return false; }
      }


      return true;
    } else { return false }
}

function isObject(obj) {
	return ( typeof(obj) === 'object' && !isArray(obj) );
}


function nbtItem(nbt, w) {
	if(typeof(nbt) == 'string') { nbt = API.stringToNbt(nbt); }
	var item = w.createItemFromNbt(nbt);

	return item;
}

function nbtItemArr(nbtArr, w) {
    var itemArr = [];
	for(itemData in nbtArr) {
var item = nbtArr[itemData];
        itemArr.push(nbtItem(item, w));
    }

    return itemArr;
}

var UNI = [
	'0',
	'1',
	'2',
	'3',
	'4',
	'5',
	'6',
	'7',
	'8',
	'9',
	'a',
	'b',
	'c',
	'd',
	'e',
	'f',
];
var CHAT_EMOTES = {
	"check": "\u9366",
	"hp": "\u9390",
	"hphalf": "\u9391",
	"hpempty": "\u938E",
	"cross": "\u9367",
	"sun": "\u2739",
	"star": "\u2729",
	"recycle": "\u267B",
	"seagull": "\u932A",
	//emoji
	"cool": "\u9914",
	"shocked": "\u9915",
	"smile": "\u9916",
	"joy": "\u9917",
	"wink": "\u9918",
	"happy": "\u9919",
	"crazy": "\u991A",
	//Misc
	"wifi5": "\u936A",
	"wifi4": "\u936B",
	"wifi3": "\u936C",
	"wifi2": "\u936D",
	"wifi1": "\u936E",
	"wifi0": "\u936F",
	"lang": "\u935C",
	"money": "\u932B",
	"trin": "\u932D",
	"unu": "\u932E",
	"folder": "\u932F",
	"thumbsup": "\u93F3",
	"thumbsdown": "\u93F4",
	"bomb": "\u93F5",
	"hazard": "\u93F6",
	"ying": "\u93F7",
	"danger": "\u93F8",
	"noperm": "\u93F9",
	"gear": "\u93FA",
	"stats": "\u93FB",
	"medal_bronze": "\u99F0",
	"medal_silver": "\u99F1",
	"medal_gold": "\u99F2",
	"medal_diamond": "\u99F3",
	"medal_emerald": "\u99F4",
	"unlock": "\u937E",
	"lock": "\u937F",
	//Arrows
	"arrow_u": "\u9920",
	"arrow_ur": "\u9921",
	"arrow_r": "\u9922",
	"arrow_dr": "\u9923",
	"arrow_d": "\u9924",
	"arrow_dl": "\u9925",
	"arrow_l": "\u9926",
	"arrow_ul": "\u9927",
	//Mobs
	"creeper": "\u92C0",
	"ccreeper": "\u92C1",
	"skeleton": "\u92C2",
	"wskeleton": "\u92C3",
	"spider": "\u92C4",
	"zombie": "\u92C5",
	"vzombie": "\u92C6",
	"slime": "\u92C7",
	"ghast": "\u92C8",
	"oghast": "\u92C9",
	"pigzombie": "\u92CA",
	"enderman": "\u92CB",
	"blaze": "\u92CE",
	"mslime": "\u92CF",
	"illager": "\u92D1",
	"pig": "\u92D3",
	"sheep": "\u92D4",
	"cow": "\u92D5",
	"chicken": "\u92D6",
	"villager": "\u92E5",

	//items
	"iron_ingot": "\u90B0",
	"gold_ingot": "\u90B1",
	"brick": "\u90B2",
	"nether_brick": "\u90B3",
	"coal": "\u90B4",
	"ccoal": "\u90B5",
	"diamond": "\u90B6",
	"ruby": "\u90B7",
	"emerald": "\u90B8",
	"nether_star": "\u90BD",

	//blocks items
	"coal_ore": "\u9220",
	"iron_ore": "\u9221",
	"gold_ore": "\u9222",
	"redstone_ore": "\u9223",
	"diamond_ore": "\u9224",
	"lapis_ore": "\u9225",
	"emerald_ore": "\u9226",
	"cobble": "\u9227",
	"mosscobble": "\u9228",
	"stone": "\u9229",
	"chest": "\u92F9",
	"enderchest": "\u92FB",
	"giftchest": "\u92FC",
	"pumpkin": "\u9270",
	"jacklantern": "\u9271",
	"melon": "\u9274",
	"cactus": "\u9276",
	"sponge": "\u927C",
	"tnt": "\u927E",
	"lit": "\u9200",
	"water": "\u920B",
	"lava": "\u920E",
	"portal": "\u920F",


	//Foods
	"creamcookie": "\u932C",
	"cookie": "\u90EB",
	"cake": "\u90EC",
	"ppie": "\u90ED",

	//Weapons and tools
	"wooden_sword": "\u9000",
	"wooden_pickaxe": "\u9001",
	"wooden_shovel": "\u9002",
	"wooden_axe": "\u9003",
	"wooden_hoe": "\u9004",

	"stone_sword": "\u9005",
	"stone_pickaxe": "\u9006",
	"stone_shovel": "\u9007",
	"stone_axe": "\u9008",
	"stone_hoe": "\u9009",

	"golden_sword": "\u900A",
	"golden_pickaxe": "\u900B",
	"golden_shovel": "\u900C",
	"golden_axe": "\u900D",
	"golden_hoe": "\u900E",

	"iron_sword": "\u9010",
	"iron_pickaxe": "\u9011",
	"iron_shovel": "\u9012",
	"iron_axe": "\u9013",
	"iron_hoe": "\u9014",

	"diamond_sword": "\u9015",
	"diamond_pickaxe": "\u9016",
	"diamond_shovel": "\u9017",
	"diamond_axe": "\u9018",
	"diamond_hoe": "\u9019",


	//Emotes that *should not be* public
	"box": "\u2B1B",

};

function executeCommand(player, command, as_player) {
	if(typeof(as_player) == typeof(undefined)) { as_player = null; }
	if(as_player == null) { as_player = player.getName(); }
	var API = Java.type('noppes.npcs.api.NpcAPI').Instance();
	var cmd = API.createNPC(player.world.getMCWorld());
	
	return cmd.executeCommand("/execute "+as_player+" ~ ~ ~ "+command);
	
}
function tellPlayer(player, rawtext) {

	return executeCommand(player, "/tellraw "+player.getName()+" "+parseEmotes(strf(rawtext)));
}

function storytellPlayer(player, ar) {
	for(i in ar) {
var ari = ar[i];
		//print(ai[i].join('==='));
		tellPlayer(player, ari);
	}
}

function getTitleBar(title, showServerName) {
	if(typeof(showServerName) == typeof(undefined)) { showServerName = true; }
	return SERVER_BAR_OPEN+(showServerName?SERVER_TITLE+" ":"")+title+SERVER_BAR_CLOSE;
}

function getUndoBtn(undo_cmds, hoverText) {
	if(typeof(hoverText) == typeof(undefined)) { hoverText = null; }
	return "&r["+_MSG['undoBtnText']+"{run_command:!chain ;"+undo_cmds.join(";")+(hoverText == null ? "" : "|show_text:"+hoverText.toString())+"}&r]";
}

var _COMMANDS = [];
var _DATAHANDLERS = {};
function AutoMsg(name) {
    DataHandler.apply(this, ['automsg', name]);

    this.data = {
        "msg": "Default AutoMessage",
        "enabled": true,
        "mode": "interval",
        "interval": getStringTime("5min"),
        "lastSend": 0,
    };

    this.broadcast = function(pl, target) {
        executeCommand(pl, "/tellraw "+target+" "+parseEmotes(strf(this.msg)));
        return this;
    };

    this.canSend = function(){
        return new Date().getTime() >= this.lastSend+this.interval;
    };
}


function ChatChannel(name) {
	DataHandler.apply(this, ['chatchannel', name]);
	Permittable.apply(this, []); //add getPermission etc

	this.data = {
		"displayName": name,
		"players": [],
		"color": "blue",
		"desc": "",
	};
	this.addPlayers = function(players){
		for(p in players) {
var player = players[p];
			this.data.players.push(player);
		}
		return this;
	};
	this.getColor = function(cr) {
		cr = cr||'&';
		return cr+getColorId(this.data.color);
	};
	this.getName = function() {
		return this.getColor()+this.data.displayName+"&r";
	};
	this.getTag = function(prefix, cr) {
		cr = cr||'&';
		return this.getColor(cr)+cr+"l[#"+this.data.displayName+(prefix||'')+"]"+cr+"r";
	};
	this.removePlayers = function(players) {
		var np = [];
		for(p in this.data.players) {
var player = this.data.players[p];
			if(players.indexOf(player) == -1) {
				np.push(player);
			}
		}
		this.data.players = np;
		return this;
	};
	this.getPlayers = function(world) { //returns all online IPlayers
		var plr = world.getAllPlayers();
		var plrs = [];
		for(p in plr) {
var pl = plr[p];
			if(this.data.players.indexOf(pl.getName()) > -1) {
				plrs.push(pl);
			}
		}
		return plrs;
	};
	this.broadcast = function(w, msg, exc) {
		if(typeof(exc) == typeof(undefined)) { exc = []; }
		var plrs = w.getAllPlayers();
		for(p in plrs) {
var pl = plrs[p];
			if(this.data.players.indexOf(pl.getName()) > -1 && exc.indexOf(pl.getName()) == -1) {
				tellPlayer(pl, msg);
			}
		}
		return this;
	};
}

function getColorPermId(colorId) {
	return 'chat.color.'+getColorName(colorId);
}




function Emote(name) {
  DataHandler.apply(this, ['emote', name]);
  Permittable.apply(this, ['emotes']);

  this.data = {
    "price": 0,
    "desc": "",
    "default": false, //If everyone has the emote by default
    "forSale": false, //If emote can be bought
    "hidden": false, //Will be hidden from !listEmotes, unless player has it, if forSale == true emote can still be bought via command
  };

  this.getCode = function(){
      return CHAT_EMOTES[this.name]||"?";
  };
}





function GiftCode(name) {
	DataHandler.apply(this, ['giftcode', name]);
	Permittable.apply(this, ['giftcodes']);
	this.data = {
		"code": "",
        "uses": 0,
        "items": [],
		"money": 0,
		"emotes": []
	};

	this.onCreate(function(self, data){
		var perm = self.getPermission();
        perm.data.enabled = false;
        perm.save(data);
    });

    this.generateCode = function(){
        var code = "";
        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for (var i = 0; i < 6; i++)
            code += chars.charAt(Math.floor(Math.random() * chars.length));

        this.data.code = code;
    };

    this.getUsesLeft = function(pl){
        if(this.data.uses == -1) return "infinite";
        return this.data.uses;
    };

    this.redeem = function(pl, data){
		var perm = this.getPermission().init(data);
		if(!perm.permits(pl.getName(), pl.world.getScoreboard(), data)){
			tellPlayer(pl, "&cYou don't have permission to use this code!");
			return false;
		}

		var p = new Player(pl.getName()).init(data);
		if(this.data.uses == 0){
			tellPlayer(pl, "&cMax uses reached");
			return false;
		}
		if(p.data.actGiftcodes.indexOf(this.name) > -1){
			tellPlayer(pl, "&cYou already activated this code");
			return false;
		}
		//give
		if(this.data.emotes.length > 0){
			for(n in this.data.emotes) {
var emote = this.data.emotes[n];
				if(p.data.emotes.indexOf(emote) == -1) {
	          		p.data.emotes.push(emote);
	        	}
        	}
		}
		if(this.data.items.length > 0) givePlayerItems(pl, nbtItemArr(this.data.items, pl.world));
		if(this.data.money > 0) givePlayerItems(pl, genMoney(pl.world, this.data.money));

		this.data.uses -= 1;
		this.save(data);
		p.data.actGiftcodes.push(this.name);
		p.save(data);
		tellPlayer(pl, "&aCode '"+this.name+"&a' activated!");
		return true;
    };


}



function Job(name) {
	DataHandler.apply(this, ['job', name]);
	this.data = {
		"displayName": name,
		"pay": getCoinAmount('5g'),
		"payTime": getStringTime('20min'),
		"isOpen": false,
		"capacity": 10,
		"fireTime": getStringTime('1w'),
		"companyId": null
	};

	this.getPlayers = function(data) {
		var pl = [];
		var dkeys = data.getKeys();
		for(d in dkeys) {
var dkey = dkeys[d];
			if(dkey.cmatch(/player_(\w+)/g) == 1) {
				var player = new Player(dkey.replace(/player_(\w+)/g, '$1'));
				player.load(data);
				if(player.hasJob(this.name) && pl.indexOf(player.name) == -1) {
					pl.push(player.name);
				}
			}
		}

		return pl;
	};

	this.getDisplayName = function(data) {
		if(typeof(data) == typeof(undefined)) {
			return this.data.displayName+'&r';
		} else {
			return this.getStatusColor(data)+this.data.displayName+'&r';
		}
	}

	this.getStatusColor = function(data) {
		if(this.data.capacity == -1) {
			return '&a';
		}
		if(this.getPlayers(data).length < this.data.capacity) {
			return '&6';
		}
		return '&c';
	};
}


function Mail(name) {
	this.data = {
		"from": null,
		"to": [],
		"title": "",
		"message": ""
	};
}var PERMISSION_REGEX = /permission_([\w.\-]+)/g;

//extendable function
function Permittable(permDomain) {
	this.permDomain = permDomain||this.type;
	//Requires DataHandler
	this.getPermission = function(){
		return new Permission(this.getPermissionId());
	};
	this.getPermissionId = function(){
		return this.permDomain+'.'+this.name;
	};
	this.onRemove(function(self, data) {
		self.getPermission().remove(data); //Removes permission when DataHandler gets removed
		
	});
	this.onSave(function(self, data){
		var perm = self.getPermission();
		if(!perm.exists(data)) {
			//Create permission of permittable if not exists
			perm.save(data); //this will run Permission onSave functions
		}
	});
}

function Permission(name) {
	DataHandler.apply(this, ['permission', name]);

	this.data = {
		"enabled": true,
		"teams": DEFAULT_TEAMS,
		"players": [],
		"jobs": [],
		"meta": {}
	};

	this.addTeams = function(teams) {
		if(typeof(teams) == 'string') { teams = [teams]; }
		for(t in teams) {
var team = teams[t];
			var teamname = team;
			if(this.data.teams.indexOf(teamname) == -1) {
				this.data.teams.push(teamname);
			}
		}

		return this;
	};
	this.removeTeams = function(teams) {
		if(typeof(teams) == 'string') {
			teams = [teams];
		}

		var nteams = [];
		for(t in this.data.teams) {
var team = this.data.teams[t];
			if(teams.indexOf(team) == -1) {
				nteams.push(team);
			}
		}
		this.data.teams = nteams;
		return this;
	};
	this.addPlayers = function(players) {
		if(typeof(players) == 'string') { players = [players]; }
		for(p in players) {
var player = players[p];
			if(this.data.players.indexOf(player) == -1) {
				this.data.players.push(player);
			}
		}

		return this;
	};
	this.removePlayers = function(players) {
		if(typeof(players) == 'string') { players = [players]; }
		var nplayers = [];
		for(p in this.data.players) {
var player = this.data.players[p];
			if(players.indexOf(player) == -1) {
				nplayers.push(player);
			}
		}
		this.data.players = nplayers;
		return this;
	}
	this.permits = function(player, sb, data) {
		///String player
		///IScoreboard sb
		///IData data
		var team = sb.getPlayerTeam(player);
		var permitted = false;
		var p = new Player(player);
		p.load(data);

		//Check enabled
		if(!this.data.enabled) { return true; }

		//Check team
		if(team != null) {
			if(this.data.teams.indexOf(team.getName()) != -1) {
				permitted = true;
			}
		}
		//Check player
		if(this.data.players.indexOf(player) != -1) {
			permitted = true;
		}
		//Check jobs
		var pjobs = p.getJobs(data);
		for(p in pjobs) {
var pjob = pjobs[p];
			if(this.data.jobs.indexOf(pjob.name) != -1) {
				permitted = true;
			}
		}


		return permitted;
	};
	this.getParentPerms = function(data) {
		var parents = [];
		var permids = this.getAllDataIds(data);
		var idarr = this.name.split(".");
		for(pid in permids) {
var permid = permids[pid];
			var pidarr = permid.split(".");
			if(idarr.length > pidarr.length && permid != this.name) {
				var pidmatch = true;
				for(pai in pidarr) {
var piditem = pidarr[pai];
					if(piditem != idarr[pai]) {
						pidmatch = false;
					}
				}
				if(pidmatch && parents.indexOf(permid) == -1) {
					parents.push(permid);
				}
			}
		}

		return parents;
	}
}





function Player(name) {
	DataHandler.apply(this, ['player', name]);

	this.data = {
		"lastPayed": 0,
		"pay": getCoinAmount('5g'),
		"payTime": getStringTime('20min'),
		"maxJobs": 2,
		"maxHomes": 1,
		"homes": {},
		"jobs": {},
		"inventories": [],
		"emotes": [],
		"actGiftcodes": [], //Activated GiftCodes
		"chatcodes": [],//Unlockables for color coding
		"chatcolor": null,//Default chatcolor (NOT FOR UNLOCKS)
		"badges": [],
		"showbadge": null,
		"chateffect": null,
		"color": null,
		"firstLogin": new Date().getTime(),
		"lastLogin": 0,
		"color": null,
		"UUID": null,
		"money": 0,
	};
	this.sync = function(ipl) {
		this.data.UUID = ipl.getUUID();
		this.name = ipl.getName();
		return this;
	};
	this.getChatColorPref = function(sb, data) {
		var pref = '';
		var prefeff = '';
		var t = sb.getPlayerTeam(this.name);
		if(t != null) {
			var td = new Team(t.getName()).init(data);
			if(td.data.chatcolor != null) {
				pref = '&'+getColorId(td.data.chatcolor);
			}
			if(td.data.chateffect != null) {
				prefeff = '&'+getColorId(td.data.chateffect);
			}
		}
		if(this.data.chatcolor != null) {
			pref = '&'+getColorId(this.data.chatcolor);
		}
		if(this.data.chateffect != null) {
			prefeff = '&'+getColorId(this.data.chateffect);
		}
		return pref+prefeff;
	};
	this.getNameTag = function(sb, prefix, namesuff, teamsuff, ccChar) {
		var t = sb.getPlayerTeam(this.name);
		var dc = ccChar||'&';
		var ccol = '';
		var ctm = '';
		if(this.data.color != null) {
			var cId = getColorId(this.data.color);
			ccol = dc+cId;
		} else if(t != null) {
			ccol = dc+getColorId(t.getColor());
		}

		if(t != null) {
			ctm = ccol+dc+'o'+t.getDisplayName()+' ';
		}
		return ccol+dc+'l['+ccol+ctm+(teamsuff||'')+dc+'r'+ccol+this.name+(namesuff||'')+ccol+dc+'l'+']'+(prefix||'')+dc+'r';
	};

	this.delJob = function(name) {
		if(this.hasJob(name)) {
			delete this.data.jobs[name];
		}
		return this;
	};
	this.getJob = function(name) {
		if(this.hasJob(name)) {
			return this.data.jobs[name];
		}
		return null;
	};
	this.getJobs = function(data) {
		var jobs = [];
		for(i in this.data.jobs) {
var job = this.data.jobs[i];
			pjob = new Job(i);
			if(pjob.load(data)) {
				jobs.push(pjob);
			}
		}
		return jobs;
	};
	this.getJobCount = function() {
		return Object.keys(this.data.jobs).length;
	};
	this.addJob = function(name) {
		this.data.jobs[name] = {
			"lastPayed": 0
		};
		return this;
	};
	this.hasJob = function(name) {
		return Object.keys(this.data.jobs).indexOf(name) > -1;
	};
	this.hasMaxJobs = function() {
		return (this.data.maxJobs != -1 && this.getJobCount() >= this.data.maxJobs);
	};
	this.addHome = function(name, x, y, z) {
		this.data.homes[name] = {
			x: x,
			y: y,
			z: z,
		};
		return this;
	};
	this.delHome = function(name) {
		if(this.data.homes.hasOwnProperty(name)) {
			delete this.data.homes[name];
		}
		return this;
	};
	this.hasHome = function(name) {
		return (this.data.homes.hasOwnProperty(name));
	};
	this.getChats = function(data) {
		var chats = [];
		var dkeys = data.getKeys();
		for(d in dkeys) {
var dkey = dkeys[d];
			if(dkey.cmatch(/chatchannel_([\w]+)/g) > 0) {
				var cc = new ChatChannel(dkey.replace(/chatchannel_([\w]+)/g, "$1"));
				if(cc.load(data)) {
					if(cc.data.players.indexOf(this.name) > -1) {
						chats.push(cc);
					}
				}
			}
		}

		return chats;
	}
	this.getAllowedColors = function(data, sb) {
		var ac = [];
		//Check individual colors
		for(i in _RAWCOLORS) {
var rc = _RAWCOLORS[i];
			var cp = new Permission(getColorPermId(getColorId(rc))).init(data);
			if(cp.permits(this.name, sb, data)) {
				ac.push(getColorId(rc));
			}
		}
		for(i in _RAWEFFECTS) {
var rc = _RAWEFFECTS[i];
			var cp = new Permission(getColorPermId(getColorId(rc))).init(data);
			if(cp.permits(this.name, sb, data)) {
				ac.push(getColorId(rc));
			}
		}
		if(new Permission('chat.command').init(data).permits(this.name, sb, data)) {
			ac.push('x');
		}
		if(new Permission('chat.hover').init(data).permits(this.name, sb, data)) {
			ac.push('y');
		}


		return ac;
	};

	this.getInventory = function(name){
		for(invName in this.data.inventories) {
var inv = this.data.inventories[invName];
			if(inv[0] == name) return inv[1];
		}
		return;
	};
	this.removeInventory = function(name){
		for(invName in this.data.inventories){
			this.data.inventories.splice(invName, 1);
			return true;
		}
		return false;
	};
	this.hasEmote = function(name, sb, data) { //Checks if player has emote
		var em = new Emote(name).init(data,false);
		return (this.data.emotes.indexOf(name) > -1
		|| em.getPermission().init(data, false).permits(this.name, sb, data)
		|| em.data.default
		);
	};
	this.getAllowedEmotes = function(sb, data) {
		var ems = [];
		for(c in CHAT_EMOTES) {
var ce = CHAT_EMOTES[c];
			var ec = new Emote(c);
			ec.load(data);
			if(this.hasEmote(ec.name, sb, data)) {
				ems.push(ec.name);
			}
		}
		return ems;
	};
}











function Region(name) {
	DataHandler.apply(this, ['region', name]);
	Permittable.apply(this, ['regions']); //Uses custom permission domain 'regions'


	this.data = {
		"displayName": this.name,
		"positions": [],
		"owner": null,
		"rentStartTime": 0,
		"maxRentCredit": -1,
		"rentCredit": 0,
		"forSale": false,
		"salePrice": 0,
		"rentTime": -1,
		"trusted": [],
	};

	/*String player, IScoreboard sb, IData data*/
	this.canBreak = function(player, sb, data) {
		var perm = this.getPermission().init(data);
		return (
			this.data.owner == player
		|| 	this.data.trusted.indexOf(player) > -1
		||  perm.permits(player, sb, data)
		);
	}
	/*Array xyz1, Array xyz2*/
	this.addPos = function(xyz1, xyz2) {
		var newPos = {
			xyz1: xyz1,
			xyz2: xyz2,
		};
		this.data.positions.push(newPos);

		return this;
	};
	this.addCoord = function(xyz) {
		//Check if there is a half-position
		var hasHalfPos = false;
		for(i in this.data.positions) {
var pos = this.data.positions[i];
			if(pos.xyz1 == null || pos.xyz2 == null) {
				pos.xyz1 = pos.xyz1||xyz;
				pos.xyz2 = pos.xyz2||xyz;

				this.data.positions[i] = pos;
				hasHalfPos = true;
				break;
			}
		}
		if(!hasHalfPos) {
			this.addPos(xyz, null);
		}

		return this;
	};
	/*Array xyz*/
	this.getPos = function(xyz) { //Gets cube number of xyz coord
		for(i in this.data.positions) {
var pos = this.data.positions[i];//Loop cubes
			if(pos.xyz1 != null && pos.xyz2 != null) { //Check is valid cube
				var minx = Math.min(pos.xyz1[0], pos.xyz2[0]);
				var miny = Math.min(pos.xyz1[1], pos.xyz2[1]);
				var minz = Math.min(pos.xyz1[2], pos.xyz2[2]);

				var maxx = Math.max(pos.xyz1[0], pos.xyz2[0]);
				var maxy = Math.max(pos.xyz1[1], pos.xyz2[1]);
				var maxz = Math.max(pos.xyz1[2], pos.xyz2[2]);

				var x = xyz[0];
				var y = xyz[1];
				var z = xyz[2];

				if(x >= minx
				&& x <= maxx

				&& y >= miny
				&& y <= maxy

				&& z >= minz
				&& z <= maxz) {
					return i;
				}
			}
		}

		return -1;
	};

	this.hasCoord = function(xyz) { //Check if xyz is in region
		return (this.getPos(xyz) > -1);
	}
}

function normalizePos(pos) {
	return [
		pos.getX(),
		pos.getY(),
		pos.getZ(),
	];
}








function Team(name) {
	DataHandler.apply(this, ['team', name]);
	this.data = {
		"chatcolor": null,
		"chateffect": null,
	};
	this.teamExists = function(sb) {
		return sb.hasTeam(this.name);
	};
}



function genMoney(w, amount) {
	var am = amount
	var coinams = Object.keys(_COINITEMS);
	var nmItems = [];
	for(var i = coinams.length-1; i >= 0; i--) {
		var coincount = 0;
		var coinval = getCoinAmount(coinams[i]);
		if(coinval > 0) {
			while(am >= coinval) {
				coincount++;
				am -= coinval;
			}
		}
		if(coincount > 0) {
			var coinitem = w.createItem(_COINITEMS[coinams[i]], 0, coincount);
			coinitem.setCustomName(ccs(_COINITEMNAME));
			coinitem.setLore([
				ccs(_COINITEM_PREFIX+coinams[i].toUpperCase())
			]);
			nmItems.push(coinitem);
		}
	}


	return nmItems;

}

function getPlayerMessage(player, message, w, pname, fullraw, allowed) {
	if(typeof(pname) == typeof(undefined)) { pname = null; }
	if(typeof(fullraw) == typeof(undefined)) { fullraw = true; }
	if(typeof(allowed) == typeof(undefined)) { allowed = []; }
	if(pname == null) {pname = player.getName();}
	var data = w.getStoreddata();
	var plo = new Player(player.getName()).init(data);
	var sb = w.getScoreboard();
	var ts = sb.getTeams();
	var t = sb.getPlayerTeam(pname);
	var notifySound = pick([
		'animania:cluck3',
		'animania:combo',
		'animania:crow3',
		'animania:moo2',
		'animania:ooooohh',
		'animania:reeee',
		'immersiveengineering:birthdayparty',
	]);
	var pcol = '';
	var pteam = '';
	var tcol = '';
	var teff = '';
	var colls = Object.keys(_RAWCOLORS);
	var effs = Object.keys(_RAWEFFECTS);
	if(t != null) {
		var ct = new Team(t.getName()).init(data);
		if(ct.data.chatcolor != null) {
			if(colls.indexOf(ct.data.chatcolor) > -1) {
				tcol = '&'+getColorId(ct.data.chatcolor);
			}
		}
		if(ct.data.chateffect != null) {
			if(effs.indexOf(ct.data.chateffect) > -1) {
				teff = '&'+getColorId(ct.data.chateffect);
			}
		}
		if(t.getColor() != null) {
			pcol = '&'+getColorId(t.getColor());
		}
		pteam = pcol+"&o"+t.getDisplayName()+" &r"+pcol;
	}

	//Override player specific
	if(plo.data.chatcolor != null) {
		tcol = '&'+getColorId(plo.data.chatcolor);
	}
	//var timestr = '';
	//var now = new Date();
	//timestr = '&l[&r'+pcol+now.getHours().toString().append('0', 2)+':'+now.getMinutes().toString().append('0', 2)+'&l]&r';

	//var newmsg = pcol+timestr+pcol+'&l[&r'+pteam+pname+'&r'+pcol+'&l] -> &r'+tcol+teff;
	var newmsg = pcol+'&l[&r'+pteam+pname+'&r'+pcol+'&l] -> &r'+tcol+teff;
	if(!fullraw) {
		newmsg = ccs(newmsg, allowed);
	}
	newmsg += message.rangeUpper(0, 1); //Concat message contents

	var plr = w.getAllPlayers();
	var mrx = /@(\w+)/g;
	var mplr = newmsg.match(mrx) || [];

	for(k in mplr) {
		var mtc = mplr[k].replace(mrx, '$1');
		var pmtc = null;
		for(p in plr) {
			if(occurrences(plr[p].getName().toLowerCase(), mtc.toLowerCase()) > 0) {
				pmtc = plr[p].getName();
				break;
			}
		}
		if(pmtc != null) {
			executeCommand(player, "/playsound "+notifySound+" hostile "+pmtc, pmtc);
			newmsg = ccs(newmsg.replace('@'+mtc, '&9&o&l@'+pmtc+'&r'));
		}
	}

	var trx = /\$(\w+)/g;
	var tlr = newmsg.match(trx) || [];
	var apl = (function(w){
		var pnames = [];
		var ps = w.getAllPlayers();
		for(psi in ps) {
var iplayr = ps[psi];
			pnames.push(iplayr.getName());
		}

		return pnames;
	})(w);
	for(t in tlr) {
		var tc = tlr[t].replace(trx, '$1');
		for(tt in ts) {
var sbt = ts[tt];
			if(occurrences(sbt.getDisplayName().toLowerCase(), tc.toLowerCase()) > 0) {
				//Team select
				var spl = sbt.getPlayers();
				var scol = sbt.getColor();
				var sscol = '&f';
				var stn = sbt.getDisplayName();
				if(scol != null) {
					sscol = "&"+getColorId(scol);
				}

				for(sp in spl) {
var splayr = spl[sp];
					if(apl.indexOf(splayr) > -1) {
						executeCommand(player, '/playsound '+notifySound+' hostile '+splayr, splayr);
					}
				}
				newmsg = ccs(newmsg.replace('$'+tc, sscol+'&l'+"$"+stn+'&r'));
			}
		}
	}

	return newmsg;
}



//Converts int to string
function getAmountCoin(amount) {
	var rstr = '';
	var ams = sign(amount);
	if(ams == -1) { rstr = '-'; }
	amount = Math.abs(amount);
	var ckeys = Object.keys(_COINTABLE);
	for(var i = ckeys.length-1; i >= 0; i--) {

		var add = 0;
		while(amount >= _COINTABLE[ckeys[i]]) {
			add++;
			amount -= _COINTABLE[ckeys[i]];
		}
		if(add > 0) {
			rstr += add.toString()+ckeys[i].toUpperCase();
		}
	}

	if(rstr == '') { rstr = '0G'; }
	return rstr;
}
//converts string to int
function getCoinAmount(str) {
	var arx = /([\d]+)([a-zA-Z]+)/g;
	var amounts = str.match(arx) || [];
	var amount = 0;
	var sgn = 1;
	if(str.substr(0, 1) == '-') { sgn = -1; }

	for(a in amounts) {
var _am = amounts[a];
		var _amnum = parseInt(_am.replace(arx, '$1'));
		var _amunit = _am.replace(arx, '$2').toLowerCase();
		var coinkeys = Object.keys(_COINTABLE);
		if(coinkeys.indexOf(_amunit) > -1) {
			amount += _amnum*_COINTABLE[_amunit];
		}
	}
	return amount*sgn;
}

var REGISTRY = Java.type('net.minecraftforge.fml.common.registry.ForgeRegistries');

var ReskillableRegistry = Java.type('codersafterdark.reskillable.api.ReskillableRegistries');























function queryDataHandlers(qry) {

}

function DataHandler(type, name) {
	this.type = type;
	this.name = name;
	this.data = this.data || {};
	this.removeFns = this.removeFns || [];
	this.loadFns = this.loadFns || [];
	this.saveFns = this.saveFns || [];
	this.createFns = this.createFns || [];

	this.dkeyrgx = new RegExp(this.type+'_([\\w.\-]+)', 'g');

	//Gets all data IDS
	this.getAllDataIds = function(data) {
		var dkeys = data.getKeys();
		var ids = [];
		for(d in dkeys) {
var dkey = dkeys[d];
			if(dkey.cmatch(this.dkeyrgx) > 0) {
				ids.push(dkey.replace(this.dkeyrgx, '$1'));
			}
		}

		return ids;
	};
	this.getDataId = function() {
		return this.type+'_'+this.name;
	}
	this.exists = function(data) {
		return data.get(this.getDataId()) != null;
	};
	this.save = function(data) {
		if(!this.exists(data)) {//Run onCreate
			for(i in this.createFns) {
var createFn = this.createFns[i];
				if(typeof(createFn) == 'function') {
					createFn(this, data);
				}
			}
		}
		//Run onSave
		for(i in this.saveFns) {
var saveFn = this.saveFns[i];
			if(typeof(saveFn) == 'function') {
				saveFn(this, data);
			}
		}
		data.put(this.getDataId(), this.toJson());
		return this;
	};
	this.load = function(data) {
		if(this.exists(data)) {
			for(i in this.loadFns) {
var loadFn = this.loadFns[i];
				if(typeof(loadFn) == 'function') { loadFn(this, data); }
			}
			var ndata = data.get(this.getDataId());
			this.data = objMerge(this.data, JSON.parse(ndata));
			return true;
		}
		return false;
	};
	this.remove = function(data) {
		for(rf in this.removeFns) {
var removeFn = this.removeFns[rf];
			if(typeof(removeFn) == 'function') {
				removeFn(this, data);
			}
		}
		data.remove(this.getDataId());
		return this;
	};
	this.onRemove = function(fn, args) { //When removed
		this.removeFns.push(fn, args||{});
		return this;
	};
	this.onLoad = function(fn, args) { //When gets loaded
		this.loadFns.push(fn, args||{});
		return this;
	};
	this.onSave = function(fn, args) { //Everytime when gets saved
		this.saveFns.push(fn, args||{});
		return this;
	};
	this.onCreate = function(fn, args) { //When gets saved but did not exists before (newly created)
		this.createFns.push(fn, args||{});
		return this;
	};
	this.init = function(data, createIfNotExists) {
		if(typeof(createIfNotExists) == typeof(undefined)) { createIfNotExists = true; }
		if(!this.exists(data) && createIfNotExists) {
			this.save(data);
		}
		this.load(data);

		return this;
	};
	this.toJson = function() {
		return JSON.stringify(this.data);
	};
}

function registerDataHandler(alias, dataHandlerFn) {
	_DATAHANDLERS[alias] = dataHandlerFn;
}

function getDataHandler(alias) {
	return _DATAHANDLERS[alias];
}

function registerXCommand(commandMatch, callback, perm, rules, payload) {
	if(typeof(rules) == typeof(undefined)) { rules = []; }
	if(typeof(payload) == typeof(undefined)) { payload = {}; }
	_COMMANDS.push({
		usage: commandMatch,
		callback: callback,
		perm: perm,
		rules: rules,
		enabled: true,
		payload: payload,
	});
}

function getCommandNoArg(cmdstr) {
	return cmdstr.match(/![\w\s]+/)[0];
}

function matchXCommands(cmdstrs) {
	if(typeof(cmdstrs) == typeof(undefined)) { cmdstrs = []; }
	if(typeof(cmdstrs) == 'string') { cmdstrs = [cmdstrs]; }
	var cmds = [];

	for(c in _COMMANDS) {
var command = _COMMANDS[c];
		for(ci in cmdstrs) {
var cmdstr = cmdstrs[ci];
			var cname = getCommandNoArg(command.usage).trim();
			if(cmdstr.substr(0, 1) == "^") {
				if((cmdstrs.length == 0 || occurrences(cname, cmdstr.substr(1, cmdstr.length)) == 0) && cmds.indexOf(command) == -1) {
					cmds.push(command);
					break;
				}
			} else {
				if((cmdstrs.length == 0 || occurrences(cname, cmdstr) > 0) && cmds.indexOf(command) == -1) {
					cmds.push(command);
					break;
				}
			}
		}
	}

	return cmds;
}

function getCommandName(cmdstr) {
	var cmda = getCommandNoArg(cmdstr).trim();//Remove whitespace around
	return cmda.substr(1, cmda.length);//Remove '!'-character
}

function registerXCommands(cmds) {
	for(c in cmds) {
		registerXCommand(cmds[c][0], cmds[c][1], cmds[c][2], cmds[c][3] || [], cmds[c][4] || {});
	}
}

function CommandFactory(datahandler, cmdtree){
	this.type = datahandler;
	this.cmdtree = cmdtree||datahandler;
	this.settables = [

	];

	this.addSettable = function(key, rules, dataKey){
		this.settables.push([key, rules||[], dataKey||key ]);
	}

	this.generate = function(){
		var cmds = [
			['!'+this.cmdtree+' create <name>', function(pl, args, data, cmddata){
				var dht = getDataHandler(cmddata.datatype);
				var dh = new dht(args.name);
				dh.save(data);
				tellPlayer(pl, "&aCreated "+dh.type+" '"+dh.name+"'!");
				return true;
			}, this.type+'.create', [
				{
					"argname": "name",
					"type": "datahandler",
					"datatype": this.type,
					"exists": false,
				}
			], {
				"datatype": this.type
			}],
			['!'+this.cmdtree+' remove <name>', function(pl, args, data, cmddata){
				var dht = getDataHandler(cmddata.datatype);
				var dh = new dht(args.name);
				dh.remove(data);
				tellPlayer(pl, "&aRemoved "+dh.type+" '"+dh.name+"'!");
				return true;
			}, this.type+'.remove', [
				{
					"argname": "name",
					"type": "datahandler",
					"datatype": this.type,
					"exists": true,
				}
			], {
				"datatype": this.type
			}],
			['!'+this.cmdtree+' list [...matches]', function(pl, args, data, cmddata){
				var dht = getDataHandler(cmddata.datatype);
				var dh = new dht(args.name);
				var dhids = dh.getAllDataIds(data);
				tellPlayer(pl, "&l[=======] &6&l Gramados "+cmddata.datatype.rangeUpper(0, 1)+"s List&r &l[=======]");

				for(i in dhids) {
var dhid = dhids[i];
					var dhi = new dht(dhid).init(data);

				}
				return true;
			}, this.type+'.list', [], {
				"datatype": this.type
			}],

		];


		return cmds;
	}
}


function parseUsageRgx(command, str) {
	if(typeof(str) == typeof(undefined)) { str = null; }//Converts command usage to Regex, and gathers info about command
	//!perms\s+manage\s+add((?:\s+[\w]+))((?:\s+[\w]+)*)
	//+ == <...vars> //multiple args, minimal one required
	//* == [...vars] //multiple args, optional
	//  == <var> //arg, required
	//? == [var] // arg, optional

	var argrx = [];
	var cmdMatch = command.usage
	.replace(/(\w)\s+(\w)/g, "$1\\s+$2")
	.replace(/(\w|>|\])\s+(\w|<|\[)/g, "$1$2");//fix whitespace
	var req_regx = /<([.]{3})*([\w]+)>/g;//Required arg regex
	var opt_regx = /\[([.]{3})*([\w]+)\]/g;//Optional arg recalc
	var rm = cmdMatch.allMatch(req_regx);
	for(i in rm) {//required args
		var rmcode = rm[i][0];
		var rmmulti = (rm[i][1] != null);
		var rmname = rm[i][2];
		var rmpart = "((?:\\s+\\S+)"+(rmmulti?"+":"")+")";
		if(str != null) {
			argrx.push([
				command.usage.indexOf(rmcode),
				rmname,
				rmmulti
			]);
		}
		cmdMatch = cmdMatch.replace(rmcode, rmpart);
	}
	var om = cmdMatch.allMatch(opt_regx);
	for(i in om) {//optional args
		var omcode = om[i][0];
		var ommulti = (om[i][1] != null);
		var omname = om[i][2];
		var ompart = "((?:\\s+\\S+)"+(ommulti?"*":"?")+")";
		if(str != null) {
			argrx.push([
				command.usage.indexOf(omcode),
				omname,
				ommulti
			]);
		}
		cmdMatch = cmdMatch.replace(omcode, ompart);
	}

	var capt_names = [];
	var cids = [];

	while(argrx.length > 0) {
		var hid = 0;
		for(var i in argrx)  {
			if(argrx[i][0] > hid) {
				hid = argrx[i][0];
			}
		}
		for(var i in argrx)  {
			if(argrx[i][0] == hid) {
				capt_names.push([argrx[i][1], argrx[i][2]]);
				argrx.splice(i, 1);
				break;
			}
		}
	}
	capt_names.reverse();
	return [cmdMatch, capt_names];
}

function executeXCommand(str, player) {
	var data = player.world.getStoreddata();
	var sb = player.world.getScoreboard();
	for(c in _COMMANDS) {
var cmd = _COMMANDS[c];
		var cmdm = parseUsageRgx(cmd, str);

		var argrgx = cmdm[0];
		var rgx = new RegExp(argrgx, 'g');
		if( (str.match(rgx) || []).length == 1) {
			if(str.indexOf(str.match(rgx)[0]) == 0 && str.replace(rgx, '') == '') {
				var argnames = cmdm[1];
				var cg = 1;
				var args = {};
				for(a in argnames) {
					var argname = argnames[a][0];
					var ismulti = argnames[a][1];
					if(typeof(args[argname]) == typeof(undefined)) {
						args[argname] = (ismulti ? [] : null)
					}
					var argval = str.replace(rgx, '$'+cg.toString());
					if(ismulti) {
						args[argname] = argval.split(' ');
						args[argname] = args[argname].filter(function(el){
							return el.toString().length > 0;
						});
					} else {
						args[argname] = (argval.trim() == "" ? null : argval.trim());
					}


					cg++;
				}

				var cmdperm = new Permission(cmd.perm);
				if(!cmdperm.exists(data)) {
					cmdperm.save(data);
				}
				cmdperm.load(data);
				if(cmdperm.permits(player.getName(), sb, data)) {
					//Check arguments
					for(a in args) {
var arg = args[a];
						for(b in cmd.rules) {
var rule = cmd.rules[b];

							if(!"argname" in rule) { continue; }
							var errpref = '';
							var errsuff = '';
							if("msgprefix" in rule) { errpref = rule.msgprefix }
							if("msgsuffix" in rule) { errsuff = rule.msgsuffix }

							if("as" in rule) {
								if(rule.as == "string" && typeof arg == 'object') {
									arg = arg.join(" ");
								}
							}

							if(rule.argname != a) { continue; }
							var rulename = rule.name||rule.argname.toString();
							if('type' in rule) {//Check Arg Type
								switch(rule.type) {
									case 'id': {
										if(arg.replace(/([A-Za-z0-9_\-\.])/g, '') != '') {
											tellPlayer(player, errpref+_MSG["argNotValid"].fill({
												"argName": rulename,
												"allowed": "A-Za-z0-9_-:D"
											})+errsuff);
											return false;
										}
										//Run case 'string'
									}
									case 'string': {
										if('minlen' in rule) {
											if(arg.toString().length < rule.minlen) {
												tellPlayer(player, errpref+"&c'"+rulename+"' is too short! (Min. "+rule.minlen+" characters)"+errsuff);
												return false;
											}
										}
										if('maxlen' in rule) {
											if(arg.toString().length < rule.maxlen) {
												tellPlayer(player, errpref+"&c'"+rulename+"' is too long! (Min. "+rule.minlen+" characters)"+errsuff);
												return false;
											}
										}
										if("noColor" in rule) {
											if(rule.noColor) {
												if(escCcs(arg.toString()) != arg.toString()) {
													tellPlayer(player, errpref+"&c'"+rulename+"' cannot contain color coding!"+errsuff);
													return false;
												}
											}
										}
										break;
									}
									case 'enum': {
										if("values" in rule) {
											if(rule.values.indexOf(arg) == -1) {
												tellPlayer(player, "&c'"+rulename+"' must be one of the following: "+rule.values.join(", "));
												return false;
											}
										}
										break;
									}
									case 'currency':
									case 'time':
									case 'number': {
										var num = NaN;
										if(rule.type == 'number') {
											num = parseFloat(arg);
										} else if(rule.type == 'currency') {
											num = getCoinAmount(arg);
										} else {
											num = getStringTime(arg);
										}

										if(isNaN(num)) {
											tellPlayer(player, errpref+"&c'"+rulename+"' is not a number!"+errsuff);
											return false;
										}
										if('max' in rule) {
											if(num > rule.max) {
												tellPlayer(player, errpref+"&c'"+rulename+"' cannot be greater than "+rule.max.toString()+errsuff);
												return false;
											}
										}
										if('min' in rule) {
											if(num < rule.min) {
												tellPlayer(player, errpref+"&c'"+rulename+"' cannot be less than "+rule.min.toString()+errsuff);
												return false;
											}
										}
									}
									case 'datahandler': {
										if('datatype' in rule) {
											var dh = new DataHandler(rule.datatype, arg);
											if('exists' in rule) {
												var exists = dh.exists(data);
												if(rule.exists && !exists) {
													//Hasto exists but does not
													tellPlayer(player, errpref+"&c"+dh.type.rangeUpper(0,1)+" '"+dh.name+"' does not exist!"+errsuff);
													return false;
												}
												if(!rule.exists && exists) {
													//Has not to exists but does
													tellPlayer(player, errpref+"&c"+dh.type.rangeUpper(0,1)+" '"+dh.name+"' already exists!"+errsuff);
													return false;
												}
											}
										}
										break;
									}
									case 'color': {
										if(objArray(_RAWCOLORS).indexOf(arg) == -1) {
											tellPlayer(player, errpref+"&cColor must be one of the following: "+objArray(_RAWCOLORS).join(', ')+'!'+errsuff);
											return false;
										}
										break;
									}
									case 'coloreffect': {
										if(objArray(_RAWEFFECTS).indexOf(arg) == -1) {
											tellPlayer(player, errpref+"&cChat effects must be one of the following: \n"+objArray(_RAWEFFECTS).join("\n")+errsuff);
											return false;
										}
										break;
									}
									case 'attribute': {
										if(_ITEMATTR.indexOf(arg) == -1) {
											tellPlayer(player, errpref+"&cItem attributes must be one of these: \n"+_ITEMATTR.join("\n")+errsuff);
											return false;
										}
										break;
									}
									case 'bool': {
										if(['true', 'false'].indexOf(arg) == -1) {
											tellPlayer(player, errpref+"&c"+rulename.rangeUpper(0,1)+" must be true or false!"+errsuff);
											return false;
										}
										break;
									}
								}

							}

						}
					}

					return (cmd.callback(player, args, data, cmd.payload) || false);
				} else {
					tellPlayer(player, "&cYou don't have permission to this command!");
					return false;
				}
			}
		}
	}
	//No valid command given
	var usg = [];
	var aa = str.split(" ");
	while(aa.length > 0) {
		var saa = aa.join(" ");
		if(usg.length == 0) {
			for(c in _COMMANDS) {
var cmd = _COMMANDS[c];
				if(occurrences(cmd.usage, saa) > 0) {
					var lcp = new Permission(cmd.perm);
					lcp.load(data);
					if(lcp.permits(player.getName(), sb, data)) {
						usg.push(cmd.usage);
					}
				}
			}
		}
		aa.splice(-1,1);
	}

	if(usg.length > 0) {
		tellPlayer(player, "&eDid you mean:");
		for(u in usg) {
			tellPlayer(player, "&e - &c"+usg[u]+"{suggest_command:"+getCommandNoArg(usg[u])+"}");
		}
	} else {
		tellPlayer(player, "&cCould not find this command!");
	}
	return false;

}



//Register commands

    //REGISTER AUTOMSG COMMANDS
    registerXCommands([
        //['', function(pl, args, data){}, '', []],
        ['!automsg list [...matches]', function(pl, args, data){
            tellPlayer(pl, getTitleBar("AutoMsg List"));
            var aus = new AutoMsg().getAllDataIds(data);
            for(a in aus) {
var auid = aus[a];
                var au = new AutoMsg(auid).init(data);
                var hoverInfo = "$e$lMode: $r"+au.data.mode+"\n$e$lInterval: $r"+getTimeString(au.data.interval);
                tellPlayer(pl, "&e - &b&l"+au.name+"{*|show_text:"+hoverInfo+"}&r [&6:sun: Info{run_command:!automsg info "+au.name+"}&r] [&c:cross: Remove{run_command:!automsg remove "+au.name+"}&r]");
            }
        }, 'automsg.list', []],
        ['!automsg create <name>', function(pl, args, data){
            var au = new AutoMsg(args.name);
            tellPlayer(pl, "&aCreated AutoMessage '"+au.name+"'!&r [&5&lUndo{run_command:!automsg remove "+au.name+"}&r]");
            au.save(data);
        }, 'automsg.create', [
            {
                "argname": "name",
                "type": "id",
                "minlen": 4
            },
            {
                "argname": "name",
                "type": "datahandler",
                "datatype": "automsg",
                "exists": false,
            },
        ]],
        ['!automsg remove <name>', function(pl, args, data){
            var au = new AutoMsg(args.name).init(data);

            var undo_cmds = [
                '!automsg create '+au.name,
                '!automsg setMessage '+au.name+' '+au.data.msg,
                '!automsg setEnabled '+au.name+' '+au.data.enabled.toString(),
                '!automsg setInterval '+au.name+' '+getTimeString(au.data.interval),
                '!automsg setMode '+au.name+' '+au.data.mode,

            ];

            tellPlayer(pl, "&aRemoved AutoMsg '"+au.name+"'!&r [&5&lUndo{run_command:!chain ;"+undo_cmds.join(";")+"}&r]");
            au.remove(data);
            return true;
        }, 'automsg.remove', [
            {
                "argname": "name",
                "type": "datahandler",
                "datatype": "automsg",
                "exists": true,
            }
        ]],
        ['!automsg setMessage <name> [...message]', function(pl, args, data){
            var au = new AutoMsg(args.name).init(data);
            var oldmsg = au.data.msg;
            au.data.msg = args.message.join(" ");
            au.save(data);
            tellPlayer(pl, "&aChanged message of AutoMessage '"+au.name+"'!&r [&5&lUndo{run_command:!automsg setMessage "+au.name+" "+oldmsg+"}&r]");
        }, 'automsg.setMessage', [
            {
                "argname": "name",
                "type": "datahandler",
                "datatype": "automsg",
                "exists": true,
            },
        ]],
        ['!automsg setMode <name> <mode>', function(pl, args, data){
            var au = new AutoMsg(args.name).init(data);
            var oldmode = au.data.mode;
            au.data.mode = args.mode;
            au.save(data);
            tellPlayer(pl, "&aChanged mode of AutoMessage '"+au.name+"' to '"+args.mode+"'!&r [&5&lUndo{run_command:!automsg setMode "+au.name+" "+oldmode+"}&r]");
        }, 'automsg.setMode', [
            {
                "argname": "name",
                "type": "datahandler",
                "datatype": "automsg",
                "exists": true,
            },
            {
                "argname": "mode",
                "type": "enum",
                "values": ["interval", "login"],
            },
        ]],
        ['!automsg setInterval <name> <time>', function(pl, args, data){
            var au = new AutoMsg(args.name).init(data);
            var oldint = getTimeString(au.data.interval);
            au.data.interval = getStringTime(args.time);
            var newint = getTimeString(au.data.interval);
            au.save(data);
            tellPlayer(pl, "&aChanged interval of AutoMessage '"+au.name+"' to '"+newint+"'!&r [&5&lUndo{run_command:!automsg setInterval "+au.name+" "+oldint+"}&r]");
        }, 'automsg.setInterval', [
            {
                "argname": "name",
                "type": "datahandler",
                "datatype": "automsg",
                "exists": true,
            },
            {
                "argname": "time",
                "type": "time",
                "min": getStringTime("10s"),
            },
        ]],
        ['!automsg setEnabled <name> <enabled>', function(pl, args, data){
            var au = new AutoMsg(args.name).init(data);
            au.data.enabled = (args.enabled == "true");
            au.save(data);
            tellPlayer(pl, "&a"+(au.data.enabled ? "Enabled":"Disabled")+" AutoMsg '"+au.name+"'!&r [&5&lUndo{run_command:!automsg setEnabled "+au.name+" "+au.data.enabled.toString()+"}&r]");
        }, 'automsg.setEnabled', [
            {
                "argname": "name",
                "type": "datahandler",
                "datatype": "automsg",
                "exists": true,
            },
            {
                "argname": "enabled",
                "type": "bool",
            },
        ]],

    ]);

	//REGISTER CHAT CHANNEL COMMANDS

	registerXCommands([
		//['', function(pl, args){}, ''],
		['!chat create <name>', function(pl, args){
			var data = pl.world.getStoreddata();
			var cc = new ChatChannel(args.name);

			var ccp = cc.getPermission(data);
			ccp.data.enabled = false;
			ccp.save(data);
			cc.save(data);
			tellPlayer(pl, "&aCreated chat channel '"+cc.name+"'!");

			return false;
		}, 'chat.create', [
			{
				"argname": "name",
				"type": "id",
				"minlen": 3
			},
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": false,
			}
		]],
		['!chat remove <name>', function(pl, args, data){
			var cc = new ChatChannel(args.name);
			cc.remove(data);
			tellPlayer(pl, "&aRemoved chat channel '"+cc.name+"'!");

			return false;
		}, 'chat.remove', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			}
		]],
		['!chat list [...matches]', function(pl, args, data){
			var cids = new ChatChannel().getAllDataIds(data);
			tellPlayer(pl, "&l[=======] &6&lGramados Chat Channels&r &l[=======]");
			for(ci in cids) {
var cid = cids[ci];
				var cc = new ChatChannel(cid);
				if(args.matches.length == 0 || arrayOccurs(cid, args.matches) > 0) {
					if(cc.load(data) && cc.getPermission(data).permits(pl.getName(), pl.world.getScoreboard(), data)) {
						var onlinePlayers = [];
						var offPlayers = []
						for(cpli in cc.data.players) {
var cpl = cc.data.players[cpli];
							if(playerIsOnline(pl.world, cpl)) {
								onlinePlayers.push(cpl);
							} else {
								offPlayers.push(cpl);
							}
						}
						var onlineText = "$eOnline Players:$r\n"+
							onlinePlayers.join("\n")+
							"\n$eOffline Players:$r\n"+
							offPlayers.join("\n");
						var ontxt = "&r&e"+onlinePlayers.length+"/"+cc.data.players.length+" Online{*|show_text:"+onlineText+"}&r";
						var opttxt = (cc.data.players.indexOf(pl.getName()) > -1 ? "&c&nLeave{run_command:!chat leave "+cc.name+"}&r":"&a&nJoin{run_command:!chat join "+cc.name+"}&r");
						tellPlayer(pl, cc.getTag()+"&r ("+cc.name+") "+opttxt+" "+ontxt);
					}
				}
			}
			return false;
		}, 'chat.list'],
		['!chat setColor <name> <color>', function(pl, args, data){
			var cc = new ChatChannel(args.name);
			cc.load(data);
			cc.data.color = args.color.toLowerCase();
			cc.save(data);
			tellPlayer(pl, '&aSet color of chatchannel '+cc.getName()+'&a to '+cc.data.color+'!');
			return true;
		}, 'chat.setColor', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			},
			{
				"argname": "color",
				"type": "color",
			}
		]],
		['!chat setDisplayName <name> [...displayName]', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);

			cc.data.displayName = (args.displayName.length > 0 ? args.displayName.join(' ') : cc.name);
			cc.save(data);
			tellPlayer(pl, '&aSet display name to: '+cc.getName());
			return true;
		}, 'chat.setDisplayName', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			},
			{
				"argname": "displayName",
				"type": "string",
				"noColor": true
			}
		]],
		['!chat setDesc <name> [...desc]', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);
			cc.data.desc = args.desc.join(' ');
			cc.save(data);
			tellPlayer(pl, '&aSet description of '+cc.getName()+'&r&a to: '+cc.data.desc);
			return true;
		}, 'chat.setDisplayName', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			},
		]],
		['!chat join <name>', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);
			var plo = new Player(pl.getName()).init(data);
			if(cc.getPermission().init(data).permits(pl.getName(), pl.world.getScoreboard(), data)) {
				if(cc.data.players.indexOf(pl.getName()) == -1) {
					cc.data.players.push(pl.getName());
					plo.data.talkchat = cc.name;
					plo.save(data);
					cc.save(data);
					cc.broadcast(pl.world, plo.getNameTag(pl.world.getScoreboard())+"&r &ehas joined "+cc.getName(), [pl.getName()]);
					tellPlayer(pl, "&eJoined chat-channel "+cc.getTag()+(cc.data.desc != '' ? "&r\n&e"+cc.data.desc:""));
					return true;
				} else {
					tellPlayer(pl, "&cYou are already in this chat!");
				}


			} else {
				tellPlayer(pl, "&cYou are not allowed to join this channel!");
			}
			return false;
		}, 'chat.join', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			}
		]],
		['!chat leave <name>', function(pl, args, data){
			var cc = new ChatChannel(args.name).init(data);
			var plo = new Player(pl.getName()).init(data);

			if(cc.data.players.indexOf(pl.getName()) > -1) {
				cc.data.players = removeFromArray(cc.data.players, pl.getName());
				cc.save(data);
				tellPlayer(pl, "&eLeaved channel "+cc.getName());
				cc.broadcast(pl.world, plo.getNameTag(pl.world.getScoreboard())+"&r &ehas left "+cc.getName(), [pl.getName()]);
				return true;
			} else {
				tellPlayer(pl, "&cYou can't leave a channel that you're not in!");
			}
			return false;
		}, 'chat.leave', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "chatchannel",
				"exists": true
			}
		]],
	]);

  registerXCommands([
    //['', function(pl, args, data){}, '', []],
    ['!emote list [...matches]', function(pl, args, data){
        var emids = new Emote().getAllDataIds(data);
        tellPlayer(pl, getTitleBar('Emote List'));
        
    }, 'emote.list', []],
    ['!emote info <name>', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      tellPlayer(pl, getTitleBar('Emote Info'));
      tellPlayer(pl, "&eEmote Name: &r"+em.name);
      tellPlayer(pl, "&eEmote: &r:"+em.name+":");
      tellPlayer(pl, "&ePermission ID: &9&l"+em.getPermission().name+"&r [&6:sun: Info{run_command:!perms info "+em.getPermission().name+"}&r]");
      tellPlayer(pl, "&eIs Default: &c"+(em.data.default ? "&a:check: Yes" : "&c:cross: No"));
      tellPlayer(pl, "&ePrice: &c"+getAmountCoin(em.data.price));
      tellPlayer(pl, "&eFor Sale: "+(em.data.forSale ? "&a:check: Yes" : "&c:cross: No"));
      tellPlayer(pl, "&eHidden: "+(em.data.hidden ? "&c:check: Yes" : "&a:cross: No"));
    }, 'emote.info', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      }
    ]],
    ['!emote take <emote> <player>', function(pl, args, data){
      var p = new Player(args.player).init(data);
      p.data.emotes = removeFromArray(p.data.emotes, args.emote);
      p.save(data);
      tellPlayer(pl, "&aTook emote '"+args.emote+"' from player '"+p.name+"'!");
      return true;
    }, 'emote.take', [
      {
        "argname": "player",
        "type": "datahandler",
        "datatype": "player",
        "exists": true,
      },
      {
        "argname": "emote",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
    ]],
    ['!emote give <emote> <player>', function(pl, args, data){
      var p = new Player(args.player).init(data);
      if(p.data.emotes.indexOf(args.emote) == -1) {
        p.data.emotes.push(args.emote);
      }
      p.save(data);
      tellPlayer(pl, "&aGave emote '"+args.emote+"' to player '"+p.name+"'!");
      return true;
    }, 'emote.give', [
      {
        "argname": "player",
        "type": "datahandler",
        "datatype": "player",
        "exists": true,
      },
      {
        "argname": "emote",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
    ]],
    ['!emote setForSale <name> <forSale>', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      em.data.forSale = (args.forSale == 'true');
      em.save(data);
      tellPlayer(pl, "&a"+(em.data.forSale ? "Put" : "Pulled")+" emote '"+em.name+"' "+(em.data.forSale ? "on" : "off")+"-sale!");
  }, 'emote.setForSale', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
      {
        "argname": "forSale",
        "type": "bool",
      },
    ]],
    ['!emote setHidden <name> <hidden>', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      em.data.hidden = (args.hidden == 'true');
      em.save(data);
      tellPlayer(pl, "&a"+(em.data.hidden ? "Hided":"Showing")+" emote '"+em.name+"'");
  }, 'emote.setHidden', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
      {
        "argname": "hidden",
        "type": "bool",
      },
    ]],
    ['!emote setDefault <name> <default>', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      em.data.default = (args.default == 'true');
      em.save(data);
      tellPlayer(pl, "&a"+(em.data.default ? "Put" : "Pulled")+" emote '"+em.name+"' "+(em.data.default ? "into" : "from")+" default emotes!");
  }, 'emote.setDefault', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
      {
        "argname": "default",
        "type": "bool",
      },
    ]],
    ['!emote setDesc <name> [...desc]', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      em.data.desc = args.desc.join(" ");
      em.save(data);
      tellPlayer(pl, "&aChanged description of emote '"+em.name+"'!");
    }, 'emote.setDesc', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
    ]],
    ['!emote setPrice <name> <price>', function(pl, args, data){
      var em = new Emote(args.name).init(data);
      em.data.price = getCoinAmount(args.price);
      em.save(data);
      tellPlayer(pl, "&aSet price of emote '"+em.name+"' to "+getAmountCoin(em.data.price));

      return true;
    }, 'emote.setPrice', [
      {
        "argname": "name",
        "type": "datahandler",
        "datatype": "emote",
        "exists": true,
      },
      {
        "argname": "price",
        "type": "currency",
        "min": 0,
      },
    ]],
  ]);

    //REGISTER ENTITY COMMANDS
    registerXCommands([
        //['', function(pl, args, data){}, '', []],
        ['!entity rename [...name]', function(pl, args, data){}, 'entity.rename', []],
    ]);

  registerXCommands([
    ['!giftcode list [...matches]', function(pl, args, data){
        tellPlayer(pl, getTitleBar("GiftCodes List"));
        var codes = new GiftCode().getAllDataIds(data);
        for(n in codes) {
var codeId = codes[n];
            var code = new GiftCode(codeId).init(data);
            var hoverInfo = "$e$lCode: $r"+code.data.code+"\n$e$lUses left: $r"+code.getUsesLeft();
            tellPlayer(pl, "&e - &b&l"+code.name+"{*|show_text:"+hoverInfo+"}&r [&6:sun: Info{run_command:!giftcode info "+code.name+"}&r] [&c:cross: Remove{run_command:!giftcode remove "+code.name+"}&r]");
        }
    }, 'giftcode.list', []],
	['!giftcode info <name>', function(pl, args, data){
		var code = new GiftCode(args.name).init(data);
        tellPlayer(pl, getTitleBar('GiftCode Info'));
        tellPlayer(pl, "&eGiftCode Name: &r"+code.name);
        tellPlayer(pl, "&eCode: &r"+code.data.code);
        tellPlayer(pl, "&ePermission ID: &9&l"+code.getPermission().name+"&r [&6:sun: Info{run_command:!perms info "+code.getPermission().name+"}&r]");
        tellPlayer(pl, "&eUses left: &c"+code.getUsesLeft());
        tellPlayer(pl, "<== &6&lRewards &r==>");
		if(code.data.money > 0)
			tellPlayer(pl, "&eMoney: &c"+getAmountCoin(code.data.money));
		if(code.data.items.length > 0){
			tellPlayer(pl, "&eItems:");
			for(i in code.data.items) {
var itemData = code.data.items[i];
				var item = nbtItem(itemData, pl.world);
				tellPlayer(pl, "&e-&3 [" + (parseInt(i)+1) + "] " + item.getDisplayName() + " &2x"+item.getStackSize() + " &r[&c:cross: Remove{run_command:!giftcode removeItem " + code.name + " " +(parseInt(i)+1)+"}&r]");
			}
		}
		if(code.data.emotes.length > 0){
			tellPlayer(pl, "&eEmotes:");
			for(i in code.data.emotes) {
var emoteData = code.data.emotes[i];
				var emote = new Emote(emoteData).init(data);
				tellPlayer(pl, "&e-&3 [" + (parseInt(i)+1) + "] " + emote.name + " &r:" + emote.name + ": [&c:cross: Remove{run_command:!giftcode removeEmote " + code.name + " " +(parseInt(i)+1)+"}&r]");
			}
		}


    }, 'giftcode.info', [
		{
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true
        }
	]],
    ['!giftcode create <name> [code]', function(pl, args, data){
        var giftcode = new GiftCode(args.name);
        if(args.code) {
            giftcode.data.code = args.code;
        } else {
            giftcode.generateCode();
        }
		giftcode.data.uses = -1;
        tellPlayer(pl, "&aGiftcode '"+args.name+"&a' added with code '"+giftcode.data.code+"'!");
        giftcode.save(data);
    }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "id",
            "minlen": 3
        },
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": false,
        }
    ]],
    ['!giftcode setCode <name> [code]', function(pl, args, data){
        var giftcode = new GiftCode(args.name);
        giftcode.load(data);
        if(args.code != "") {
            giftcode.data.code = args.code;
        } else {
            giftcode.generateCode();
        }
        giftcode.save(data);
        tellPlayer(pl, "&aSet the code for GiftCode '"+args.name+"&a' to "+giftcode.data.code+"!");
    }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        },
        {
            "argname": "code",
            "type": "id",
            "minlen": 3
        }
    ]],
    ['!giftcode setMaxUses <name> <uses>', function(pl, args, data){
        var giftcode = new GiftCode(args.name);
        giftcode.load(data);
        giftcode.data.uses = args.uses;
        giftcode.save(data);
        tellPlayer(pl, "&aSet max uses for GiftCode '"+args.name+"&a' to "+giftcode.getUsesLeft()+"!");
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        },
        {
            "argname": "uses",
            "type": "number"
        }
    ]],
    ['!giftcode addItem <name>', function(pl, args, data){
		var hand = pl.getMainhandItem();
		if(!hand.isEmpty()) {
			var giftcode = new GiftCode(args.name);
	        giftcode.load(data);
			giftcode.data.items.push(hand.getItemNbt().toJsonString());
			giftcode.save(data);
			executeXCommand("!giftcode info " + args.name, pl);
			return true;
		}
		tellPlayer(pl, "&cYou don't have anything in your hand!");
		return false;
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        }
    ]],
	['!giftcode removeItem <name> <id>', function(pl, args, data){
		var giftcode = new GiftCode(args.name);
		var id = args.id - 1;
		giftcode.load(data);
		if(giftcode.data.items.length > id) {
			giftcode.data.items.splice(id, 1);
			giftcode.save(data);
			executeXCommand("!giftcode info " + args.name, pl);
			return true;
		}
		tellPlayer(pl, "&cNo item with this id!");
		return false;
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        },
		{
			"argname": "id",
			"type": "number",
			"min": 1
		}
    ]],
	['!giftcode setMoney <name> <amount>', function(pl, args, data){
		var giftcode = new GiftCode(args.name);
	    giftcode.load(data);
		if(args.amount != 0)
			giftcode.data.money = getCoinAmount(args.amount);
		else
			giftcode.data.money = 0;
		giftcode.save(data);
		tellPlayer(pl, "&aMoney prize set to "+args.amount+"!");
		return true;
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true
        },
		{
			"argname": "amount",
			"type": "currency"
		}
    ]],
	['!giftcode addEmote <name> <emote>', function(pl, args, data){
		var giftcode = new GiftCode(args.name);
	    giftcode.load(data);
		giftcode.data.emotes.push(args.emote);
		giftcode.save(data);
		executeXCommand("!giftcode info " + args.name, pl);
		return true;
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true
        },
		{
            "argname": "emote",
            "type": "datahandler",
            "datatype": "emote",
            "exists": true
        }
    ]],
	['!giftcode removeEmote <name> <id>', function(pl, args, data){
		var giftcode = new GiftCode(args.name);
		var id = args.id - 1;
		giftcode.load(data);
		if(giftcode.data.emotes.length > id) {
			giftcode.data.emotes.splice(id, 1);
			giftcode.save(data);
			executeXCommand("!giftcode info " + args.name, pl);
			return true;
		}
		tellPlayer(pl, "&cNo emote with this id!");
		return false;
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        },
		{
			"argname": "id",
			"type": "number",
			"min": 1
		}
    ]],
    ['!giftcode redeem <code>', function(pl, args, data){
		var codes = new GiftCode().getAllDataIds(data);
        for(n in codes) {
var codeId = codes[n];
            var code = new GiftCode(codeId).init(data);
			if(code.data.code == args.code){
				return code.redeem(pl, data);
			}
        }
        tellPlayer(pl, "&cGiftCode with code '"+args.code+"' not found!");
  }, 'giftcode.redeem'],

  	['!giftcode unredeem <name> <player>', function(pl, args, data){
	  var p = new Player(args.player).init(data);
	  if(p.data.actGiftcodes.indexOf(args.name) == -1){
		  tellPlayer(pl, "&cGiftcode isn't activated yet!");
		  return false;
	  }
	  array_remove(p.data.actGiftcodes, args.name);
	  p.save(data);
	  tellPlayer(pl, "&aUnredeemed giftcode '"+args.name+"&a' for player "+args.player+"!");
	}, 'giftcode.create', [
	  {
		  "argname": "name",
		  "type": "datahandler",
		  "datatype": "giftcode",
		  "exists": true,
	  },
	  {
		  "argname": "player",
		  "type": "datahandler",
		  "datatype": "player",
		  "exists": true
	  }
  	]],

	['!giftcode remove <name>', function(pl, args, data){
		var code = new GiftCode(args.name);
		code.remove(data);
		tellPlayer(pl, "&aRemoved giftcode '"+args.name+"&a'!");
  }, 'giftcode.create', [
        {
            "argname": "name",
            "type": "datahandler",
            "datatype": "giftcode",
            "exists": true,
        }
    ]]
  ]);

	registerXCommands([
		['!item renameLore <slot> [...lore]', function(pl, args){
			var mItem = pl.getMainhandItem();

			if(!mItem.isEmpty()) {
				var newLoreStr = args.lore.join(' ');
				var newLore = objArray(mItem.getLore());
				var s = parseInt(args.slot) || 0;
				if(s < newLore.length) {
					newLore[s] = parseEmotes(ccs(newLoreStr));
				} else {
					newLore.push(ccs(newLoreStr));
				}
				mItem.setLore(newLore);
				tellPlayer(pl, "&aRenamed lore!");
			} else {
				tellPlayer(pl, "&cYou don't have anything in your hand!");
			}

			return false;
		}, 'item.renameLore'],
		['!item rename <...name>', function(pl, args){
			var mItem = pl.getMainhandItem();

			if(!mItem.isEmpty()) {
				var newName = args.name.join(' ');
				mItem.setCustomName(parseEmotes(ccs(newName)));
				return true;
			} else {
				tellPlayer(pl, "&cYou don't have anything in your hand!");
			}

			return false;
		}, 'item.rename'],
		['!item setAttr <slot> <attribute> <value>', function(pl, args){
			var mItem = pl.getMainhandItem();

			if(!mItem.isEmpty()) {
				mItem.setAttribute(args.attribute, parseFloat(args.value/1000), parseInt(args.slot));
				tellPlayer(pl, "&aSet "+args.attribute+" to "+args.value+"%!");
				return true;
			} else {
				tellPlayer(pl, "&cYou don't have anything in your hand!");
			}

			return false;
		}, 'item.setAttr', [
			{
				"argname": "slot",
				"type": "number",
				"min": -1,
				"max": 5,
			},
			{
				"argname": "attribute",
				"type": "attribute",
			},
			{
				"argname": "value",
				"type": "number",
				"min": 0,
			}
		]],

	]);

	registerXCommands([
		['!jobs create <name> [...display_name]', function(pl, args){
			var job = new Job(args.name);
			var dname = args.display_name.join(' ');
			var data = pl.world.getStoreddata();
			if(dname != "") {
				job.data.displayName = dname;
			}
			tellPlayer(pl, "&aJob '"+job.getDisplayName(data)+"&a' created! "+getUndoBtn(["!jobs remove "+job.name], "$cClick to undo"));
			job.save(data);
		}, 'jobs.create', [
			{
				"argname": "name",
				"type": "id",
				"minlen": 3
			},
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": false,
			}
		]],
		['!jobs remove <name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.remove(data);
			tellPlayer(pl, "&aRemoved job '"+job.getDisplayName(data)+"&a'!");
		}, 'jobs.add', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs setPay <name> <amount>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			var amount = getCoinAmount(args.amount);
			job.data.pay = amount;
			job.save(data);
			tellPlayer(pl, "&aSet the salary of job '"+job.getDisplayName(data)+"&a' to &r:money:&e"+getAmountCoin(amount)+"&a!");
		}, 'jobs.setPay', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			},
			{
				"argname": "amount",
				"type": "number"
			}
		]],
		['!jobs setPayTime <name> <time>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			job.data.payTime = args.time;
			job.save(data);
			tellPlayer(pl, "&aSet the paytime of job '"+job.getDisplayName(data)+"&a' to "+getTimeString(args.time)+"!");
		}, 'jobs.setPayTime', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			},
			{
				"argname": "time",
				"type": "time"
			}
		]],
		['!jobs setOpen <name> <open>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			job.data.isOpen = (args.open == 'true');
			job.save(data);
			tellPlayer(pl, "&aSet if job '"+job.getDisplayName(data)+"&a' is open to "+args.open);
		}, 'jobs.setOpen', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			},
			{
				"argname": "open",
				"type": "bool"
			}
		]],
		['!jobs setDisplayName <name> <...display_name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			job.data.displayName = args.display_name.join(' ');
			job.save(data);
			tellPlayer(pl, "&aSet the display of job_id '"+job.name+"' to '"+job.getDisplayName(data)+"&a'!");
		}, 'jobs.setDisplayName', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs list [...matches]', function(pl, args){
			var data = pl.world.getStoreddata();
			var dkeys = data.getKeys();
			tellPlayer(pl, "&l[=======]&r&6&lGramados Job List&r&l[=======]");
			for(d in dkeys) {
var dkey = dkeys[d];
				if( ( dkey.match(/job_(\w.)/g) || [] ).length > 0 ) {
					var job = new Job(dkey.replace(/job_(\w.)/g, '$1'));
					var isMatch = false;
					args.matches.forEach(function(mt){
						if(occurrences(mt, job.name) > 0 || occurrences(mt, job.getDisplayName(data)) > 0) {
							isMatch = true;
						}
					});

					if(args.matches.length == 0 || isMatch) {
						job.load(data);
						tellPlayer(pl, "&e - &r"+job.getStatusColor(data)+escCcs(job.getDisplayName())+"&r (&9&o"+job.name+"&r)");
					}

				}
			}
			return true;
		}, 'jobs.list'],
		['!jobs info <name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			tellPlayer(pl, "&l[=======]&r&6&lGramados Job Info&r&l[=======]");
			tellPlayer(pl, "&eName: &9&o"+job.name);
			tellPlayer(pl, "&eDisplay Name: &r"+job.getStatusColor(data)+escCcs(job.getDisplayName()));
			tellPlayer(pl, "&eCompany: &c"+job.data.companyId);
			tellPlayer(pl, "&eIncome: "+getAmountCoin(job.data.pay)+' per '+getTimeString(job.data.payTime));
			tellPlayer(pl, "&eIs Open: "+(job.data.isOpen ? '&atrue':'&cfalse'));
			tellPlayer(pl, "&ePlaces taken: "+job.getStatusColor(data)+job.getPlayers(data).length+"/"+(job.data.capacity > -1 ? job.data.capacity : 'UNLIMITED'));
			tellPlayer(pl, "&eFire Time: &6"+getTimeString(job.data.fireTime));
		}, 'jobs.info', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs playerList <name>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			tellPlayer(pl, "&l[=======] &r&6&lGramados Job Player List &r&l[=======]");
			tellPlayer(pl, "&eJob: &9&o"+args.name);
			var pls = job.getPlayers(data);
			for(p in pls) {
var plr = pls[p];
				tellPlayer(pl, "&e - &r"+plr);
			}
		}, 'jobs.playerList', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs addPlayers <name> <...player_names>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.load(data);
			for(p in args.player_names) {
var apl = args.player_names[p];
				var apo = new Player(apl);
				if(apo.load(data)) {
					apo.addJob(job.name);
					apo.save(data);
				}
			}
			tellPlayer(pl, "&aAdded "+args.player_names.length+" player(s) to job '"+job.name+"'");
		}, 'jobs.addPlayers', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs setPlaces <name> <amount>', function(pl, args){
			var am = parseInt(args.amount) || 10;
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.data.capacity = am;
			tellPlayer(pl, "&aSet max players of job '"+job.name+"' to "+am+'!');
			job.save(data);
		}, 'jobs.setPlaces', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			},
			{
				"argname": "amount",
				"type": "number"
			}
		]],
		['!jobs setFireTime <name> <time>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			job.data.fireTime = args.time;
			tellPlayer(pl, "&aSet fire time of job '"+job.name+"' to "+getTimeString(args.time)+"!");
			job.save(data);
		}, 'jobs.setFireTime', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			},
			{
				"argname": "time",
				"type": "time"
			}
		]],
		['!jobs removePlayers <name> <...players>', function(pl, args){
			var job = new Job(args.name);
			var data = pl.world.getStoreddata();
			for(p in args.players) {
var apl = args.players[p];
				var apo = new Player(apl);
				if(apo.load(data)) {
					apo.delJob(job.name);
					apo.save(data);
				}
			}
			tellPlayer(pl, "&aRemoved "+args.players.length+" player(s) from job '"+job.name+"'");
		}, 'jobs.removePlayers', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "job",
				"exists": true,
			}
		]],
		['!jobs reload', function(pl, args){
			var data = pl.world.getStoreddata();
			var dkeys = data.getKeys();
			var jc = 0;
			for(d in dkeys) {
var dkey = dkeys[d];
				if(dkey.cmatch(/job_(\w+)/g)) {
					var job = new Job(dkey.replace(/job_(\w+)/g, '$1'));
					if(job.load(data)) {
						job.save(data);
					}
					jc++;
				}
			}
			tellPlayer(pl, "&aReloaded "+jc+" job(s)!");
		}, 'jobs.reload']
	]);

	//REGISTER PERMISSION COMMANDS
	registerXCommands([
		['!perms setEnabled <permission_id> <value>', function(pl, args, data){
			var perm = new Permission(args.permission_id).init(data);
			perm.data.enabled = (args.value == 'true');
			perm.save(data);
			tellPlayer(pl, "&a"+(args.value == 'true' ? 'Enabled' : 'Disabled')+" permission '"+args.permission_id+"'! &r[&5&lUndo{run_command:!perms setEnabled "+perm.name+" "+(args.value == 'true' ? 'false' : 'true')+"}&r]");
		}, 'perms.setEnabled', [
			{
				"argname": "value",
				"type": "bool"
			},
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]],
		['!perms addTeams <permission_id> <...teams>', function(pl, args, data){
			var w = pl.world;
			var p = new Permission(args.permission_id).init(data);
			p.addTeams(args.teams).save(data);
			tellPlayer(pl, "&aAdded teams \""+args.teams.join(", ")+"\" to "+p.name+"!&r [&5&lUndo{run_command:!perms removeTeams "+p.name+" "+args.teams.join(" ")+"}&r]");
		}, 'perms.addTeams', [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]],
		['!perms removeTeams <permission_id> <...teams>', function(pl, args, data){
			var w = pl.world;
			var p = new Permission(args.permission_id).init(data);
			if(p.load(data)) {
				p.removeTeams(args.teams).save(data);
				tellPlayer(pl, "&aRemoved teams \""+args.teams.join(", ")+"\" from "+p.name+"!&r [&5&lUndo{run_command:!perms addTeams "+p.name+" "+args.teams.join(" ")+"}&r]");
				return true;
			} else {
				tellPlayer(pl, "&c"+args.permission_id+" does not exists!");
			}
			return false;
		}, 'perms.removeTeams', [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]],
		['!perms addPlayers <permission_id> <...players>', function(pl, args, data){
			var w = pl.world;
			var p = new Permission(args.permission_id).init(data);
			p.addPlayers(args.players).save(data);
			tellPlayer(pl, "&aAdded players \""+args.players.join(", ")+"\" to "+p.name+"!&r [&5&lUndo{run_command:!perms removePlayers "+p.name+" "+args.players.join(" ")+"}&r]");
		}, 'perms.addPlayers', [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]],
		['!perms removePlayers <permission_id> <...players>', function(pl, args, data){
			var w = pl.world;
			var p = new Permission(args.permission_id).init(data);
			p.removePlayers(args.players).save(data);
			tellPlayer(pl, "&aRemoved players \""+args.players.join(", ")+"\" from "+p.name+"!&r [&5&lUndo{run_command:!perms addPlayers "+p.name+" "+args.players.join(" ")+"}&r]");
		}, 'perms.removePlayers', [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]],
		['!perms remove <permission_id>', function(pl, args, data){
			var data = pl.world.getStoreddata();
			var p = new Permission(args.permission_id).init(data);
			//Cache data for undo-action
			var undocmds = [
				'!perms create '+p.name,
				'!perms setEnabled '+p.name+' '+p.data.enabled.toString(),
			];
			if(p.data.teams.length > 0) { undocmds.push('!perms addTeams '+p.name+' '+p.data.teams.join(" ")); }
			if(p.data.players.length > 0) { undocmds.push('!perms addPlayers '+p.name+' '+p.data.players.join(" ")); }
			p.remove(data);
			tellPlayer(pl, "&aRemoved permission '"+p.name+"'!&r [&5&lUndo{run_command:!chain "+undocmds.join(";")+"}&r]");
			return true;

		}, "perms.remove", [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]],
		['!perms create <permission_id>', function(pl, args){
			var w = pl.world;
			var data = w.getStoreddata();
			var p = new Permission(args.permission_id);
			tellPlayer(pl, "&aSaved new permission "+p.name+"!&r [&5&lUndo{run_command:!perms remove "+p.name+"}&r]");
			p.save(data);
		}, 'perms.create', [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": false,
			}
		]],
		['!perms list [...matches]', function(pl, args){
			var w = pl.world;
			var data = w.getStoreddata();
			var ids = new Permission().getAllDataIds(data);
			var maxShow = 15;
			var curShow = 0;
			if(ids.length > 0) {
				tellPlayer(pl, getTitleBar("Permission List"));
				for(i in ids) {
var id = ids[i];
					if(args.matches.length == 0 || arrayOccurs(id, args.matches, false, false) && curShow < maxShow) {
						tellPlayer(pl, "&e - &b&l"+id+"&r (&6:sun: Info{run_command:!perms info "+id+"}&r) (&c:cross: Remove{run_command:!perms remove "+id+"}&r)");
					}
					curShow++;
				}
				if(curShow >= maxShow) {
					var showMore = (curShow - maxShow);
					tellPlayer(pl, "&6"+showMore+"&e more results, use specific matches.");
				}
			} else {
				tellPlayer(pl, "&cThere are no registered permissions");
			}
			return true;
		}, ['perms.list']],
		['!perms info <permission_id>', function(pl, args){
			var w = pl.world;
			var data = w.getStoreddata();
			var p = new Permission(args.permission_id);
			if(p.load(data)) {
				tellPlayer(pl, getTitleBar("Permission Info"));
				tellPlayer(pl, "&eID: &9&o"+p.name+"&r (&2:recycle: Refresh{run_command:!perms info "+p.name+"}&r) (&4:cross: Remove Perm{run_command:!perms remove "+p.name+"}&r)")
				tellPlayer(pl, "&eEnabled: &r"+
					(p.data.enabled ? "&a:check: Yes" : "&c:cross: No")+
					"&r ("+
					(p.data.enabled ?
						"&c:cross: Disable{run_command:!perms setEnabled "+p.name+" false|show_text:Click to disable.}"
						:
						"&a:check: Enable{run_command:!perms setEnabled "+p.name+" true|show_text:Click to enable.}"
					)+
					"&r)"
				);
				tellPlayer(pl, "&ePermitted Teams: &r(&a:check: Add{suggest_command:!perms addTeams "+p.name+" }&r) (&c:cross: Remove{suggest_command:!perms removeTeams "+p.name+" }&r)");
				for(i in p.data.teams) {
var team = p.data.teams[i];
					tellPlayer(pl, "&e - &r&o"+team+"&r (&c:cross: Remove{run_command:!perms removeTeams "+p.name+" "+team+"}&r)");
				}
				tellPlayer(pl, "&ePermitted Players: &r(&a:check: Add{suggest_command:!perms addPlayers "+p.name+" }&r) (&cRemove{suggest_command:!perms removePlayers "+p.name+" }&r)");
				for(i in p.data.players) {
var player = p.data.players[i];
					tellPlayer(pl, "&e - &r&o"+player+"&r (&c:cross: Remove{run_command:!perms removePlayers "+p.name+" "+player+"}&r)");
				}

				tellPlayer(pl, p.getParentPerms(data).join(", "));
			} else {
				tellPlayer(pl, "&cCould not find any info for "+args.permission_id);
			}
		}, 'perms.info', [
			{
				"argname": "permission_id",
				"type": "datahandler",
				"datatype": "permission",
				"exists": true,
			}
		]]
	]);

	//REGISTER PLAYER COMMANDS
	registerXCommands([
		//PLAYER MANAGE
		['!player perms <player> [...matches]', function(pl, args, data){
			var permids = new Permission().getAllDataIds(data);

			var w = pl.world;
			var sb = w.getScoreboard();
			var tm = sb.getPlayerTeam(args.player);
			tellPlayer(pl, "&l[=======] &6&lGramados Player Perms&r &l[=======]");
			tellPlayer(pl, "&ePermissions for player:&r "+args.player);
			var shownperms = 0;
			for(p in permids) {
var pid = permids[p];
				if(args.matches.length == 0 || arrayOccurs(pid, args.matches, false, false) > 0) {
					var perm = new Permission(pid).init(data);
					if(perm.permits(args.player, sb, data)) {
						tellPlayer(pl, "&6 - Has permission: &b&l"+perm.name+"&r (&ePerm Info{run_command:!perms info "+perm.name+"}&r)");
						if(perm.data.players.indexOf(args.player) > -1) {
							tellPlayer(pl, "&e    - By player&r (&c - Revoke{run_command:!perms removePlayers "+perm.name+" "+args.player+"|show_text:$cClick to revoke permission "+perm.name+" for player "+args.player+".}&r)");
						}
						if(tm != null) {
							if(perm.data.teams.indexOf(tm.getName()) > -1) {
								var tcol = '&'+getColorId(tm.getColor());
								tellPlayer(pl, "&e    - By team "+tcol+"&o"+tm.getName()+"&r (&c:cross: Revoke Team{run_command:!perms removeTeams "+perm.name+" "+tm.getName()+"|show_text:$cClick to revoke permission "+perm.name+" for team "+tm.getName()+".}&r)");
							}
						}
						shownperms++;
					}
				}

			}
			if(shownperms == 0) {
				tellPlayer(pl, "&cNo permissions found for player "+args.player);
			}
		}, 'player.perms'],
		['!player setPay <player> <amount>', function(pl, args, data){
			var am = getCoinAmount(args.amount);
			var p = new Player(args.player).init(data);

			p.data.pay = am;
			p.save(data);
			tellPlayer(pl, "&aSet pay amount of player '"+p.name+"' to &r:money:&e"+getAmountCoin(am)+'&a!');

			return true;
		}, 'player.setPay', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "amount",
				"type": "currency",
				"min": 0
			}
		]],
		['!player setPayTime <player> <time>', function(pl, args, data){
			var am = getStringTime(args.time);
			var p = new Player(args.player).init(data);
			p.data.payTime = am;
			p.save(data);
			tellPlayer(pl, "&aSet pay time of player '"+p.name+"' to "+getTimeString(am)+'!');

			return true;
		}, 'player.setPayTime', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "time",
				"type": "time"
			}
		]],
		['!player setMaxJobs <player> <amount>', function(pl, args, data){
			var p = new Player(args.player).init(data);
			p.data.maxJobs = parseInt(args.amount) || 1;
			p.save(data);

			tellPlayer(pl, "&aSet maxhomes of player '"+p.name+"' to "+(parseInt(args.amount) || 1)+'!');
			return true;

		}, 'player.setMaxJobs', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "amount",
				"type": "number"
			}
		]],
		['!player setMaxHomes <player> <amount>', function(pl, args, data){
			var p = new Player(args.player).init(data);
			p.data.maxHomes = parseInt(args.amount) || 1;
			p.save(data);
			tellPlayer(pl, "&aSet maxhomes of player '"+p.name+"' to "+(parseInt(args.amount) || 1)+'!');
			return true;

		}, 'player.setMaxHomes', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "amount",
				"type": "number"
			}
		]],
		['!player setChatColor <player> <color>', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.chatcolor = args.color;
			plo.save(data);
			tellPlayer(pl, "&aChanged chatcolor to "+args.color+"!");
			return true;
		}, 'player.setChatColor', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "color",
				"type": "color"
			}
		]],
		['!player resetChatColor <player>', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.chatcolor = null;
			plo.save(data);
			tellPlayer(pl, "&aReset chatcolor of player "+plo.name+"!");
			return true;
		}, 'player.resetChatColor', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
		]],
		['!player setChatEffect <player> <effect>', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.chatcolor = args.effect;
			plo.save(data);
			tellPlayer(pl, "&aChanged chateffect to "+args.effect+"!");
			return true;
		}, 'player.setChatColor', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
			{
				"argname": "effect",
				"type": "coloreffect"
			}
		]],
		['!player resetChatEffect <player>', function(pl, args, data){
			var plo = new Player(args.player).init(data);
			plo.data.chateffect = null;
			plo.save(data);
			tellPlayer(pl, "&aReset chateffect of player "+plo.name+"!");
			return true;
		}, 'player.resetChatEffect', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			},
		]],
		['!player income <player>', function(pl, args, data){
			var p = new Player(args.player).init(data);
			var sb = pl.world.getScoreboard();
			tellPlayer(pl, "&l[=======] &r&6&lGramados Income&r &l[=======]");
			tellPlayer(pl, "&ePlayer: &r"+p.getNameTag(sb));
			tellPlayer(pl, "&eBasic income: &6&o"+getAmountCoin(p.data.pay)+"&r&e per &6&o"+getTimeString(p.data.payTime));
			var tleft = (p.data.lastPayed+p.data.payTime) - new Date().getTime();
			tellPlayer(pl, "&6&o"+getTimeString(tleft, ['ms'])+"&r&e until next pay.");
			var pjobs = p.getJobs(data);

			if(pjobs.length > 0) {
				for(pj in pjobs) {
var pjob = pjobs[pj];
					tellPlayer(pl, "&eJob income for &r"+pjob.getDisplayName(data));
					tellPlayer(pl, "&e - Job salary: &6&o"+getAmountCoin(pjob.data.pay));
					var jleft = (p.getJob(pjob.name).lastPayed+pjob.data.payTime) - new Date().getTime();
					tellPlayer(pl, "&e - &6&o"+getTimeString(jleft, ['ms'])+"&r&e until next pay for &r"+pjob.getDisplayName(data));
				}
			}


			//print(p.toJson());
			return true;
		}, 'player.income', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			}
		]],
		['!player info <player>', function(pl, args, data){
			var p = new Player(args.player).init(data);
			var sb = pl.world.getScoreboard();
			var po = null;
			tellPlayer(pl, getTitleBar("Player Info", false));
			tellPlayer(pl, "&e&lPlayer Info For: &r"+p.getNameTag(sb));
			var now = new Date().getTime();
			tellPlayer(pl, "&eFirst Login: &6&o"+getTimeString(now - p.data.firstLogin, ['ms'])+"&r &eago.");
			tellPlayer(pl, "&eLast Login: &6&o"+getTimeString(now - p.data.lastLogin, ['ms'])+"&r &eago.");
			tellPlayer(pl, "");
			return true;
		}, 'player.info', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true
			}
		]],



		//PLAYER UTILITY
		['!nickname <player> <name>', function(pl, args, data){
			pl.setName(args.name);
		}, 'nickname'],
		['!bounty add <player> <amount>', function(pl, args, data){
			var plo = new Player(pl.getName()).init(data);
			var tplo = new Player(args.player).init(data);
			var ba = getCoinAmount(args.amount);
			var w = pl.world;
			var sb = w.getScoreboard();
			var sbo = sb.getObjective("bounty");
			if(sbo != null) {
				if(plo.data.money >= ba) {
					plo.data.money -= ba;
					var btax = Math.ceil(ba/100*5);
					var nb = ba-btax;
					if(sbo.hasScore(args.player)) {
						sbo.getScore(args.player).setValue(sbo.getScore(args.player).getValue()+ba);
					} else {
						sbo.createScore(args.player).setValue(ba);
					}
					plo.save(data);
					tellPlayer(pl, "&r:money:&e"+getAmountCoin(btax)+"&a has been taken as bounty tax!")
					if(tplo.name != plo.name) {
						executeCommand(pl, "/tellraw @a "+parseEmotes(strf(plo.getNameTag(sb)+"&a has put a bounty of &r:money:&e"+getAmountCoin(nb)+"&a on &r"+tplo.getNameTag(sb)+"&a!")));
					} else {
						executeCommand(pl, "/tellraw @a "+parseEmotes(strf(plo.getNameTag(sb)+"&a is so stupid, he gave himself a bounty of &r:money:&e"+getAmountCoin(nb)+"&a!")));
					}

				} else {
					tellPlayer(pl, "&cYou don't have enough money in your pouch to add the bounty!&r [&2Money Pouch{run_command:!myMoney}&r]");
				}
			} else {
				tellPlayer(pl, "&cScoreboard objective 'bounty' does not exists!");
			}

		}, 'bounty.add', [
			{
				"argname": "player",
				"type": "datahandler",
				"datatype": "player",
				"exists": true,
			},
			{
				"argname": "amount",
				"type": "currency",
				"min": 0,
			},
		]],
		['!topBounty', function(pl, args, data){
			var sb = pl.world.getScoreboard();
			var bo = sb.getObjective("bounty");
			var scores = [];
			if(bo != null) {
				var bos = bo.getScores();
				for(b in bos) {
var bscore = bos[b];
					scores.push({
						name: bscore.getPlayerName(),
						value: bscore.getValue(),
					});
				}
			}
			scores = scores.sort(function(a,b){
				return b.value-a.value;
			});
			tellPlayer(pl, getTitleBar("Top Bounties"))
			for(s in scores) {
var score = scores[s];
				var spl = new Player(score.name);
				spl.load(data);
				var pnum = parseInt(s)+1;
				tellPlayer(pl, " - "+pnum+". "+spl.getNameTag(sb)+"&r :money:&e"+getAmountCoin(score.value));
			}
		}, 'topBounty', []],
		['!withdraw <amount>', function(pl, args, data){
			var p = new Player(pl.getName()).init(data);
			var w = pl.world;
			var wamount = getCoinAmount(args.amount);
			if(wamount <= p.data.money) {
				var moneyItems = genMoney(w, wamount);
				p.data.money -= wamount;
				givePlayerItems(pl, moneyItems);
				p.save(data);
				tellPlayer(pl, "&aWithdrawed &r:money:&e"+getAmountCoin(wamount)+"&r&a from money pouch!");
				return true;
			} else {
				tellPlayer(pl, "&cYou dont have that much money in your pouch!");
			}
			return false;
		}, 'withdraw', [
			{
				"argname": "amount",
				"type": "currency",
				"min": 1,
			}
		]],
		['!deposit', function(pl, args, data){
			var p = new Player(pl.getName()).init(data);
			var w = pl.world;
			var mItem = pl.getMainhandItem();
			if(isItemMoney(mItem, w)) {
				var mval = getCoinAmount(mItem.getLore()[0]||"0C")*mItem.getStackSize();
				pl.setMainhandItem(null);
				p.data.money += mval;
				tellPlayer(pl, "&aAdded &r:money:&e"+getAmountCoin(mval)+"&a to money pouch.&r [&2:money: Money Pouch{run_command:!myMoney|show_text:Click here or do $o!myMoney}&r]");
				p.save(data);
			} else {
				tellPlayer(pl, "&cYou don't have valid money in your hand!");
			}
			return false;
		}, 'deposit'],
		['!myMoney', function(pl, args, data){
			var pnbt = pl.getEntityNbt();
			var p = new Player(pl.getName()).init(data);
			var mp = p.data.money;
			var mi = getMoneyItemCount(pnbt, pl.world);
			var total = mp+mi;
			tellPlayer(pl, getTitleBar('Money Pouch'));
			tellPlayer(pl, ":danger: &4&oYou will lose 50% of your money pouch on death.&r :danger:");
			tellPlayer(pl, "&6Money Pouch: &r:money:&e"+getAmountCoin(mp)+"&r [&aWithdraw{suggest_command:!withdraw }&r]");
			tellPlayer(pl, "&6Inventory: &r:money:&e"+getAmountCoin(mi)+"&r [&aDeposit{run_command:!deposit}&r]");
			tellPlayer(pl, "&cYou carry a total of &r:money:&e"+getAmountCoin(total));
			tellPlayer(pl, "&9You will lose &r:money:&e"+getAmountCoin(mi+Math.round(mp/2))+"&9 on death!");
			return true;
		}, 'myMoney'],
		['!myIncome', function(pl, args, data){
			var p = new Player(pl.getName());
			p.load(data);
			tellPlayer(pl, "&l[=======] &r&6&lGramados Income&r &l[=======]");
			tellPlayer(pl, "&eBasic income: &6&o"+getAmountCoin(p.data.pay)+"&r&e per &6&o"+getTimeString(p.data.payTime));
			var tleft = (p.data.lastPayed+p.data.payTime) - new Date().getTime();
			tellPlayer(pl, "&6&o"+getTimeString(tleft, ['ms'])+"&r&e until next pay.");
			var pjobs = p.getJobs(data);

			if(pjobs.length > 0) {
				for(pj in pjobs) {
var pjob = pjobs[pj];
					tellPlayer(pl, "&eJob income for &r"+pjob.getDisplayName(data));
					tellPlayer(pl, "&e - Job salary: &6&o"+getAmountCoin(pjob.data.pay));
					var jleft = (p.getJob(pjob.name).lastPayed+pjob.data.payTime) - new Date().getTime();
					tellPlayer(pl, "&e - &6&o"+getTimeString(jleft, ['ms'])+"&r&e until next pay for &r"+pjob.getDisplayName(data));
				}
			}


			//print(p.toJson());
			return true;

		}, 'myIncome'],
		['!myStats [...matches]', function(pl, args, data){
			var pskills = getSkills(pl);
			var maxLvl = 32;
			tellPlayer(pl, "&l[=======] &6&lGramados Stats&r &l[=======]");
			var lmatches = arrayTransform(args.matches, function(arr_el){return arr_el.toLowerCase();});
			for(p in pskills) {
var pskill = pskills[p];
				if(arrayOccurs(pskill.name.toLowerCase(), lmatches) || args.matches.length == 0) {
					var proc = Math.round(pskill.xp/pskill.maxXp*100);
					skillBar = progressBar(pskill.xp, pskill.maxXp, 10);
					tellPlayer(pl, "&e&l"+pskill.level+" &3&l"+pskill.name+" "+(pskill.level < maxLvl ? (skillBar+" "+proc+"%&e - "+pskill.xp+"/"+pskill.maxXp) : "&r&a&lMAX LEVEL&r"));
				}
			}

			return true;
		}, 'myStats'],
		['!myEmotes [...matches]', function(pl, args, data){
			var plo = new Player(pl.getName()).init(data);
			var sb = pl.world.getScoreboard();
			var showStr = "";
			var showEmotes = [];
			var unlocked = [];
			var showWidth = 10;

			for(c in CHAT_EMOTES) {
var ce = CHAT_EMOTES[c];
				if(args.matches.length == 0 || arrayOccurs(c, args.matches, false, false) > 0) {
					var ec = new Emote(c).init(data, false);
					showEmotes.push(ec);
					if(plo.hasEmote(ec.name, sb, data)) {
						unlocked.push(ec);
					}
				}
			}

			tellPlayer(pl, getTitleBar('Emotes'));
			tellPlayer(pl, "&6"+unlocked.length+"/"+showEmotes.length+" Unlocked.");
			tellPlayer(pl, "&eHover emoji for info.");
			var tellStr = "";
			for(i in showEmotes) {
var em = showEmotes[i];
				var plHas = plo.hasEmote(em.name, sb, data);
				var plHasPerm = em.getPermission().init(data, false).permits(plo.name, sb, data);
				var infoStr = ":"+em.name+":\n$eName: $r"+em.name+"\n";
				var lockStr = (
					em.data.default ?
						"$6$lDEFAULT EMOTE$r":
						(plHasPerm ?
							"$5$lUNLOCKED WITH PERM$r":
							(plHas ?
								"$a$lUNLOCKED$r":
								"$c$lLOCKED$r"
							)
						)
					);
				var sellStr = (plHas ? "" : (!em.data.forSale ? "\n$cThis emote is not for sale." : "\n$cClick to buy "+em.name+" for $r:money:$e"+getAmountCoin(em.data.price)));
				var descStr = (em.data.desc != "" ? em.data.desc.replaceAll('&', '$')+"\n" : "");
				if(em.data.hidden && !plHas) { continue; }

				tellStr += (plHas ? "&r":"&8")+"[:"+em.name+":]{*|show_text:"+infoStr+descStr+lockStr+sellStr+"}&r ";
				if(parseInt(i) > 0 && (parseInt(i)+1) % showWidth === 0) {
					tellStr += "\n";
				}


			}

			tellPlayer(pl, tellStr);

		}, 'myEmotes'],
		['!setHome <name>', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			var ppos = pl.getPos();
			plo.load(data);

			if(plo.data.maxHomes == -1 || Object.keys(plo.data.homes).length < plo.data.maxHomes) {
				plo.addHome(args.name, ppos.getX(), ppos.getY(), ppos.getZ());
				tellPlayer(pl, "&aAdded home '"+args.name+"'!");
				plo.save(data);
				return true;
			} else {
				tellPlayer(pl, "&cYou have reached maximum amount of homes! ("+plo.data.maxHomes+")");
			}

			return false;
		}, 'setHome'],
		['!delHome <name>', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			var ppos = pl.getPos();
			plo.load(data);
			if(plo.hasHome(args.name)) {//remove home
				plo.delHome(args.name);
				tellPlayer(pl, "&aRemoved home '"+args.name+"'!");
				plo.save(data);
				return true;
			} else {//Add new home
				tellPlayer(pl, "&cHome '"+args.name+"' does not exist!");
			}
			return false;
		}, 'delHome'],
		['!myHomes', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			plo.load(data);
			if(Object.keys(plo.data.homes).length > 0) {
				tellPlayer(pl, "&l[=======] &6&lGramados Homes &r&l[=======]");
				tellPlayer(pl, "[&a:check: Add{suggest_command:!setHome }&r]");
				for(i in plo.data.homes) {
var home = plo.data.homes[i];
					tellPlayer(pl, "&e - &9&o"+i+"&r&r [&bTeleport{run_command:!home "+i+"|show_text:Click to TP\n$eX:$c"+home.x+" $eY:$c"+home.y+" $eZ:$c"+home.z+" }&r] [&c:cross: Remove{run_command:!delHome "+i+"|show_text:Click to remove home.}&r]");
				}
				return true;
			} else {
				tellPlayer(pl, "&cYou don't have any homes!");
			}

			return false;
		}, 'myHomes'],
		['!home <name>', function(pl, args){
			var plo = new Player(pl.getName());
			var data = pl.world.getStoreddata();
			var ppos = pl.getPos();
			plo.load(data);
			if(plo.hasHome(args.name)) {
				var h = plo.data.homes[args.name];
				pl.setPosition(h.x, h.y, h.z);
			} else {
				tellPlayer(pl, "&cHome '"+args.name+"' does not exist!");
			}
			return false;
		}, 'home'],
		['!heal', function(pl, args){
			pl.setHealth(parseFloat(pl.getMaxHealth()));
			pl.setHunger(20);
			tellPlayer(pl, "&aYou have been healed!");
		}, 'heal'],
	]);

	//REGISTER REGION COMMANDS
	registerXCommands([
		//['', function(pl, args){}, '', []],
		['!region create <name>', function(pl, args, data){
			var region = new Region(args.name);
			region.save(data);
			tellPlayer(pl, "&aAdded region '"+args.name+"'!");
			return true;
		}, 'region.create', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": false
			}
		]],
		['!region info [...names]', function(pl, args, data){
			for(n in args.names) {
var regname = args.names[n];
				var region = new Region(regname).init(data);
				tellPlayer(pl, "&l[=======] &6&lGramados Region Info &r&l[=======]");
				print(region.name);
				print(region.toJson());
				tellPlayer(pl, "&eRegion ID: &b&l"+region.name+"&r (&2:recycle: Refresh{run_command:!region info "+region.name+"}&r)");
				var rpermname = region.getPermission().name;
				//tellPlayer(pl, "&eRegion Permission: &b&l"+rpermname+"&r "+(region.getPermission().exists(data) ? "(&6:sun: Info{run_command:!perms info "+rpermname+"}&r)"));
				tellPlayer(pl, "&eOwner: &r&o"+(region.data.owner == null ? "&r&6&lGramados":region.data.owner+"&r (&c:cross: Kick{run_command:!region setOwner "+region.name+"|show_text:Kick "+region.data.owner+" from "+region.name+"}&r)")+"&r (&a+ Set{suggest_command:!region setOwner "+region.name+" |show_text:Set new owner for "+region.name+"}&r)");
				tellPlayer(pl, "&eFor Sale: "+
					(region.data.forSale ?
						"&a:check: Yes&r (&cPull off sale{run_command:!region setForSale "+region.name+" false}&r)"
						:
						"&c:cross: No&r (&aPut for sale{run_command:!region setForSale "+region.name+" true}&r)")
				);
				if(region.data.positions.length > 0) {
					//Cache positions for undo
					tellPlayer(pl, "&ePosition List:&r (&cClear{run_command:!region removePos "+region.name+" "+Object.keys(region.data.positions).join(" ")+"}&r)");
					for(ri in region.data.positions) {
var regpos = region.data.positions[ri];
						tellPlayer(pl, "&5&l"+ri+"&r - &eXYZ1 &r(&b"+(regpos.xyz1||[]).join(", ")+"&r) &eXYZ2 &r(&b"+(regpos.xyz2||[]).join(", ")+"&r) (&c - Remove{run_command:!region removePos "+region.name+" "+ri+"}&r)");
					}
				} else {
					tellPlayer(pl, "&6Region has no positions! (This region still can be used for group-rules, like regions with positions set)");
				}

			}
		}, 'region.info', [

		]],
		['!region setForSale <name> <forSale>', function(pl, args, data){}, 'region.setForSale', []],
		['!region removePos <name> [...posNumbers]', function(pl, args, data){
			var region = new Region(args.name).init(data);
			//Cache pos for undo
			var undocmds = [];

			if(args.posNumbers.length > 0) {
				for(pn in args.posNumbers) {
var apn = args.posNumbers[pn];
					apn = parseInt(apn);
					var pos = region.data.positions[apn];
					//undocmds.push("!region setPos "+region.name+" "+apn+" 1 "+pos.xyz1[0]+" "+pos.xyz1[1]+" "pos.xyz1[2]);
					//undocmds.push("!region setPos "+region.name+" "+apn+" 2 "+pos.xyz2[0]+" "+pos.xyz2[1]+" "pos.xyz2[2]);
				}
				region.data.positions = removeFromArrayByKey(region.data.positions, args.posNumbers);
				tellPlayer(pl, "&aRemoved positions '"+args.posNumbers.join(", ")+"' from region '"+region.name+"'&r [&5&lUndo{run_command:!chain "+undocmds.join(";")+"}&r]");
			} else {

				for(i in region.data.positions) {
var rpos = region.data.positions[i];
					undocmds.push("!region setPos "+region.name+" "+i+" 1 "+rpos.xyz1[0]+" "+rpos.xyz1[1]+" "+rpos.xyz1[2]);
					undocmds.push("!region setPos "+region.name+" "+i+" 2 "+rpos.xyz2[0]+" "+rpos.xyz2[1]+" "+rpos.xyz2[2]);
				}
				region.data.positions = [];
				tellPlayer(pl, "&aCleared all positions from region '"+region.name+"'&r [&5&l:recycle: Undo{run_command:!chain "+undocmds.join(";")+";}&r]");
			}
			region.save(data);
			return true;
		}, 'region.removePos', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true
			}
		]],
		['!region setPos <name> <posNum> <selectionNum> <x> <y> <z>', function(pl, args, data){//Wont be used by players, but region wand commands
			var region = new Region(args.name).init(data);
			var posArgs = ['x','y','z'];
			for(i in posArgs) {
var pa = posArgs[i];
				args[pa] = args[pa].replace("~", pl.getPos()['get'+pa.toUpperCase()]());
			}
			var newPos = [
				args.x,
				args.y,
				args.z,
			];
			var newPosNum = Math.min(parseInt(args.posNum), region.data.positions.length);
			if(!(newPosNum in region.data.positions)) {
				region.data.positions[newPosNum] = {
					xyz1: null,
					xyz2: null,
				};
			}
			region.data.positions[newPosNum]['xyz'+args.selectionNum] = newPos;
			tellPlayer(pl, "&aSet selection #"+args.selectionNum+" of position #"+args.posNum+" of region '"+region.name+"' to "+newPos.join(", ")+"!");
			region.save(data);
			return true;
		}, 'region.setPos', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true,
			},
			{
				"argname": "posNum",
				"min": 0,
			},
			{
				"argname": "selectioNum",
				"min": 1,
				"max": 2,
			},
		]],
		['!region list [...matches]', function(pl, args, data){
			var dkeys = new Region().getAllDataIds(data);

			tellPlayer(pl, "&l[=======] &6&lGramados Regions&r &l[=======]");
			for(d in dkeys) {
var dkey = dkeys[d];
				var region = new Region(dkey);
				region.load(data);
				if(args.matches.length == 0 || arrayOccurs(region.name.toLowerCase(), args.matches) > 0) {
					tellPlayer(pl, "&e - &b&l"+region.name+"&r (&6&nInfo{run_command:!region info "+region.name+"}&r) (&c&nRemove{run_command:!region remove "+region.name+"}&r)");
				}

			}

			return true;
		}, 'region.list'],
		['!region remove <name>', function(pl, args, data){
			var region = new Region(args.name);
			region.remove(data);
			tellPlayer(pl, "&aRemoved region '"+region.name+"'!");
			return true;
		}, 'region.list', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true
			}
		]],
		['!region setOwner <name> [player]', function(pl, args, data){
			var region = new Region(args.name).init(data);
			region.data.owner = args.player;
			tellPlayer(pl, "&aSet region owner to: "+(region.data.owner == null ? "&6&lGramados" : region.data.owner));
			region.save(data);
			return true;
		}, 'region.setOwner', [
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true
			}
		]],
		['!region select <name>', function(pl, args, data){
			var rayt = pl.rayTraceBlock(16, false, true);
			var region = new Region(args.name).init(data);
			var rpos = [
				rayt.getPos().getX(),
				rayt.getPos().getY(),
				rayt.getPos().getZ(),
			];
			region.addCoord(rpos).save(data);
			tellPlayer(pl, "&aAdded coords to region '"+region.name+"'! ("+rpos.join(", ")+")");
			return true;
		}, 'region.setPos', [ //Needs setPos permission (to keep modifying position at one perm!)
			{
				"argname": "name",
				"type": "datahandler",
				"datatype": "region",
				"exists": true
			}
		]],
	]);


	//REGISTER TEAM COMMANDS
	registerXCommands([
		['!teams set chatcolor <team_name> [color]', function(pl, args){
			var w = pl.world;
			var sb = w.getScoreboard();
			var t = new Team(args.team_name);
			var data = w.getStoreddata();
			t.data.chatcolor = args.color;
			t.save(data);
			tellPlayer(pl, "&aSet chatcolor for team ");
		}, 'teams.set.chatcolor', [
			{
				"argname": "color",
				"type": "color"
			},
			{
				"argname": "team_name",
				"type": "datahandler",
				"datatype": "team",
				"exists": true
			}
		]]
	]);

	//REGISTER UTIL COMMANDS
	registerXCommands([
		['!debug <amount>', function(pl, args){
			takeMoneyFromPlayer(pl, getCoinAmount(args.amount));
		}, 'debug'],
		['!getDoorCode', function(pl, args, data){
			var rt = pl.rayTraceBlock(16, false, false);
			var rtb = rt.getBlock();

			if(rtb.hasTileEntity()) {
				var rnbt = rtb.getTileEntityNBT();
				if(rnbt.has("id")) {
					if(rnbt.getString("id") == "minecraft:doortileentity") {
						if(rnbt.has("code")) {
							tellPlayer(pl, "&6The code of this door is: &e"+rnbt.getString("code"));
							return true;
						} else {
							tellPlayer(pl, "&6This is not an locked door.");
							return false;
						}
					}
				}
			}

			tellPlayer(pl, "&cYou are not looking at the handle of a door!");
			return true;
		}, 'getDoorCode', []],
		['!sign edit <line> [...text]', function(pl, args, data){

			var rt = pl.rayTraceBlock(16, false, false);
			var rtb = rt.getBlock();
			//is sign
			if(["minecraft:wall_sign", "minecraft:standing_sign"].indexOf(rtb.getName()) > -1 && rtb.hasTileEntity()) {
				var rnbt = rtb.getTileEntityNBT();
				var newTxt = parseEmotes(strf(args.text.join(" ")));
				rnbt.setString("Text"+args.line.toString(), newTxt);
				rtb.setTileEntityNBT(rnbt);

				//==TEMPORARY: force block update
				//==Removed when Noppes includes updating in setTileEntityNBT
				meta = rtb.getMetadata();
				rtb.setMetadata(0);
				rtb.setMetadata(1);
				rtb.setMetadata(meta);
				//==

				tellPlayer(pl, "&aEdited line #"+args.line.toString()+" of sign!");
			} else {
				tellPlayer(pl, "&cYou are not looking at a sign!");
			}

			return false;
		}, 'sign.edit', [
			{
				"argname": "slot",
				"type": "number",
				"min": 1,
				"max": 4,
			},
		]],
		['!command list [...matches]', function(pl, args, data){
			tellPlayer(pl, getTitleBar('Commands'));
			for(c in _COMMANDS) {
var cmd = _COMMANDS[c];
				var cmdm = getCommandNoArg(cmd.usage).trim();
				if(args.matches.length == 0 || arrayOccurs(cmdm, args.matches, false, false)) {
					tellPlayer(pl, "&e - &c"+cmdm+"&r (&6:sun: Info{run_command:!command info "+getCommandName(cmd.usage)+"}&r)");
				}
			}
		}, 'command.list'],
		['!command info <...command>', function(pl, args, data){
			var argcmd = args.command.join(" ").trim();
			for(c in _COMMANDS) {
var cmd = _COMMANDS[c];
				if(getCommandName(cmd.usage) == argcmd) {
					tellPlayer(pl, getTitleBar("Command Info"));
					tellPlayer(pl, "&eCommand: &b"+getCommandNoArg(cmd.usage).trim());
					tellPlayer(pl,
						"&ePermission ID: &9&l"+
						cmd.perm+"&r"+
						(	new Permission(cmd.perm).exists(data) ?
							" (&6:sun: Info{run_command:!perms info "+cmd.perm+"}&r)"
							:
							"(&d:recycle: Regenerate{run_command:!chain !perms create "+cmd.perm+";!command info "+argcmd+"|show_text:Command exists, but permission does not.\nClick to regenerate.}&r)"
						)
					);
					return true;
				}
			}
			tellPlayer(pl, "&cNo commands found.");
			return true;
		}, 'command.info'],
		['!chain <...commands>', function(pl, args, data){
			var acmds = args.commands.join(" ").split(";");
			for(a in acmds) {
var acmd = acmds[a];
				var excmd = acmd.trim().replace(/\s+/g, ' ');
				if(excmd.length != "") {
					executeXCommand(excmd, pl);
				}
			}
			return true;
		}, 'chain'],
		['!fakeleave [...players]', function(pl, args){
			var pcol = '&f';
			var sb = pl.world.getScoreboard();
			var spl = (args.players.length > 0 ? args.players : [pl.getName()]);
			for(ss in spl) {
var sp = spl[ss];
				var t = sb.getPlayerTeam(sp);
				if(t != null) {
					var tc = t.getColor();
					if(tc != null) {
						pcol = '&'+getColorId(tc);
					}
				}

				executeCommand(pl, '/tellraw @a '+strf(pcol+sp+' &r&eleft the game', true));
			}
		}, 'fakeleave'],
		['!fakejoin [...players]', function(pl, args){
			var pcol = '&f';
			var sb = pl.world.getScoreboard();
			var spl = (args.players.length > 0 ? args.players : [pl.getName()]);
			for(ss in spl) {
var sp = spl[ss];
				var t = sb.getPlayerTeam(sp);
				if(t != null) {
					var tc = t.getColor();
					if(tc != null) {
						pcol = '&'+getColorId(tc);
					}
				}

				executeCommand(pl, '/tellraw @a '+strf(pcol+sp+' &r&ejoined the game', true));
			}
		}, 'fakejoin'],
		['!version', function(pl, args){
			tellPlayer(pl, getTitleBar("Server Software"));
			tellPlayer(pl, "&e&l"+SERVER_NAME+" Version: &c&l"+SCRIPT_VERSION);
			tellPlayer(pl, "&e&lSubscription: &9&lPrototype Edition");
			tellPlayer(pl, "&e&lProgrammed by: &r&lRunonstof&e and &r&lslava_110");
			tellPlayer(pl, "&e&lMade by: &r&lTheOddlySeagull&r&e and &r&lRunonstof");
			tellPlayer(pl, "&6Contact Runonstof for further questions.");
		}, "version"],
		['!listEnchants [...matches]', function(pl, args){
			var ENCHANTS = REGISTRY.ENCHANTMENTS.getValues();
			tellPlayer(pl, getTitleBar("All Registered Enchantments", false));
			for(i in ENCHANTS) {
var ench = ENCHANTS[i];
				var ename = REGISTRY.ENCHANTMENTS.getKey(ench);
				var eid = REGISTRY.ENCHANTMENTS.getID(ench);
				if(args.matches.length == 0 || arrayOccurs(ename, args.matches)) {
					tellPlayer(pl, "&e - &b"+ename+"&r (ID: "+eid+")");
				}
			}
		}, 'listEnchants'],
		['!listPotions [...matches]', function(pl, args){
			var POTIONS = REGISTRY.POTIONS.getValues();
			tellPlayer(pl, getTitleBar("All Registered Potion Effects", false));
			for(i in POTIONS) {
var pot = POTIONS[i];
				var pname = REGISTRY.POTIONS.getKey(pot);
				var pid = REGISTRY.POTIONS.getID(pot);
				if(args.matches.length == 0 || arrayOccurs(pname, args.matches) > 0) {
					tellPlayer(pl, "&e - &b"+pname+"&r (ID: "+pid+")");
				}
			}
		}, 'listPotions'],
		['!listBiomes [...matches]', function(pl, args){
			var BIOMES = REGISTRY.BIOMES.getValues();
			tellPlayer(pl, getTitleBar("All Registered Biomes", false));
			for(i in BIOMES) {
var bio = BIOMES[i];
				var bname = REGISTRY.BIOMES.getKey(bio);
				var bid = REGISTRY.BIOMES.getID(bio);
				if(args.matches.length == 0 || arrayOccurs(bname, args.matches) > 0) {
					tellPlayer(pl, "&e - &b"+bname+"&r (ID: "+bid+")");
				}
			}
		}, 'listBiomes'],
		['!listEntities [...matches]', function(pl, args){
			var ENTITIES = REGISTRY.ENTITIES.getValues();
			tellPlayer(pl, getTitleBar("All Registered Entities", false));
			for(i in ENTITIES) {
var ent = ENTITIES[i];
				var bname = REGISTRY.ENTITIES.getKey(ent);
				var bid = REGISTRY.ENTITIES.getID(ent);
				if(args.matches.length == 0 || arrayOccurs(bname, args.matches) > 0) {
					tellPlayer(pl, "&e - &b"+bname+"&r (ID: "+bid+")");
				}
			}
		}, 'listEntities'],
		['!listSkills [...matches]', function(pl, args){
			var SKILLS = ReskillableRegistry.SKILLS.getValues();
			tellPlayer(pl, getTitleBar("All Registered Skills", false));
			for(i in SKILLS) {
var skill = SKILLS[i];
				var bname = ReskillableRegistry.SKILLS.getKey(skill);
				var bid = ReskillableRegistry.SKILLS.getID(skill);
				var obj = skill.getKey().replace(/\w+\.(\w+)/g, '$1_xp');
				if(args.matches.length == 0 || arrayOccurs(bname, args.matches) > 0) {
					tellPlayer(pl, "&e - &b"+bname+"&r (ID: "+bid+", Objective: "+obj+")");
				}
			}
		}, 'listSkills'],
		['!tellraw <player> <...message>', function(pl, args){
			var msg = args.message.join(' ');
			executeCommand(pl, '/tellraw '+args.player+' '+strf(msg, true));
			return true;
		}, 'tellraw'],
		['!tellaction <player> <...message>', function(pl, args, data){
			var msg = args.message.join(' ');
			executeCommand(pl, "/title "+pl.getName()+" actionbar "+strf(msg));
			return true;
		}, 'tellaction'],
		['!setMagAmmo <amount>', function(pl, args){
			var mItem = pl.getMainhandItem();
			if(!mItem.isEmpty()) {
				var mnbt = mItem.getNbt();
				if(mnbt.has('Ammo')) {
					mnbt.setInteger('Ammo', args.amount);
					//Item.setNbt(mnbt);
					tellPlayer(pl, "&aSet ammo to "+args.amount+"!");
					return true;
				}
			}
			tellPlayer(pl, "&cYou don't have an magazine in your hand!");

			return false;
		}, 'setMagAmmo', [
			{
				"argname": "amount",
				"type": "number",
				"min": 0
			}
		]],
		['!convertNpcLoot <radius>', function(pl, args){
			var w = pl.world;
			var ents = w.getNearbyEntities(pl.getPos(), args.radius, 2);
			for(ee in ents) {
var ent = ents[ee];
				if(ent.getType() == 2) {//Is NPC
					var entnbt = ent.getEntityNbt();
					var entinv = ent.getInventory();
					for(var i = 0; i < 9; i++) {
						var dc = getDropChance(entnbt, i);
						var di = entinv.getDropItem(i);
						if(di != null) {
							var diLore = di.getLore();
							if(diLore.length > 0) {
								var diAmount = getCoinAmount(diLore[0].replace(/\s+/g, ''));
								if(diAmount > 0) {
									di.setCustomName(ccs("&2&lMoney&r"));
									di.setLore([ccs('&e'+getAmountCoin(diAmount))]);

									entinv.setDropItem(i, di, dc);
								}
							}
						}
					}
				}
			}
			tellPlayer(pl, "&aAffected "+ents.length+" entities.");
			return true;
		}, 'convertNpcLoot', [
			{
				"argname": "radius",
				"type": "number"
			}
		]],
		['!convertTrader <radius>', function(pl, args){
			var radius = parseInt(args.radius) || null;
			var ppos = pl.getPos();
			var ents = pl.world.getNearbyEntities(ppos, radius, 2);
			var entcnt = 0; //Affected entity count
			for(en in ents) {
var ent = ents[en];
				//print(ent.getPos().normalize());
				if(ent.getType() == 2) {//Is NPC
					var entrole = ent.getRole();
					if(entrole != null) {
						if(entrole.getType() == 1) {//Is Trader
							//Loop sellItems
							var newTrades = [];
							for(var i = 0; i < 18; i++) {
								newTrades.push([
									entrole.getCurrency1(i),
									entrole.getCurrency2(i),
									entrole.getSold(i),
								]);

								entrole.remove(i);
							}
							for(var i = 0; i < 18; i++) {
								//print('SLOT: '+i);amount

								for(ii in newTrades[i]) {
var nItem = newTrades[i][ii];
									if(!nItem.isEmpty()) {
										var nLore = nItem.getLore();
										if(nLore.length > 0) {
											var nAmount = getCoinAmount(nLore[0].replace(/\s+/g, ''));
											if(nAmount > 0) {
												nItem.setCustomName(ccs('&2&lMoney&r'));
												nItem.setLore([ccs('&e'+getAmountCoin(nAmount))]);
											}
										}
									}
									newTrades[i][ii] = nItem;
								}
								/*newTrades[i].forEach(function(nt){
											//print(nt.getItemNbt().toJsonString());
										});*/

								entrole.set(
									i,
									newTrades[i][0].isEmpty() ? null : newTrades[i][0],
									newTrades[i][1].isEmpty() ? null : newTrades[i][1],
									newTrades[i][2]
								);
							}
							//Add affected
							entcnt++;
						}
					}
				}
			}
			if(entcnt > 0) {
				tellPlayer(pl, "&aAffected "+entcnt+" NPC Traders in a radius of "+radius+" !")
			} else {
				tellPlayer(pl, "&cNo NPC Traders found in a radius of "+radius+" blocks.");
			}
		}, 'convertTrader', [
			{
				"argname": "radius",
				"type": "number",
				"min": 4,
				"max": 32
			}
		]],
		['!convertMoney', function(pl, args){
			var mItem = pl.getMainhandItem();
			if(!mItem.isEmpty()) {
				var mL = mItem.getLore();
				if(mL.length > 0) {
					var cAm = getCoinAmount(mL[0].replace(/\s/g, ''));
					if(cAm > 0) {
						mItem.setCustomName(ccs('&2&lMoney&r'));
						mItem.setLore([
							ccs('&e'+getAmountCoin(cAm))
						]);
						tellPlayer(pl, "&aConverted money!");
						return true;
					}
				}
				tellPlayer(pl, "&cYou don't have valid money in hand!");
			} else {
				tellPlayer(pl, "&cYou don't have anything in your hand!");
			}

			return false;
		}, 'convertMoney'],
		['!giveMoney <amount> [...players]', function(pl, args){
			var w = pl.world;
			var plrs = [];
			objArray(w.getAllPlayers()).forEach(function(wp){
				plrs.push(wp.getName());
			});
			var am = getCoinAmount(args.amount);
			if(args.players.length == 0) { args.players = [pl.getName()]; }
			var mn = genMoney(w, am);

			for(i in args.players) {
var apl = args.players[i];
				if(plrs.indexOf(apl) > -1) {
					for(m in mn) {
var mi = mn[m];
						w.getPlayer(apl).giveItem(mi);
					}
				}
			}

			tellPlayer(pl, "&aGave "+getAmountCoin(am)+" to players: '"+args.players.join(', ')+"'");

		}, 'giveMoney', [
			{
				"argname": "amount",
				"type": "currency",
				"min": 0
			}
		]],
		['!sayas <player> <...message>', function(pl, args, data){
			var w = pl.world;
			var ap = args.player;
			var apo = new Player(ap);
			apo.load(data);
			var msg = args.message.join(" ");
			var nmsg = getPlayerMessage(pl, msg, w, ap, true);
			executeCommand(pl, "/tellraw @a "+strf(nmsg, true, apo.getAllowedColors(data, w.getScoreboard())));
			return true;

		}, 'sayas'],
		//Inventory load/save
		['!inv save <name>', function(pl, args, data){
			var apo = new Player(pl.getName());
			apo.load(data);

			var inv = pl.getMCEntity().field_71071_by;
			var inventory = [];
			for (var i = 0; i < inv.field_70462_a.length; i++) {
				inventory.push(API.getIItemStack(inv.field_70462_a.get(i)).getItemNbt().toJsonString());
			}

			apo.data.inventories.push([args.name, inventory]);
			apo.save(data);
			tellPlayer(pl, "&aInventory saved as '"+args.name+"'");

			return true;

		}, 'inv.save'],
		['!inv load <name>', function(pl, args, data){
			var w = pl.world;
			var apo = new Player(pl.getName());
			apo.load(data);

			var inventory = apo.getInventory(args.name);
			if(!inventory){
				tellPlayer(pl, "&cInventory '"+args.name+"' not found");
				return false;
			}

			var inv = pl.getMCEntity().field_71071_by;
			inv.func_174888_l(); //Clear

			for (var i = 0; i < inventory.length; i++) {
				if(inventory[i] && API.stringToNbt(inventory[i]).getString("id")!="minecraft:air")
				inv.field_70462_a.set(i, w.createItemFromNbt(API.stringToNbt(inventory[i])).getMCItemStack());
			}

			inv.func_70296_d(); //Mark dirty
			pl.getMCEntity().field_71069_bz.func_75142_b(); //Detect and send changes

			tellPlayer(pl, "&aInventory '"+args.name+"' succefully loaded");
			return true;

		}, 'inv.load'],
		['!inv remove <name>', function(pl, args, data){
			var w = pl.world;
			var apo = new Player(pl.getName());
			apo.load(data);

			var inventory = apo.getInventory(args.name);
			if(!inventory){
				tellPlayer(pl, "&cInventory '"+args.name+"' not found");
				return false;
			}
			apo.removeInventory(args.name);
			apo.save(data);
			tellPlayer(pl, "&aInventory '"+args.name+"' succefully removed");
			return true;

		}, 'inv.save']
	]);




/*
Bridge between Reskillable-Compatskills mod and Custom NPCs
*/

//Classes https://github.com/Coders-After-Dark/Reskillable/
var SkillDataHandler = Java.type('codersafterdark.reskillable.api.data.PlayerDataHandler');

function getSkills(player) {
	var skillDataList = SkillDataHandler.get(player.getMCEntity()).getAllSkillInfo().toArray();
	var retSkills = [];
	var sb = player.world.getScoreboard();
	
	for(s in skillDataList) {
var skillData = skillDataList[s];
		var sxp = skillData.skill.getKey().replace(/\w+\.(\w+)/g, '$1_xp');//id.name to name_xp
		
		var sb_xp = sb.getObjective(sxp);
		
		if(sb_xp == null)
			sb_xp = sb.addObjective(sxp, 'dummy');
		
		var pl_xp = sb_xp.getScore(player.getName());
		
		if(pl_xp == null) {
			pl_xp = sb_xp.createScore(player.getName());
			pl_xp.setValue(0);
		}
		
		var fskill = {
			name: skillData.skill.getName(),
			xpname: sxp,
			key: skillData.skill.getKey(),
			level: skillData.getLevel(),
			points: skillData.getSkillPoints(),
			xp: pl_xp.getValue(),
			maxXp: skillData.getLevelUpCost(),
			traits: [],
			mcSkill: skillData
		};
		//Traits iteration
		for(t in skillData.skill.getUnlockables()) {
var trait = skillData.skill.getUnlockables()[t];
			var ftrait = {
				name: trait.getName(),
				desc: trait.getDescription(),
				key: trait.getKey(),
				cost: trait.getCost(),
				unlocked: skillData.isUnlocked(trait),
				mcTrait: trait
			}
			
			fskill.traits.push(ftrait);
		}
		
		retSkills.push(fskill);
	}
	
	return retSkills;
}


var SCRIPT_VERSION = "2.0b";
var SLOWTICK_TIMER_ID = 1;
var SLOWTICK_TIMER = 100;

function init(e) {
	
	
	//GEN PLAYER PERMISSIONS
	(function(e){
		var w = e.player.world;
		var data = w.getStoreddata();
		var playerperms = [
			"chat",
			"chat.color",
			"chat.command",
			"chat.hover",
		];
		for(i in _RAWCOLORS) {
var rawc = _RAWCOLORS[i];
			playerperms.push('chat.color.'+rawc);
		}
		for(i in _RAWEFFECTS) {
var rawc = _RAWEFFECTS[i];
			playerperms.push('chat.color.'+rawc);
		}
		//Register if not exists
		for(p in playerperms) {
var plperm = playerperms[p];
			var pperm = new Permission(plperm);
			if(!pperm.exists(data)) {
				pperm.save(data);
			}
		}

	})(e);

	//END GEN PLAYER PERMISSIONS

  (function(e){
    var pl = e.player;
    var w = pl.world;
    var data = w.getStoreddata();
    for(c in CHAT_EMOTES) {
var ce = CHAT_EMOTES[c];
      var ec = new Emote(c);
      if(!ec.exists(data)) {
        ec.save(data);
      }
    }
  })(e);

	(function(e){
		var pl = e.player;
		var w = pl.world;
		var data = w.getStoreddata();
		var plo = new Player(pl.getName()).init(data).sync(pl);
		var sb = w.getScoreboard();

		if(!sb.hasObjective("bounty")) {
			sb.addObjective("bounty", "dummy");
		}
		var sbbounty = sb.getObjective("bounty");
		if(!sbbounty.hasScore(pl.getName())) {
			sbbounty.createScore(pl.getName()).setValue(0);
		}
	})(e);


	var w = e.player.world;
	var sb = w.getScoreboard();
	//e.player.getTimers().forceStart(SLOWTICK_TIMER_ID, SLOWTICK_TIMER, true);

	if(DEFAULT_TEAM_JOIN != null) {
		var t = sb.getPlayerTeam(e.player.getName());
		if(t == null && sb.hasTeam(DEFAULT_TEAM_JOIN)) {
			sb.getTeam(DEFAULT_TEAM_JOIN).addPlayer(e.player.getName());
		}
	}


}

function interact(e) {
	
	

	(function(e){
		//Create a 'build'-event for player scripts
		if(e.type == 2) {
			var place_block = e.player.getMainhandItem();
			if( (place_block == null ? true : !place_block.isBlock()) ) { //If placeblock is null or not a block at all
				place_block = e.player.getOffhandItem(); //Try the offhand item
			}
			if( (place_block == null ? false : place_block.isBlock()) ) { //Is place_block not null and is a block?
				//Build event can be executed, check if it exists though
				if(typeof(build) != typeof(undefined)) {
					build(e, place_block);
				}
			} else {
				if(typeof(blockinteract) != typeof(undefined)) {
					blockinteract(e);
				}
			}
		}
	})(e);

}

function slowTick(e) {
	
}

function keyPressed(e) {
	
}

function blockinteract(e) {//Custom event
	
	
	if(!e.isCanceled()) {
		var pl = e.player;
		var w = pl.world;
		var data = w.getStoreddata();
		var sb = w.getScoreboard();
		var regids = new Region().getAllDataIds(data);
		for(ri in regids) {
var regid = regids[ri];
			var reg = new Region(regid);
			reg.load(data);
			var inRegion = reg.hasCoord(normalizePos((e.target==null?e.player:e.target).getPos()));
			if(inRegion) {
				var regperm = reg.getPermission();
				regperm.load(data);

				if(!regperm.permits(pl.getName(), sb, data) && reg.owner != pl.getName()) {
					tellPlayer(pl, "&cYou don't have permission to interact here!");
					e.setCanceled(true);
					break;
				}
			}
		}

	}


}

function build(e, placeblock) { //Custom event
	
	
	var pl = e.player;
	var w = pl.world;
	var data = w.getStoreddata();
	var sb = w.getScoreboard();
	var regids = new Region().getAllDataIds(data);
	for(ri in regids) {
var regid = regids[ri];
		var reg = new Region(regid);
		reg.load(data);
		var inRegion = reg.hasCoord(normalizePos(e.target.getPos()));
		if(inRegion) {
			var regperm = reg.getPermission();
			regperm.load(data);

			if(!regperm.permits(pl.getName(), sb, data) && reg.owner != pl.getName()) {
				tellPlayer(pl, "&cYou don't have permission to build here!");
				e.setCanceled(true);
				break;
			}
		}
	}

	//



}

function kill(e) {
	
}

function login(e) {
	
	
	(function(e){
		var pl = e.player;
		var data = pl.world.getStoreddata();
		var plo = new Player(pl.getName()).init(data).sync(pl);


		var pchats = plo.getChats(data);
		if(pchats.length == 0) {
			tellPlayer(pl, "["+SERVER_TITLE+"&r] &eYou are not in a chatchannel yet! &6&nClick here{run_command:!chat list|show_text:$6!chat list}&r&e to join one!");
		} else {
			var tellchannels = "";
			pchats.forEach(function(pc){
				tellchannels += pc.getTag('{run_command:!chat leave '+pc.name+'|show_text:$eClick to leave channel.}')+'&r ';
			});

			tellPlayer(pl, "["+SERVER_TITLE+"&r] &eYou are talking in channels: &r"+tellchannels);
		}

		plo.data.lastLogin = new Date().getTime();
		plo.save(data);
	})(e);


	var pl = e.player;
	tellPlayer(pl, "["+SERVER_TITLE+"&r] &eIf you dont see cookies and cake &r:cookie::cake::cookie:&e you dont have our resourcepack! Click &6here{open_url:https://www.dropbox.com/s/m1va7k2zeixgry0/GramadosResources.zip?dl=0|show_text$e$oDownload Resource Pack}&r&e to download.");
	tellPlayer(e.player, "[&6&lGramados&r] &9Make sure to join our &n&9Discord{open_url:https://discord.gg/zcjyXxK}&r &9server!");

}

function logout(e) {
	
}

function pickedUp(e) {
	
}

function rangedLaunched(e) {
	
}

function timer(e) {
	
	if(e.id == SLOWTICK_TIMER_ID) {
		if(typeof(slowTick) != typeof(undefined)) {
			slowTick(e);
		}
	}
}

function toss(e) {
	
}

function tick(e) {
	
	
	//CHECK MONEY PAY
	(function(e){
		var pl = e.player;
		var plo = new Player(pl.getName());
		var data = pl.world.getStoreddata();
		plo.load(data);

		if(new Date().getTime() > (plo.data.lastPayed+plo.data.payTime)) {
			if(plo.data.pay > 0) {
				var pm = genMoney(pl.world, plo.data.pay);
				for(p in pm) {
var pii = pm[p];
					pl.giveItem(pii);
				}
				tellPlayer(pl, "&aYou have earned &r:money:&e"+getAmountCoin(plo.data.pay)+"&a!");
				plo.data.lastPayed = new Date().getTime();
				plo.save(data);
			}
		}

		//CHECK JOB PAY
		for(j in plo.data.jobs) {
var pjob = plo.data.jobs[j];
			var job = new Job(j);
			if(!job.exists(data)) {
				plo.delJob(j);
				plo.save(data);
				continue;
			}
			job.load(data);
			var jobpay = job.data.pay;
			var jobpayTime = job.data.payTime;
			var joblastPayed = pjob.lastPayed;
			if(jobpay > 0) {
				var now = new Date().getTime();
				if(now >= joblastPayed+jobpayTime) {
					var pm = genMoney(pl.world, jobpay);
					for(p in pm) {
var pii = pm[p];
						pl.giveItem(pii);
					}
					tellPlayer(pl, "&aYou have earned &r:money:&e"+getAmountCoin(jobpay)+"&a from job '"+job.getDisplayName(data)+"'&r&a!");
					plo.data.jobs[j].lastPayed = now;
					plo.save(data);
				}
			}
		}


	})(e);


}

function attack(e) {
	
	

}

function broken(e) {
	
	
	var pl = e.player;
	var w = pl.world;
	var data = w.getStoreddata();
	var sb = w.getScoreboard();
	var regids = new Region().getAllDataIds(data);
	for(ri in regids) {
var regid = regids[ri];
		var reg = new Region(regid);
		reg.load(data);
		var inRegion = reg.hasCoord(normalizePos(e.block.getPos()));
		if(inRegion) {
			var regperm = reg.getPermission();
			regperm.load(data);

			if(!regperm.permits(pl.getName(), sb, data) && reg.owner != pl.getName()) {
				tellPlayer(pl, "&cYou don't have permission to break here!");
				e.setCanceled(true);
				break;
			}
		}
	}

	//



}

function chat(e) {
	
	if(e.message.substr(0, 1) == '!') {
		executeXCommand(e.message, e.player);
		e.setCanceled(true);
		return true;
	}

	var w = e.player.world;
	var data = w.getStoreddata();
	var sb = w.getScoreboard();

	var dpl = new Player(e.player.getName()).init(data);
	var allwdcolors = dpl.getAllowedColors(data, sb);
	var esccolors = removeFromArray(_RAWCODES, allwdcolors);
	var escmsg = escCcs(e.message.toString(), esccolors);
	var prefcol = dpl.getChatColorPref(sb, data);
	var chats = dpl.getChats(data);

	//Check @, $ and # mentions
	//@ - Player
	//$ - Team
	//# - Chatchannel
	var notifySounds = [
		'animania:cluck3',
	];
	var players = w.getAllPlayers();
	var teams = sb.getTeams();
	var allChats = new ChatChannel().getAllDataIds(data);
	var prgx = /@([\w\-\.]+)/g;
	var trgx = /\$([\w\-\.]+)/g;
	var crgx = /#([\w\-\.]+)/g;


	var tmatch = escmsg.match(trgx) || [];
	for(tm in tmatch) {
var tmt = tmatch[tm];
		for(tmi in teams) {
var team = teams[tmi];
			if(occurrences(team.getName().toLowerCase(), tmt.replace(trgx, '$1').toLowerCase()) > 0) {
				escmsg = escmsg.replace(tmt, '&'+getColorId(team.getColor())+'&o$'+team.getName()+prefcol);
			}
		}
	}

	var pmatch = escmsg.match(prgx) || [];
	for(pm in pmatch) {
var pmt = pmatch[pm];
		for(ply in players) {
var plyr = players[ply];
			if(occurrences(plyr.getName().toLowerCase(), pmt.replace(prgx, '$1').toLowerCase()) > 0) {
				var pmpl = new Player(plyr.getName()); //Dont have to init, only using scoreboard
				escmsg = escmsg.replace(pmt, '&9&o@'+plyr.getName()+'{suggest_command:/msg '+plyr.getName()+' |show_text:'+pmpl.getNameTag(sb, '', '', '', '$')+'}'+prefcol);
			}
		}
	}


	var cmatch = escmsg.match(crgx) || [];
	for(cm in cmatch) {
var cmt = cmatch[cm];
		for(cmi in allChats) {
var chat = allChats[cmi];
			chat = new ChatChannel(chat).init(data);
			var cmm = cmt.replace(crgx, '$1');
			var cmp = chat.getPermission(data);
			if(chat.getPermission(data).permits(e.player.getName(), sb, data)) {
				if(occurrences(chat.name.toLowerCase(), cmm.toLowerCase()) > 0 || occurrences(chat.data.displayName.toLowerCase(), cmm.toLowerCase()) > 0) {
					escmsg = escmsg.replace(cmt, '&'+getColorId(chat.data.color)+'&l#'+chat.data.displayName+'{run_command:!chat list '+chat.name+'}'+prefcol);
				}
			}
		}
	}

	//Chat emotes
	escmsg = parseEmotes(escmsg, dpl.getAllowedEmotes(sb, data));

	var pbounty = 0;
	var pobj = sb.getObjective("bounty");
	if(pobj != null) {
		pbounty = pobj.getScore(e.player.getName()).getValue();
	}
	//Concat new message
	var newmsg = parseEmotes(dpl.getNameTag(sb, ' -> ', '{suggest_command:/msg '+dpl.name+' |show_text:$6$lBounty: $r:money:$e'+getAmountCoin(pbounty)+'}'))+prefcol+escmsg;
	var toldPlayers = [];
	var wp = w.getAllPlayers();

	if(chats.length > 0) {
		for(c in chats) {
var ch = chats[c];
			for(ww in wp) {
var wpl = wp[ww];
				if(toldPlayers.indexOf(wpl.getName()) == -1 && ch.data.players.indexOf(wpl.getName()) > -1) {
					var wchats = [];
					var wcnames = [];
					new Player(wpl.getName()).init(data).getChats(data).forEach(function(wchat){
						wchats.push(wchat.getTag('', '$'));
						wcnames.push(wchat.name);
					});
					var ccpref = parseEmotes('&l[:lang:]{run_command:!chat list '+wcnames.join(" ")+'|show_text:'+wchats.join("\n")+'}&r ');
					executeCommand(wpl, "/tellraw "+wpl.getName()+" "+strf(ccpref+newmsg));
					toldPlayers.push(wpl.getName());
				}
			}
		}


	} else {
		for(ww in wp) {
var wpl = wp[ww];
			var wplo = new Player(wpl.getName()).init(data);
			if(toldPlayers.indexOf(wpl.getName()) == -1 && wplo.getChats(data).length == 0) {


				executeCommand(wpl, "/tellraw "+wpl.getName()+" "+strf(newmsg));
				toldPlayers.push(wpl.getName());
			}
		}
	}
	e.setCanceled(true); //Cancel real message
}

function containerOpen(e) {
	
}

function containerClose(e) {
	
}

function damaged(e) {
	
}

function died(e) {
	
	
	(function(e){
		var pl = e.player;
		var data = pl.world.getStoreddata();
		var plo = new Player(pl.getName()).init(data).sync(pl);
		var w = pl.world;
		var sb = w.getScoreboard();
		if(e.source != null) { //has source
			if(e.source.getType() == 1) { //Is source a player
				if(e.source.getName() != pl.getName()) {
					var objbounty = sb.getObjective("bounty");
					if(objbounty != null) {
						var pscore = objbounty.getScore(pl.getName());
						var pbounty =pscore.getValue()

						if(pbounty > 0) {
							var sco = new Player(e.source.getName()).init(data, false);
							executeCommand(pl, "/tellraw @a "+parseEmotes(strf(sco.getNameTag(sb)+"&a received &r:money:&e"+getAmountCoin(pbounty)+"&a for killing "+pl.getName()+"!")));
							givePlayerItems(e.source, genMoney(w, pbounty));
							pscore.setValue(0);
						}
					}
				}
			}
		}
		var loseMoney = Math.ceil(plo.data.money/2);
		if(loseMoney > 0) {
			plo.data.money -= loseMoney;
			var lm = genMoney(w, loseMoney);
			for(l in lm) {
var lsm = lm[l];
				pl.dropItem(lsm);
			}
			plo.save(data);
			tellPlayer(pl, "&cYou lost &r:money:&e"+getAmountCoin(loseMoney)+"&c from your money pouch!");
		}


	})(e);


}

function factionUpdate(e) {
	
}
