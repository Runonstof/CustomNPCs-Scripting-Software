//==Reallife date handler for hiring regions etc
var msTable = {
	'y': 31556926000,
	'mon': 2629743830,
	'w': 604800000,
	'd': 86400000,
	'h': 3600000,
	'min': 60000,
	's': 1000,
	'ms': 1
};

Date.prototype.addTime = function(addTime) {
	this.setTime(this.getTime()+addTime);
};

Date.prototype.hasPassed = function(passDate) {
	return (this.getTime() >= passDate.getTime());
}

//Converts TimeString to number
function getStringTime(timeString) {
	//0y4mon3d 6h 8min3s 800ms
	var reg = /([\d]+)([a-zA-Z]+)/g;
	var _m = timeString.match(reg);
	var newTime = 0;
	var _tk = Object.keys(msTable);
	
	for(m in _m) {
		var fm = _m[m];
		var nm = fm.replace(reg, '$1').cInt();
		var om = fm.replace(reg, '$2');
		if(nm != null) {
			if(_tk.indexOf(om) != -1) {
				newTime += nm * (msTable[_tk[_tk.indexOf(om)]]);
			} else { newTime += nm; }
		}
	}
	
	return newTime;
}
//Converts number to TimeString
function getTimeString(stringTime, excludes) {
	if(typeof(excludes) == typeof(undefined)) { var excludes = []; }
	var newTime = parseInt(stringTime);
	var newStr = '';
	for(ms in msTable) {
		if(excludes.indexOf(ms) == -1) {
			var msnum = 0;
			while(newTime >= msTable[ms]) {
				msnum++;
				newTime -= msTable[ms];
			}
			if(msnum > 0) {
				newStr += msnum.toString()+ms;
			}
		}
	}
	
	
	return newStr;
}String.prototype.allMatch = function(regx) {
	var m = this.match(regx);
	var rr = [];
	for(mm in m) {
		var mt = m[mm];
		var rx = regx.exec(this);
		rr.push(rx);
	}
	
	return rr;
};

String.prototype.rangeUpper = function(min, max) {
	var str = '';
	for(var i = 0; i < this.length; i++) {
		var c = this.substring(i, i+1); //curchar
		if(i >= min && i < max) {
			c=c.toUpperCase();
		}
		str+=c.toString();
	}
	return str;
}

String.prototype.pad = function(character, len) {
	var n = this.toString();
	for(i = n.length; i < len; i++) {
		n += character.toString();
	}
	return n;
}

String.prototype.padMiddle = function(character, len) {
	
	var n = this.toString();
	var sc = Math.floor((len-n.length)/2);
	var ns = '';
	for(i = 0; i < sc; i++) {
		ns += character.toString();
	}
	ns+=n;
	for(i = 0; i < sc; i++) {
		ns += character.toString();
	}
	return ns;
}

String.prototype.cInt = function() {
	return (isNaN(parseInt(this)) ? null : parseInt(this));
}

String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};


var ASSET_MOD_ID = "adventureassets";
var Items = { 
	Tools: {
		Pickaxes: [
			"minecraft:wooden_pickaxe",
			"minecraft:stone_pickaxe",
			"minecraft:iron_pickaxe",
			"minecraft:golden_pickaxe",
			"minecraft:diamond_pickaxe",
			"dungeontactics:gilded_pickaxe",
			"dungeontactics:jewelled_pickaxe",
			"extragems:ruby_pickaxe",
			"extragems:sapphire_pickaxe",
			"extragems:topaz_pickaxe",
			"extragems:amethyst_pickaxe",
			"extragems:crystal_pickaxe",
			"aether_legacy:skyroot_pickaxe",
			"aether_legacy:holystone_pickaxe",
			"aether_legacy:zanite_pickaxe",
			"aether_legacy:gravitite_pickaxe",
			"aether_legacy:valkyrie_pickaxe",
		],
		Axes: [
			"minecraft:wooden_axe",
			"minecraft:stone_axe",
			"minecraft:iron_axe",
			"minecraft:golden_axe",
			"minecraft:diamond_axe",
			"aether_legacy:skyroot_axe",
			"aether_legacy:holystone_axe",
			"aether_legacy:zanite_axe",
			"aether_legacy:gravitite_axe",
			"aether_legacy:valkyrie_axe",
			"extragems:ruby_axe",
			"extragems:sapphire_axe",
			"extragems:amethyst_axe",
			"extragems:topaz_axe",
			"extragems:crystal_axe",
			"extragems:emerald_axe",
		]
	},
	Combat: {
		Shields: [
			"dungeontactics:wooden_shield",
			"dungeontactics:stone_shield",
			"minecraft:shield",
			"dungeontactics:tin_shield",
			"dungeontactics:copper_shield",
			"dungeontactics:bronze_shield",
			"dungeontactics:iron_shield",
			"dungeontactics:gold_shield",
			"dungeontactics:diamond_shield",
			"dungeontactics:emerald_shield",
			"dungeontactics:amethyst_shield",
			"dungeontactics:sapphire_shield",
			"dungeontactics:ruby_shield",
			"dungeontactics:topaz_shield",
			"dungeontactics:crystal_shield",
			"dungeontactics:gilded_shield",
			"dungeontactics:jewelled_shield",
		]
	}
}

function getHalfRotation(angle) {
	angle = fixAngle(angle);
	if(angle <= 180) { return angle; } else { return -(180-(angle-180)); }
}

function getQuartRotation(dir) {
	dir = getHalfRotation(dir);
	
	if(Math.abs(dir) > 90) {
		dir = (180-Math.abs(dir))*sign(dir);
	}
	
	return dir;
}

function playerIsOnline(world, player) {
	var isOnline = false;
	var pl = world.getAllPlayers();
	for(p in pl) {
		if(pl[p].getName() == player.toString()) {
			isOnline = true;
			break;
		}
	}
	return isOnline;
}

function getHandItem(player) {
	return player.getMainhandItem() || player.getOffhandItem();
}
function uniqid() {
	var id = '';
	for(var i = 0; i <= 3; i++) {
		id+=Math.random().toString(36).substr(2, 9);
	}
	return id;
}

function occurrences(string, subString, allowOverlapping) {
	if(typeof(allowOverlapping) == typeof(undefined)) { var allowOverlapping = false; }
    string += "";
    subString += "";
	
    if (subString.length <= 0) return (string.length + 1);

    var n = 0,
        pos = 0,
        step = allowOverlapping ? 1 : subString.length;

    while (true) {
        pos = string.indexOf(subString, pos);
        if (pos >= 0) {
            ++n;
            pos += step;
        } else break;
    }
    return n;
}

function arrayTakeRange(arr, start, end) {
	if(typeof(end) == typeof(undefined)) { var end = null; }
	if(end == null) { end = arr.length; }
	var a = [];
	var _end = Math.min(end, arr.length);
	var _start = Math.min(start, _end);
	for(var i = _start; i < Math.min(end, arr.length); i++) {
		if(typeof(arr[i]) != typeof(undefined)) {
			a.push(arr[i]);
		}
	}
	return a;
}


function sign(num) {
	if(typeof(num) == typeof(undefined)) { var num = 0; }
	if(num > 0) { return 1; }
	if(num < 0) { return -1; }
	return 0;
}


var javaObject = Java.type("java.lang.Object");
Java.extend(javaObject, {
	tryIndex: function(index) {
		for(i in index) {
			var ii = index[i].toString();
			if(this[ii] != null) { return this[ii]; }
		}
		return -1;
	}
})

function g(obj, grp_props) {
	for(j in grp_props) {
		var props = grp_props[j];
		for(i in props[0]) {
			if(obj != null) {
				if(typeof(obj[props[0][i]]) != typeof(undefined)) {
					obj = obj[props[0][i]];
					
					break;
				}
			}
		}
	}
	
	
	return obj;
}

function getAllFuncs(obj) {
    var props = [];

    do {
        props = props.concat(Object.getOwnPropertyNames(obj));
    } while (obj = Object.getPrototypeOf(obj));

    return props.sort().filter(function(e, i, arr) { 
       if (e!=arr[i+1] && typeof obj[e] == 'function') return true;
    });
}

function removeFromArray(arr, vals) {
	if(typeof(vals) == 'string') { vals = [vals]; }
	var a = [];
	arr.forEach(function(el){a.push(el);});//Copy array
	for(v in vals) {
		var i = arr.indexOf(vals[v]);
		if(i > -1) {
			a.splice(i, 1);
		}
	}
	
	return a;
}

var _RAWCOLORS = {
	'0': 'black',
	'1': 'dark_blue',
	'2': 'dark_green',
	'3': 'dark_aqua',
	'4': 'dark_red',
	'5': 'dark_purple',
	'6': 'gold',
	'7': 'gray',
	'8': 'dark_gray',
	'9': 'blue',
	'a': 'green',
	'b': 'aqua',
	'c': 'red',
	'd': 'light_purple',
	'e': 'yellow',
	'f': 'white',
};

function strf(str, toRaw) {
	if(typeof(toRaw) == typeof(undefined)) { var toRaw = false; }
	return strrawformat(str, toRaw);
}

function strrawformat(str, toRaw) {
	if(typeof(toRaw) == typeof(undefined)) { var toRaw = false; }
	var rf = [];
	var txt = '';
	var ri = -1;
	var isCode = false;
	var txtColor = 'white';
	var isItalic = 0;
	var isBold = 0;
	var isStrike = 0;
	var isUnderlined = 0;
	var isObf = 0;
	str = str+'&r ';
	
	for(var i = 0; i < str.length; i++) {
		var c = str.substr(i, 1);
		if(c == '&' || i == str.length-1) {
			//Check if new section has to be made
			if(txt.length > 0) {
				ri++;
				var cmds = [];
				
				rf.push([txt, txtColor, isItalic, isBold, isUnderlined, isStrike, isObf]);
				isItalic = false;
				isBold = false;
				isUnderlined = false;
				isStrike = false;
				isObf = false;
				txtColor = 'white';
				txt = '';
			}
			isCode = true;
			continue;
		} else {
			if(!isCode) {
				txt += c.toString();
			} else {
				//Check Colors
				if(typeof(_RAWCOLORS[c]) != typeof(undefined)) {
					txtColor = _RAWCOLORS[c];
				}
				//Check Markup
				switch(c.toString()) {
					case 'o': {
						isItalic = true;
						break;
					}
					case 'l': {
						isBold = true;
						break;
					}
					case 'n': {
						isUnderlined = true;
						break;
					}
					case 'm': {
						isStrike = true;
						break;
					}
					case 'k': {
						isObf = true;
						break;
					}
					case 'r': {
						isItalic = false;
						isBold = false;
						isUnderlined = false;
						isStrike = false;
						isObf = false;
						txtColor = 'white';
						break;
					}
				}
				isCode = false;
			}
		}
	}
	
	return (!toRaw ? rf : rawformat(rf));
}


function rawformat(str_pieces, fullraw) {
	if(typeof(fullraw) == typeof(undefined)) { var fullraw = true; }
	//print("FULLRAR: "+fullraw.toString());
	var txt = '';
	if(fullraw) { txt+='[""'; }
	
	for(i in str_pieces) {
		var p = str_pieces[i];
		p[0] = p[0].replace(/\"/g, '\\"');
		var pc = '{"text":"'+p[0].toString()+'"';
		if(p[1]) { pc+=',"color":"'+p[1].toString()+'"'; }
		if(p[2]) { pc+=',"italic":true'; }
		if(p[3]) { pc+=',"bold":true'; }
		if(p[4]) { pc+=',"underlined":true'; }
		if(p[5]) { pc+=',"strikethrough":true'; }
		if(p[6]) { pc+=',"obfuscated":true'; }
		if(p[7]) { pc+=',"clickEvent":{"action":"run_command","value":"'+p[6]+'"}'; }
		pc += '}';
		
		txt+=','+pc.toString();
	}
	
	if(fullraw) {
		txt += ']';
	}
	return txt;
	

}

function data_get(data, keys) {
	var get = {};
	for(k in keys) {
		//var key = keys[k];
		get[k] = data.get(k);
		if(get[k] == null) { get[k] = keys[k]; }
	}
	
	return get;
}

function data_register(data, vals) {
	for(k in vals) {
		var val = vals[k];
		if(data.get(k) == null) { data.put(k, val); }
	}
}

function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}

function data_overwrite(data, keys, vals) {
	if(typeof(keys) == typeof(undefined)) { var keys = []; }
	if(typeof(vals) == typeof(undefined)) { var vals = []; }
	if(typeof(keys) == 'string') { keys = [keys]; }
	if(typeof(vals) == 'string') { vals = [vals]; }
	
	for(k in keys) {
		var key = keys[k];
		var val = vals[k];
		data.put(key, val);
	}
}

function posdir(pos, dir, pitch, len, flying) {
	if(typeof(dir) == typeof(undefined)) { var dir = 0; }
	if(typeof(pitch) == typeof(undefined)) { var pitch = 0; }
	if(typeof(len) == typeof(undefined)) { var len = 1; }
	if(typeof(flying) == typeof(undefined)) { var flying = false; }
	var x = pos.getX();
	var y = pos.getY();
	var z = pos.getZ();
	var xdir = getQuartRotation(dir);
	var zdir = getQuartRotation(dir-90);
	x += Math.round(len*(Math.abs(xdir)/90)*sign(xdir));
	z += Math.round(len*(Math.abs(zdir)/90)*sign(zdir));
	if(flying) {
		y += (len)*(Math.abs(pitch)/90)*-sign(pitch);
	}
	return {x:x,y:y,z:z};
}


function fixAngle(angle) {
	angle = Math.abs(angle);
	if(angle >= 360) { angle -= 360; }
	return angle;
}

function lengthpitch_y(pitch, length) {
	return Math.round(pitch/-90)*length;
}


function lengthdir_x(angle, length) {
	if(typeof(length) == typeof(undefined)) { var length = 1; }
	return Math.round((getQuartRotation(angle)/90)*length);
}

function lengthdir_z(angle, length) {
	if(typeof(length) == typeof(undefined)) { var length = 1; }
	angle = fixAngle(angle+270);
	return -lengthdir_x(angle, length);
}

function pick(a, amount) {
	if(typeof(amount) == typeof(undefined)) { var amount = 1; }
	var index = Math.floor(Math.random() * a.length);
	amount = Math.min(a.length, amount);
	if(amount == 1) {
		return a[index];
	} else {
		var picks = [];
		
		while(picks.length < amount) {
			index = Math.floor(Math.random() * a.length);
			if(picks.indexOf(a[index]) == -1) { picks.push(a[index]); }
		}
		
		return picks;
	}
}

function escapeNbtJson(json, trim_ends) {
	if(typeof(trim_ends) == typeof(undefined)) { var trim_ends = true; }
	json = json.replace(/(?:\\n|\\)/g, '');
	json = json.replace(/(\d) ([fbds]+)/g, "$1$2");
	json = json.replace(/\\("|')/g, "$1");
	if(trim_ends) {
		json = json.slice(1, json.length - 1);
	}
	
	return json;
}


function array_remove(array, element) {
  var index = array.indexOf(element);

  if (index !== -1) {
    array.splice(index, 1);
  }
}

function pickwhere(a, fn, amount) {
	return pick(array_filter(a, fn), amount);
}

function array_dist(a) {
	var b = [];
	for(c in a) {
		if(b.indexOf(a[c]) == -1) {
			b.push(a[c]);
		}
	}
	
	return b;
}

function array_filter(a, fn) {
	var aa = [];
	for(i in a) {
		if(fn(a[i])) { aa.push(a[i]); }
	}
	
	return aa;
}

function ccs(str) { return colorCodeString(str); }

function colorCodeString(str) {
	return str.replace(/&/g, '\u00A7');
}

function genName(name) {
	var p = [
    'Amazing',
    'Awesome',
    'Blithesome',
    'Excellent',
    'Fabulous',
    'Fantastic',
    'Favorable',
    'Gorgeous',
    'Incredible',
    'Outstanding',
    'Perfect',
    'Propitious',
    'Remarkable',
    'Rousing',
    'Spectacular',
    'Splendid',
    'Stellar',
    'Super',
    'Upbeat',
    'Unbelievable',
    'Wondrous',
	'Tempered',
	'Legendary',
	'Magical'
	];
	var s = [
		'Destruction',
		'Slaughter',
		'Starlight',
		'Heroism',
		'Bonebreaking',
		'The Fallen',
		'Silence',
		'Spellkeeping',
		'Massacre',
		'Sanity',
		'Insanity',
		'Remorse',
		'Fury'
	];
	
	return pick(p) + ' ' + name + ' of ' + pick(s);
}

function nbtCopy(nbt, api) {
	return api.stringToNbt(nbt.toJsonString());
}

function getDayTime(time) {
	while(time > 24000) { time -= 24000; }
	return time;
}

function random_ranges(min, max, amount) {
	var a = 0;
	for(var i = 0; i < amount; i++) { a += random_range(min, max); }
	return a;
}

function rrandom_ranges(min, max, amount) {
	var a = 0;
	for(var i = 0; i < amount; i++) { a += rrandom_range(min, max); }
	return a;
}

function pickchance(a, amount) {
	var aa = [];
	for(e in a) {
		if(!isArray(a[e])) {
			aa[aa.length] = a[e];
		} else {
			for(var i = 0; i < a[e][1]; i++) {
				aa[aa.length] = a[e][0];
			}
		}
	}
	
	return pick(aa, amount);
}

function inArray(a, val) {
	for(k in a) { if(a[k] === val) { return true; } }
	return false
}

function rrandom_range(min, max) { return Math.round(random_range(min, max)); }

function random_range(_min, _max) {
	var min = Math.min(_min, _max);
	var max = Math.max(_min, _max);
	
	var diff = max - min;
	
	return (min + (Math.random() * diff));
}

function array_merge(a1, a2) {
	var bb = [];
	for(k in a1) {
		bb[k] = a1[k];
	}
	for(k in a2) {
		bb[k] = a2[k];
	}
	return bb;
}

function isArray(obj) {
	if(typeof(obj) === 'object') {
      for(k in obj) {
      
          if(isNaN(k)) { return false; }
      }
      

      return true;
    } else { return false }
}

function isObject(obj) {
	return ( typeof(obj) === 'object' && !isArray(obj) );
}


function nbtItem(nbt, w, api) {
	if(typeof(nbt) == 'string') { nbt = api.stringToNbt(nbt); }
	var item = w.createItemFromNbt(nbt);
	
	return item;
}
var regenTimerId = 1;
var isRegen = false;
var data_vals = {
	'modelBlockId': 'minecraft:grass',
	'blockId': 'minecraft:coal_ore',
	'regenBlockId': 'minecraft:stone',
	'dropItems': '[]',
	'dropXp': '[]',
	'dropSkillXp': '[]',
	'minRegenTime': 100,
	'maxRegenTime': 200
};
var bli = clone(data_vals);

function reloadRegenData(data) {
	bli = data_get(data, data_vals);
}

function updateModel(block) {
	if(!isRegen && block.getModel() != bli.blockId) {
		block.setModel(bli.blockId);
	}
	if(isRegen && block.getModel() != bli.regenBlockId) {
		block.setModel(bli.regenBlockId);
	}
}









function init(e){
	
	(function(e){
		var d = e.block.getStoreddata();
		
		data_register(d, data_vals);
		reloadRegenData(d);
		isRegen = false;
		updateModel(e.block);
	})(e);

}

function interact(e){
	
}

function tick(e){
	
	(function(e){
		var d = e.block.getStoreddata();
		updateModel(e.block);
	})(e);

}

function broken(e){
	
}

function clicked(e){
	
}

function collide(e){
	
}

function doorToggle(e){
	
}

function fallenUpon(e){
	
}

function exploded(e){
	
}

function harvested(e){
	
	if(e.player.getGamemode() != 1 && !e.player.isSneaking()) {
		if(!isRegen) {
			isRegen = true;
			e.block.getTimers().forceStart(regenTimerId, rrandom_range(bli.minRegenTime, bli.maxRegenTime), false);
		}
		e.setCanceled(true);
	}

}

function neighborChanged(e){
	
}

function rainFilled(e){
	
}

function redstone(e){
	
}

function timer(e){
	
	(function(e){
		if(e.id == regenTimerId) {
			isRegen = false;
			updateModel(e.block);
		}
	})(e);

}
